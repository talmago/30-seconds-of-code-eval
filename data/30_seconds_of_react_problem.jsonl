{"task_id":"task/1","prompt":"const useUnload = fn => {","canonical_solution":"  const cb = React.useRef(fn);\n\n  React.useEffect(() => {\n    const onUnload = cb.current;\n    window.addEventListener('beforeunload', onUnload);\n    return () => {\n      window.removeEventListener('beforeunload', onUnload);\n    };\n  }, [cb]);\n};","entry_point":"useUnload","test":"const App = () => {\n  useUnload(e => {\n    e.preventDefault();\n    const exit = confirm('Are you sure you want to leave?');\n    if (exit) window.close();\n  });\n  return <div>Try closing the window.</div>;\n};\nReactDOM.render(<App />, document.getElementById('root'));"}
{"task_id":"task/2","prompt":"const useClickOutside = (ref, callback) => {","canonical_solution":"  const handleClick = e => {\n    if (ref.current && !ref.current.contains(e.target)) {\n      callback();\n    }\n  };\n  React.useEffect(() => {\n    document.addEventListener('click', handleClick);\n    return () => {\n      document.removeEventListener('click', handleClick);\n    };\n  });\n};","entry_point":"useClickOutside","test":"const ClickBox = ({ onClickOutside }) => {\n  const clickRef = React.useRef();\n  useClickOutside(clickRef, onClickOutside);\n  return (\n    <div\n      className=\"click-box\"\n      ref={clickRef}\n      style={{\n        border: '2px dashed orangered',\n        height: 200,\n        width: 400,\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center'\n      }}\n    >\n      <p>Click out of this element</p>\n    </div>\n  );\n};\n\nReactDOM.render(\n  <ClickBox onClickOutside={() => alert('click outside')} />,\n  document.getElementById('root')\n);"}
{"task_id":"task/3","prompt":"const useSessionStorage = (keyName, defaultValue) => {","canonical_solution":"  const [storedValue, setStoredValue] = React.useState(() => {\n    try {\n      const value = window.sessionStorage.getItem(keyName);\n\n      if (value) {\n        return JSON.parse(value);\n      } else {\n        window.sessionStorage.setItem(keyName, JSON.stringify(defaultValue));\n        return defaultValue;\n      }\n    } catch (err) {\n      return defaultValue;\n    }\n  });\n\n  const setValue = newValue => {\n    try {\n      window.sessionStorage.setItem(keyName, JSON.stringify(newValue));\n    } catch (err) {}\n    setStoredValue(newValue);\n  };\n\n  return [storedValue, setValue];\n};","entry_point":"useSessionStorage","test":"const MyApp = () => {\n  const [name, setName] = useSessionStorage('name', 'John');\n\n  return <input value={name} onChange={e => setName(e.target.value)} />;\n};\n\nReactDOM.render(<MyApp />, document.getElementById('root'));"}
{"task_id":"task/4","prompt":"const useTitle = title => {","canonical_solution":"  const documentDefined = typeof document !== 'undefined';\n  const originalTitle = React.useRef(documentDefined ? document.title : null);\n\n  React.useEffect(() => {\n    if (!documentDefined) return;\n\n    if (document.title !== title) document.title = title;\n\n    return () => {\n      document.title = originalTitle.current;\n    };\n  }, []);\n};","entry_point":"useTitle","test":"const Alert = () => {\n  useTitle('Alert');\n  return <p>Alert! Title has changed</p>;\n};\n\nconst MyApp = () => {\n  const [alertOpen, setAlertOpen] = React.useState(false);\n\n  return (\n    <>\n      <button onClick={() => setAlertOpen(!alertOpen)}>Toggle alert</button>\n      {alertOpen && <Alert />}\n    </>\n  );\n};\n\nReactDOM.render(<MyApp />, document.getElementById('root'));"}
{"task_id":"task/5","prompt":"const useEffectOnce = (callback, when) => {","canonical_solution":"  const hasRunOnce = React.useRef(false);\n  React.useEffect(() => {\n    if (when && !hasRunOnce.current) {\n      callback();\n      hasRunOnce.current = true;\n    }\n  }, [when]);\n};","entry_point":"useEffectOnce","test":"const App = () => {\n  const [clicked, setClicked] = React.useState(false);\n  useEffectOnce(() => {\n    console.log('mounted');\n  }, clicked);\n  return <button onClick={() => setClicked(true)}>Click me</button>;\n};\n\nReactDOM.render(<App />, document.getElementById('root'));"}
{"task_id":"task/6","prompt":"const AccordionItem = ({ label, isCollapsed, handleClick, children }) => {","canonical_solution":"  return (\n    <>\n      <button className=\"accordion-button\" onClick={handleClick}>\n        {label}\n      </button>\n      <div\n        className={`accordion-item ${isCollapsed ? 'collapsed' : 'expanded'}`}\n        aria-expanded={isCollapsed}\n      >\n        {children}\n      </div>\n    </>\n  );\n};\n\nconst Accordion = ({ defaultIndex, onItemClick, children }) => {\n  const [bindIndex, setBindIndex] = React.useState(defaultIndex);\n\n  const changeItem = itemIndex => {\n    if (typeof onItemClick === 'function') onItemClick(itemIndex);\n    if (itemIndex !== bindIndex) setBindIndex(itemIndex);\n  };\n  const items = children.filter(item => item.type.name === 'AccordionItem');\n\n  return (\n    <>\n      {items.map(({ props }) => (\n        <AccordionItem\n          isCollapsed={bindIndex !== props.index}\n          label={props.label}\n          handleClick={() => changeItem(props.index)}\n          children={props.children}\n        />\n      ))}\n    </>\n  );\n};","entry_point":"Accordion","test":"ReactDOM.render(\n  <Accordion defaultIndex=\"1\" onItemClick={console.log}>\n    <AccordionItem label=\"A\" index=\"1\">\n      Lorem ipsum\n    </AccordionItem>\n    <AccordionItem label=\"B\" index=\"2\">\n      Dolor sit amet\n    </AccordionItem>\n  </Accordion>,\n  document.getElementById('root')\n);"}
{"task_id":"task/7","prompt":"const useIsomorphicEffect =","canonical_solution":"  typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;","entry_point":"useIsomporphicEffect","test":"const MyApp = () => {\n  useIsomorphicEffect(() => {\n    window.console.log('Hello');\n  }, []);\n\n  return null;\n};\n\nReactDOM.render(<MyApp />, document.getElementById('root'));"}
{"task_id":"task/8","prompt":"const useGetSet = initialState => {","canonical_solution":"  const state = React.useRef(initialState);\n  const [, update] = React.useReducer(() => ({}));\n\n  return React.useMemo(\n    () => [\n      () => state.current,\n      newState => {\n        state.current = newState;\n        update();\n      },\n    ],\n    []\n  );\n};","entry_point":"useGetSet","test":"const Counter = () => {\n  const [getCount, setCount] = useGetSet(0);\n  const onClick = () => {\n    setTimeout(() => {\n      setCount(getCount() + 1);\n    }, 1_000);\n  };\n\n  return <button onClick={onClick}>Count: {getCount()}</button>;\n};\n\nReactDOM.render(<Counter />, document.getElementById('root'));"}
{"task_id":"task/9","prompt":"const useInterval = (callback, delay) => {","canonical_solution":"  const savedCallback = React.useRef();\n\n  React.useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  React.useEffect(() => {\n    const tick = () => {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n};","entry_point":"useInterval","test":"const Timer = props => {\n  const [seconds, setSeconds] = React.useState(0);\n  useInterval(() => {\n    setSeconds(seconds + 1);\n  }, 1000);\n\n  return <p>{seconds}</p>;\n};\n\nReactDOM.render(<Timer />, document.getElementById('root'));"}
{"task_id":"task/10","prompt":"const Loader = ({ size }) => {","canonical_solution":"  return (\n    <svg\n      className=\"loader\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width={size}\n      height={size}\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    >\n      <circle cx=\"12\" cy=\"12\" r=\"10\" />\n    </svg>\n  );\n};","entry_point":"Loader","test":"ReactDOM.render(<Loader size={24} />, document.getElementById('root'));"}
{"task_id":"task/11","prompt":"const Modal = ({ isVisible = false, title, content, footer, onClose }) => {","canonical_solution":"  const keydownHandler = ({ key }) => {\n    switch (key) {\n      case 'Escape':\n        onClose();\n        break;\n      default:\n    }\n  };\n\n  React.useEffect(() => {\n    document.addEventListener('keydown', keydownHandler);\n    return () => document.removeEventListener('keydown', keydownHandler);\n  });\n\n  return !isVisible ? null : (\n    <div className=\"modal\" onClick={onClose}>\n      <div className=\"modal-dialog\" onClick={e => e.stopPropagation()}>\n        <div className=\"modal-header\">\n          <h3 className=\"modal-title\">{title}</h3>\n          <span className=\"modal-close\" onClick={onClose}>\n            &times;\n          </span>\n        </div>\n        <div className=\"modal-body\">\n          <div className=\"modal-content\">{content}</div>\n        </div>\n        {footer && <div className=\"modal-footer\">{footer}</div>}\n      </div>\n    </div>\n  );\n};","entry_point":"Modal","test":"const App = () => {\n  const [isModal, setModal] = React.useState(false);\n  return (\n    <>\n      <button onClick={() => setModal(true)}>Click Here</button>\n      <Modal\n        isVisible={isModal}\n        title=\"Modal Title\"\n        content={<p>Add your content here</p>}\n        footer={<button>Cancel</button>}\n        onClose={() => setModal(false)}\n      />\n    </>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('root'));"}
{"task_id":"task/12","prompt":"const useIntersectionObserver = (ref, options) => {","canonical_solution":"  const [isIntersecting, setIsIntersecting] = React.useState(false);\n\n  React.useEffect(() => {\n    const observer = new IntersectionObserver(([entry]) => {\n      setIsIntersecting(entry.isIntersecting);\n    }, options);\n\n    if (ref.current) {\n      observer.observe(ref.current);\n    }\n\n    return () => {\n      observer.unobserve(ref.current);\n    };\n  }, []);\n\n  return isIntersecting;\n};","entry_point":"useIntersectionObserver","test":"const MyApp = () => {\n  const ref = React.useRef();\n  const onScreen = useIntersectionObserver(ref, { threshold: 0.5 });\n\n  return (\n    <div>\n      <div style={{ height: '100vh' }}>Scroll down</div>\n      <div style={{ height: '100vh' }} ref={ref}>\n        <p>{onScreen ? 'Element is on screen.' : 'Scroll more!'}</p>\n      </div>\n    </div>\n  );\n};\n\nReactDOM.render(<MyApp />, document.getElementById('root'));"}
{"task_id":"task/13","prompt":"const Slider = ({ ","canonical_solution":"  min = 0,\n  max = 100,\n  defaultValue,\n  onValueChange,\n  ...rest\n}) => {\n  return (\n    <input\n      type=\"range\"\n      min={min}\n      max={max}\n      defaultValue={defaultValue}\n      onChange={({ target: { value } }) => onValueChange(value)}\n      {...rest}\n    />\n  );\n};","entry_point":"Slider","test":"ReactDOM.render(\n  <Slider onValueChange={val => console.log(val)} />,\n  document.getElementById('root')\n);"}
{"task_id":"task/14","prompt":"const useToggler = initialState => {","canonical_solution":"  const [value, setValue] = React.useState(initialState);\n\n  const toggleValue = React.useCallback(() => setValue(prev => !prev), []);\n\n  return [value, toggleValue];\n};","entry_point":"useToggler","test":"const Switch = () => {\n  const [val, toggleVal] = useToggler(false);\n  return <button onClick={toggleVal}>{val ? 'ON' : 'OFF'}</button>;\n};\nReactDOM.render(<Switch />, document.getElementById('root'));"}
{"task_id":"task/15","prompt":"const useHover = () => {","canonical_solution":"  const [isHovering, setIsHovering] = React.useState(false);\n\n  const handleMouseOver = React.useCallback(() => setIsHovering(true), []);\n  const handleMouseOut = React.useCallback(() => setIsHovering(false), []);\n\n  const nodeRef = React.useRef();\n\n  const callbackRef = React.useCallback(\n    node => {\n      if (nodeRef.current) {\n        nodeRef.current.removeEventListener('mouseover', handleMouseOver);\n        nodeRef.current.removeEventListener('mouseout', handleMouseOut);\n      }\n\n      nodeRef.current = node;\n\n      if (nodeRef.current) {\n        nodeRef.current.addEventListener('mouseover', handleMouseOver);\n        nodeRef.current.addEventListener('mouseout', handleMouseOut);\n      }\n    },\n    [handleMouseOver, handleMouseOut]\n  );\n\n  return [callbackRef, isHovering];\n};","entry_point":"useHover","test":"const MyApp = () => {\n  const [hoverRef, isHovering] = useHover();\n\n  return <div ref={hoverRef}>{isHovering ? 'Hovering' : 'Not hovering'}</div>;\n};\n\nReactDOM.render(<MyApp />, document.getElementById('root'));"}
{"task_id":"task/16","prompt":"const usePrevious = value => {","canonical_solution":"  const ref = React.useRef();\n  React.useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n};","entry_point":"usePrevious","test":"const Counter = () => {\n  const [value, setValue] = React.useState(0);\n  const lastValue = usePrevious(value);\n\n  return (\n    <div>\n      <p>\n        Current: {value} - Previous: {lastValue}\n      </p>\n      <button onClick={() => setValue(value + 1)}>Increment</button>\n    </div>\n  );\n};\n\nReactDOM.render(<Counter />, document.getElementById('root'));"}
{"task_id":"task/17","prompt":"const useMediaQuery = (query, whenTrue, whenFalse) => {","canonical_solution":"  if (typeof window === 'undefined' || typeof window.matchMedia === 'undefined')\n    return whenFalse;\n\n  const mediaQuery = window.matchMedia(query);\n  const [match, setMatch] = React.useState(!!mediaQuery.matches);\n\n  React.useEffect(() => {\n    const handler = () => setMatch(!!mediaQuery.matches);\n    mediaQuery.addListener(handler);\n    return () => mediaQuery.removeListener(handler);\n  }, []);\n\n  return match ? whenTrue : whenFalse;\n};","entry_point":"useMediaQuery","test":"const ResponsiveText = () => {\n  const text = useMediaQuery(\n    '(max-width: 400px)',\n    'Less than 400px wide',\n    'More than 400px wide'\n  );\n\n  return <span>{text}</span>;\n};\n\nReactDOM.render(<ResponsiveText />, document.getElementById('root'));"}
{"task_id":"task/18","prompt":"const useDefault = (defaultState, initialState) => {","canonical_solution":"  const [value, setValue] = React.useState(initialState);\n  const isValueEmpty = value === undefined || value === null;\n  return [isValueEmpty ? defaultState : value, setValue];\n};","entry_point":"useDefault","test":"const UserCard = () => {\n  const [user, setUser] = useDefault({ name: 'Adam' }, { name: 'John' });\n\n  return (\n    <>\n      <div>User: {user.name}</div>\n      <input onChange={e => setUser({ name: e.target.value })} />\n      <button onClick={() => setUser(null)}>Clear</button>\n    </>\n  );\n};\n\nReactDOM.render(<UserCard />, document.getElementById('root'));"}
{"task_id":"task/19","prompt":"const TagInput = ({ tags }) => {","canonical_solution":"  const [tagData, setTagData] = React.useState(tags);\n  const removeTagData = indexToRemove => {\n    setTagData([...tagData.filter((_, index) => index !== indexToRemove)]);\n  };\n  const addTagData = event => {\n    if (event.target.value !== '') {\n      setTagData([...tagData, event.target.value]);\n      event.target.value = '';\n    }\n  };\n  return (\n    <div className=\"tag-input\">\n      <ul className=\"tags\">\n        {tagData.map((tag, index) => (\n          <li key={index} className=\"tag\">\n            <span className=\"tag-title\">{tag}</span>\n            <span\n              className=\"tag-close-icon\"\n              onClick={() => removeTagData(index)}\n            >\n              x\n            </span>\n          </li>\n        ))}\n      </ul>\n      <input\n        type=\"text\"\n        onKeyUp={event => (event.key === 'Enter' ? addTagData(event) : null)}\n        placeholder=\"Press enter to add a tag\"\n      />\n    </div>\n  );\n};","entry_point":"TagInput","test":"ReactDOM.render(\n  <TagInput tags={['Nodejs', 'MongoDB']} />,\n  document.getElementById('root')\n);"}
{"task_id":"task/20","prompt":"const MultiselectCheckbox = ({ options, onChange }) => {","canonical_solution":"  const [data, setData] = React.useState(options);\n\n  const toggle = index => {\n    const newData = [...data];\n    newData.splice(index, 1, {\n      label: data[index].label,\n      checked: !data[index].checked\n    });\n    setData(newData);\n    onChange(newData.filter(x => x.checked));\n  };\n\n  return (\n    <>\n      {data.map((item, index) => (\n        <label key={item.label}>\n          <input\n            readOnly\n            type=\"checkbox\"\n            checked={item.checked || false}\n            onClick={() => toggle(index)}\n          />\n          {item.label}\n        </label>\n      ))}\n    </>\n  );\n};","entry_point":"MultiselectCheckbox","test":"const options = [{ label: 'Item One' }, { label: 'Item Two' }];\n\nReactDOM.render(\n  <MultiselectCheckbox\n    options={options}\n    onChange={data => {\n      console.log(data);\n    }}\n  />,\n  document.getElementById('root')\n);"}
{"task_id":"task/21","prompt":"const DataList = ({ isOrdered = false, data }) => {","canonical_solution":"  const list = data.map((val, i) => <li key={`${i}_${val}`}>{val}</li>);\n  return isOrdered ? <ol>{list}</ol> : <ul>{list}</ul>;\n};","entry_point":"DataList","test":"const names = ['John', 'Paul', 'Mary'];\nReactDOM.render(<DataList data={names} />, document.getElementById('root'));\nReactDOM.render(\n  <DataList data={names} isOrdered />,\n  document.getElementById('root')\n);"}
{"task_id":"task/22","prompt":"const Carousel = ({ carouselItems, ...rest }) => {","canonical_solution":"  const [active, setActive] = React.useState(0);\n  let scrollInterval = null;\n\n  React.useEffect(() => {\n    scrollInterval = setTimeout(() => {\n      setActive((active + 1) % carouselItems.length);\n    }, 2000);\n    return () => clearTimeout(scrollInterval);\n  });\n\n  return (\n    <div className=\"carousel\">\n      {carouselItems.map((item, index) => {\n        const activeClass = active === index ? ' visible' : '';\n        return React.cloneElement(item, {\n          ...rest,\n          className: `carousel-item${activeClass}`\n        });\n      })}\n    </div>\n  );\n};","entry_point":"Carousel","test":"ReactDOM.render(\n  <Carousel\n    carouselItems={[\n      <div>carousel item 1</div>,\n      <div>carousel item 2</div>,\n      <div>carousel item 3</div>\n    ]}\n  />,\n  document.getElementById('root')\n);"}
{"task_id":"task/23","prompt":"const useMergeState = (initialState = {}) => {","canonical_solution":"  const [value, setValue] = React.useState(initialState);\n\n  const mergeState = newState => {\n    if (typeof newState === 'function') newState = newState(value);\n    setValue({ ...value, ...newState });\n  };\n\n  return [value, mergeState];\n};","entry_point":"useMergeState","test":"const MyApp = () => {\n  const [data, setData] = useMergeState({ name: 'John', age: 20 });\n\n  return (\n    <>\n      <input\n        value={data.name}\n        onChange={e => setData({ name: e.target.value })}\n      />\n      <button onClick={() => setData(({ age }) => ({ age: age - 1 }))}>\n        -\n      </button>\n      {data.age}\n      <button onClick={() => setData(({ age }) => ({ age: age + 1 }))}>\n        +\n      </button>\n    </>\n  );\n};\n\nReactDOM.render(<MyApp />, document.getElementById('root'));"}
{"task_id":"task/24","prompt":"const useAsync = fn => {","canonical_solution":"  const initialState = { loading: false, error: null, value: null };\n  const stateReducer = (_, action) => {\n    switch (action.type) {\n      case 'start':\n        return { loading: true, error: null, value: null };\n      case 'finish':\n        return { loading: false, error: null, value: action.value };\n      case 'error':\n        return { loading: false, error: action.error, value: null };\n    }\n  };\n\n  const [state, dispatch] = React.useReducer(stateReducer, initialState);\n\n  const run = async (args = null) => {\n    try {\n      dispatch({ type: 'start' });\n      const value = await fn(args);\n      dispatch({ type: 'finish', value });\n    } catch (error) {\n      dispatch({ type: 'error', error });\n    }\n  };\n\n  return { ...state, run };\n};","entry_point":"useAsync","test":"const RandomImage = props => {\n  const imgFetch = useAsync(url =>\n    fetch(url).then(response => response.json())\n  );\n\n  return (\n    <div>\n      <button\n        onClick={() => imgFetch.run('https://dog.ceo/api/breeds/image/random')}\n        disabled={imgFetch.isLoading}\n      >\n        Load image\n      </button>\n      <br />\n      {imgFetch.loading && <div>Loading...</div>}\n      {imgFetch.error && <div>Error {imgFetch.error}</div>}\n      {imgFetch.value && (\n        <img\n          src={imgFetch.value.message}\n          alt=\"avatar\"\n          width={400}\n          height=\"auto\"\n        />\n      )}\n    </div>\n  );\n};\n\nReactDOM.render(<RandomImage />, document.getElementById('root'));"}
{"task_id":"task/25","prompt":"const useBodyScrollLock = () => {","canonical_solution":"  React.useLayoutEffect(() => {\n    const originalStyle = window.getComputedStyle(document.body).overflow;\n    document.body.style.overflow = 'hidden';\n    return () => (document.body.style.overflow = originalStyle);\n  }, []);\n};","entry_point":"useBodyScrollLock","test":"const Modal = ({ onClose }) => {\n  useBodyScrollLock();\n\n  return (\n    <div\n      style={{\n        zIndex: 100, background: 'rgba(0,0,0,0.25)', display: 'flex',\n        justifyContent: 'center', alignItems: 'center'\n      }}\n    >\n      <p\n        style={{ padding: 8, borderRadius: 8, background: '#fff' }}\n        onClick={onClose}\n      >\n        Scroll locked! <br /> Click me to unlock\n      </p>\n    </div>\n  );\n};\n\nconst MyApp = () => {\n  const [modalOpen, setModalOpen] = React.useState(false);\n\n  return (\n    <div\n      style={{\n        height: '400vh', textAlign: 'center', paddingTop: 100,\n        background: 'linear-gradient(to bottom, #1fa2ff, #12d8fa, #a6ffcb)'\n      }}\n    >\n      <button onClick={() => setModalOpen(true)}>Open modal</button>\n      {modalOpen && <Modal onClose={() => setModalOpen(false)} />}\n    </div>\n  );\n};\n\nReactDOM.render(<MyApp />, document.getElementById('root'));"}
{"task_id":"task/26","prompt":"const useForm = initialValues => {","canonical_solution":"  const [values, setValues] = React.useState(initialValues);\n\n  return [\n    values,\n    e => {\n      setValues({\n        ...values,\n        [e.target.name]: e.target.value\n      });\n    }\n  ];\n};","entry_point":"useForm","test":"const Form = () => {\n  const initialState = { email: '', password: '' };\n  const [values, setValues] = useForm(initialState);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(values);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"email\" name=\"email\" onChange={setValues} />\n      <input type=\"password\" name=\"password\" onChange={setValues} />\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n};\n\nReactDOM.render(<Form />, document.getElementById('root'));"}
{"task_id":"task/27","prompt":"const usePortal = el => {","canonical_solution":"  const [portal, setPortal] = React.useState({\n    render: () => null,\n    remove: () => null,\n  });\n\n  const createPortal = React.useCallback(el => {\n    const Portal = ({ children }) => ReactDOM.createPortal(children, el);\n    const remove = () => ReactDOM.unmountComponentAtNode(el);\n    return { render: Portal, remove };\n  }, []);\n\n  React.useEffect(() => {\n    if (el) portal.remove();\n    const newPortal = createPortal(el);\n    setPortal(newPortal);\n    return () => newPortal.remove(el);\n  }, [el]);\n\n  return portal.render;\n};","entry_point":"usePortal","test":"const App = () => {\n  const Portal = usePortal(document.querySelector('title'));\n\n  return (\n    <p>\n      Hello world!\n      <Portal>Portalized Title</Portal>\n    </p>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('root'));"}
{"task_id":"task/28","prompt":"const Mailto = ({ email, subject = '', body = '', children }) => {","canonical_solution":"  let params = subject || body ? '?' : '';\n  if (subject) params += `subject=${encodeURIComponent(subject)}`;\n  if (body) params += `${subject ? '&' : ''}body=${encodeURIComponent(body)}`;\n\n  return <a href={`mailto:${email}${params}`}>{children}</a>;\n};","entry_point":"Mailto","test":"ReactDOM.render(\n  <Mailto email=\"foo@bar.baz\" subject=\"Hello & Welcome\" body=\"Hello world!\">\n    Mail me!\n  </Mailto>,\n  document.getElementById('root')\n);"}
{"task_id":"task/29","prompt":"const useKeyPress = targetKey => {","canonical_solution":"  const [keyPressed, setKeyPressed] = React.useState(false);\n\n  const downHandler = ({ key }) => {\n    if (key === targetKey) setKeyPressed(true);\n  };\n\n  const upHandler = ({ key }) => {\n    if (key === targetKey) setKeyPressed(false);\n  };\n\n  React.useEffect(() => {\n    window.addEventListener('keydown', downHandler);\n    window.addEventListener('keyup', upHandler);\n\n    return () => {\n      window.removeEventListener('keydown', downHandler);\n      window.removeEventListener('keyup', upHandler);\n    };\n  }, []);\n\n  return keyPressed;\n};","entry_point":"useKeyPress","test":"const MyApp = () => {\n  const wPressed = useKeyPress('w');\n\n  return <p>The \"w\" key is {!wPressed ? 'not ' : ''}pressed!</p>;\n};\n\nReactDOM.render(<MyApp />, document.getElementById('root'));"}
{"task_id":"task/30","prompt":"const CountDown = ({ hours = 0, minutes = 0, seconds = 0 }) => {","canonical_solution":"  const [paused, setPaused] = React.useState(false);\n  const [over, setOver] = React.useState(false);\n  const [[h, m, s], setTime] = React.useState([hours, minutes, seconds]);\n\n  const tick = () => {\n    if (paused || over) return;\n    if (h === 0 && m === 0 && s === 0) setOver(true);\n    else if (m === 0 && s === 0) {\n      setTime([h - 1, 59, 59]);\n    } else if (s == 0) {\n      setTime([h, m - 1, 59]);\n    } else {\n      setTime([h, m, s - 1]);\n    }\n  };\n\n  const reset = () => {\n    setTime([parseInt(hours), parseInt(minutes), parseInt(seconds)]);\n    setPaused(false);\n    setOver(false);\n  };\n\n  React.useEffect(() => {\n    const timerID = setInterval(() => tick(), 1000);\n    return () => clearInterval(timerID);\n  });\n\n  return (\n    <div>\n      <p>{`${h.toString().padStart(2, '0')}:${m\n        .toString()\n        .padStart(2, '0')}:${s.toString().padStart(2, '0')}`}</p>\n      <div>{over ? \"Time's up!\" : ''}</div>\n      <button onClick={() => setPaused(!paused)}>\n        {paused ? 'Resume' : 'Pause'}\n      </button>\n      <button onClick={() => reset()}>Restart</button>\n    </div>\n  );\n};","entry_point":"CountDown","test":"ReactDOM.render(\n  <CountDown hours={1} minutes={45} />,\n  document.getElementById('root')\n);"}
{"task_id":"task/31","prompt":"const Alert = ({ isDefaultShown = false, timeout = 250, type, message }) => {","canonical_solution":"  const [isShown, setIsShown] = React.useState(isDefaultShown);\n  const [isLeaving, setIsLeaving] = React.useState(false);\n\n  let timeoutId = null;\n\n  React.useEffect(() => {\n    setIsShown(true);\n    return () => {\n      clearTimeout(timeoutId);\n    };\n  }, [isDefaultShown, timeout, timeoutId]);\n\n  const closeAlert = () => {\n    setIsLeaving(true);\n    timeoutId = setTimeout(() => {\n      setIsLeaving(false);\n      setIsShown(false);\n    }, timeout);\n  };\n\n  return (\n    isShown && (\n      <div\n        className={`alert ${type} ${isLeaving ? 'leaving' : ''}`}\n        role=\"alert\"\n      >\n        <button className=\"close\" onClick={closeAlert} />\n        {message}\n      </div>\n    )\n  );\n};","entry_point":"Alert","test":"ReactDOM.render(\n  <Alert type=\"info\" message=\"This is info\" />,\n  document.getElementById('root')\n);"}
{"task_id":"task/32","prompt":"const useHash = () => {","canonical_solution":"  const [hash, setHash] = React.useState(() => window.location.hash);\n\n  const hashChangeHandler = React.useCallback(() => {\n    setHash(window.location.hash);\n  }, []);\n\n  React.useEffect(() => {\n    window.addEventListener('hashchange', hashChangeHandler);\n    return () => {\n      window.removeEventListener('hashchange', hashChangeHandler);\n    };\n  }, []);\n\n  const updateHash = React.useCallback(\n    newHash => {\n      if (newHash !== hash) window.location.hash = newHash;\n    },\n    [hash]\n  );\n\n  return [hash, updateHash];\n};","entry_point":"useHash","test":"const MyApp = () => {\n  const [hash, setHash] = useHash();\n\n  React.useEffect(() => {\n    setHash('#list');\n  }, []);\n\n  return (\n    <>\n      <p>window.location.href: {window.location.href}</p>\n      <p>Edit hash: </p>\n      <input value={hash} onChange={e => setHash(e.target.value)} />\n    </>\n  );\n};\n\nReactDOM.render(<MyApp />, document.getElementById('root'));"}
{"task_id":"task/33","prompt":"const useDelayedState = (initialState, condition) => {","canonical_solution":"  const [{ state, loaded }, setState] = React.useState({\n    state: null,\n    loaded: false,\n  });\n\n  React.useEffect(() => {\n    if (!loaded && condition) setState({ state: initialState, loaded: true });\n  }, [condition, loaded]);\n\n  const updateState = newState => {\n    if (!loaded) return;\n    setState({ state: newState, loaded });\n  };\n\n  return [state, updateState];\n};","entry_point":"useDelayedState","test":"const App = () => {\n  const [branches, setBranches] = React.useState([]);\n  const [selectedBranch, setSelectedBranch] = useDelayedState(\n    branches[0],\n    branches.length\n  );\n\n  React.useEffect(() => {\n    const handle = setTimeout(() => {\n      setBranches(['master', 'staging', 'test', 'dev']);\n    }, 2000);\n    return () => {\n      handle && clearTimeout(handle);\n    };\n  }, []);\n\n  return (\n    <div>\n      <p>Selected branch: {selectedBranch}</p>\n      <select onChange={e => setSelectedBranch(e.target.value)}>\n        {branches.map(branch => (\n          <option key={branch} value={branch}>\n            {branch}\n          </option>\n        ))}\n      </select>\n    </div>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('root'));"}
{"task_id":"task/34","prompt":"const useSearchParam = param => {","canonical_solution":"  const getValue = React.useCallback(\n    () => new URLSearchParams(window.location.search).get(param),\n    [param]\n  );\n\n  const [value, setValue] = React.useState(getValue);\n\n  React.useEffect(() => {\n    const onChange = () => {\n      setValue(getValue());\n    };\n\n    window.addEventListener('popstate', onChange);\n    window.addEventListener('pushstate', onChange);\n    window.addEventListener('replacestate', onChange);\n\n    return () => {\n      window.removeEventListener('popstate', onChange);\n      window.removeEventListener('pushstate', onChange);\n      window.removeEventListener('replacestate', onChange);\n    };\n  }, []);\n\n  return value;\n};","entry_point":"useSearchParam","test":"const MyApp = () => {\n  const post = useSearchParam('post');\n\n  return (\n    <>\n      <p>Post param value: {post || 'null'}</p>\n      <button\n        onClick={() =>\n          history.pushState({}, '', location.pathname + '?post=42')\n        }\n      >\n        View post 42\n      </button>\n      <button onClick={() => history.pushState({}, '', location.pathname)}>\n        Exit\n      </button>\n    </>\n  );\n};\n\nReactDOM.render(<MyApp />, document.getElementById('root'));"}
{"task_id":"task/35","prompt":"const useUpdate = () => {","canonical_solution":"  const [, update] = React.useReducer(() => ({}));\n  return update;\n};","entry_point":"useUpdate","test":"const MyApp = () => {\n  const update = useUpdate();\n\n  return (\n    <>\n      <div>Time: {Date.now()}</div>\n      <button onClick={update}>Update</button>\n    </>\n  );\n};\n\nReactDOM.render(<MyApp />, document.getElementById('root'));"}
{"task_id":"task/36","prompt":"const Select = ({ values, onValueChange, selectedValue, ...rest }) => {","canonical_solution":"  return (\n    <select\n      defaultValue={selectedValue}\n      onChange={({ target: { value } }) => onValueChange(value)}\n      {...rest}\n    >\n      {values.map(([value, text]) => (\n        <option key={value} value={value}>\n          {text}\n        </option>\n      ))}\n    </select>\n  );\n};","entry_point":"Select","test":"const choices = [\n  ['grapefruit', 'Grapefruit'],\n  ['lime', 'Lime'],\n  ['coconut', 'Coconut'],\n  ['mango', 'Mango'],\n];\nReactDOM.render(\n  <Select\n    values={choices}\n    selectedValue=\"lime\"\n    onValueChange={val => console.log(val)}\n  />,\n  document.getElementById('root')\n);"}
{"task_id":"task/37","prompt":"const LimitedWordTextarea = ({ rows, cols, value, limit }) => {","canonical_solution":"  const [{ content, wordCount }, setContent] = React.useState({\n    content: value,\n    wordCount: 0\n  });\n\n  const setFormattedContent = React.useCallback(\n    text => {\n      let words = text.split(' ').filter(Boolean);\n      if (words.length > limit) {\n        setContent({\n          content: words.slice(0, limit).join(' '),\n          wordCount: limit\n        });\n      } else {\n        setContent({ content: text, wordCount: words.length });\n      }\n    },\n    [limit, setContent]\n  );\n\n  React.useEffect(() => {\n    setFormattedContent(content);\n  }, []);\n\n  return (\n    <>\n      <textarea\n        rows={rows}\n        cols={cols}\n        onChange={event => setFormattedContent(event.target.value)}\n        value={content}\n      />\n      <p>\n        {wordCount}/{limit}\n      </p>\n    </>\n  );\n};","entry_point":"LimitedWordTextarea","test":"ReactDOM.render(\n  <LimitedWordTextarea limit={5} value=\"Hello there!\" />,\n  document.getElementById('root')\n);"}
{"task_id":"task/38","prompt":"const useOnWindowScroll = callback => {","canonical_solution":"  const listener = React.useRef(null);\n\n  React.useEffect(() => {\n    if (listener.current)\n      window.removeEventListener('scroll', listener.current);\n    listener.current = window.addEventListener('scroll', callback);\n    return () => {\n      window.removeEventListener('scroll', listener.current);\n    };\n  }, [callback]);\n};","entry_point":"useOnWindowScroll","test":"const App = () => {\n  useOnWindowScroll(() => console.log(`scroll Y: ${window.pageYOffset}`));\n  return <p style={{ height: '300vh' }}>Scroll and check the console</p>;\n};\n\nReactDOM.render(<App />, document.getElementById('root'));"}
{"task_id":"task/39","prompt":"const useClickInside = (ref, callback) => {","canonical_solution":"  const handleClick = e => {\n    if (ref.current && ref.current.contains(e.target)) {\n      callback();\n    }\n  };\n  React.useEffect(() => {\n    document.addEventListener('click', handleClick);\n    return () => {\n      document.removeEventListener('click', handleClick);\n    };\n  });\n};","entry_point":"useClickInside","test":"const ClickBox = ({ onClickInside }) => {\n  const clickRef = React.useRef();\n  useClickInside(clickRef, onClickInside);\n  return (\n    <div\n      className=\"click-box\"\n      ref={clickRef}\n      style={{\n        border: '2px dashed orangered',\n        height: 200,\n        width: 400,\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center'\n      }}\n    >\n      <p>Click inside this element</p>\n    </div>\n  );\n};\n\nReactDOM.render(\n  <ClickBox onClickInside={() => alert('click inside')} />,\n  document.getElementById('root')\n);"}
{"task_id":"task/40","prompt":"const isDOMavailable = !!(","canonical_solution":"  typeof window !== 'undefined' &&\n  window.document &&\n  window.document.createElement\n);\n\nconst useSSR = () => {\n  const [inBrowser, setInBrowser] = React.useState(isDOMavailable);\n\n  React.useEffect(() => {\n    setInBrowser(isDOMavailable);\n    return () => {\n      setInBrowser(false);\n    };\n  }, []);\n\n  const useSSRObject = React.useMemo(\n    () => ({\n      isBrowser: inBrowser,\n      isServer: !inBrowser,\n      canUseWorkers: typeof Worker !== 'undefined',\n      canUseEventListeners: inBrowser && !!window.addEventListener,\n      canUseViewport: inBrowser && !!window.screen\n    }),\n    [inBrowser]\n  );\n\n  return React.useMemo(\n    () => Object.assign(Object.values(useSSRObject), useSSRObject),\n    [inBrowser]\n  );\n};","entry_point":"useSSR","test":"const SSRChecker = props => {\n  let { isBrowser, isServer } = useSSR();\n\n  return <p>{isBrowser ? 'Running on browser' : 'Running on server'}</p>;\n};\n\nReactDOM.render(<SSRChecker />, document.getElementById('root'));"}
{"task_id":"task/41","prompt":"const LimitedTextarea = ({ rows, cols, value, limit }) => {","canonical_solution":"  const [content, setContent] = React.useState(value.slice(0, limit));\n\n  const setFormattedContent = React.useCallback(\n    text => {\n      setContent(text.slice(0, limit));\n    },\n    [limit, setContent]\n  );\n\n  return (\n    <>\n      <textarea\n        rows={rows}\n        cols={cols}\n        onChange={event => setFormattedContent(event.target.value)}\n        value={content}\n      />\n      <p>\n        {content.length}/{limit}\n      </p>\n    </>\n  );\n};","entry_point":"LimitedTextarea","test":"ReactDOM.render(\n  <LimitedTextarea limit={32} value=\"Hello!\" />,\n  document.getElementById('root')\n);"}
{"task_id":"task/42","prompt":"const useComponentDidMount = onMountHandler => {","canonical_solution":"  React.useEffect(() => {\n    onMountHandler();\n  }, []);\n};","entry_point":"useComponentDidMount","test":"const Mounter = () => {\n  useComponentDidMount(() => console.log('Component did mount'));\n\n  return <div>Check the console!</div>;\n};\n\nReactDOM.render(<Mounter />, document.getElementById('root'));"}
{"task_id":"task/43","prompt":"const FileDrop = ({ onDrop }) => {","canonical_solution":"  const [drag, setDrag] = React.useState(false);\n  const [filename, setFilename] = React.useState('');\n  let dropRef = React.createRef();\n  let dragCounter = 0;\n\n  const handleDrag = e => {\n    e.preventDefault();\n    e.stopPropagation();\n  };\n\n  const handleDragIn = e => {\n    e.preventDefault();\n    e.stopPropagation();\n    dragCounter++;\n    if (e.dataTransfer.items && e.dataTransfer.items.length > 0) setDrag(true);\n  };\n\n  const handleDragOut = e => {\n    e.preventDefault();\n    e.stopPropagation();\n    dragCounter--;\n    if (dragCounter === 0) setDrag(false);\n  };\n\n  const handleDrop = e => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDrag(false);\n    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n      onDrop(e.dataTransfer.files[0]);\n      setFilename(e.dataTransfer.files[0].name);\n      e.dataTransfer.clearData();\n      dragCounter = 0;\n    }\n  };\n\n  React.useEffect(() => {\n    let div = dropRef.current;\n    div.addEventListener('dragenter', handleDragIn);\n    div.addEventListener('dragleave', handleDragOut);\n    div.addEventListener('dragover', handleDrag);\n    div.addEventListener('drop', handleDrop);\n    return () => {\n      div.removeEventListener('dragenter', handleDragIn);\n      div.removeEventListener('dragleave', handleDragOut);\n      div.removeEventListener('dragover', handleDrag);\n      div.removeEventListener('drop', handleDrop);\n    };\n  });\n\n  return (\n    <div\n      ref={dropRef}\n      className={\n        drag ? 'filedrop drag' : filename ? 'filedrop ready' : 'filedrop'\n      }\n    >\n      {filename && !drag ? <div>{filename}</div> : <div>Drop a file here!</div>}\n    </div>\n  );\n};","entry_point":"FileDrop","test":"ReactDOM.render(\n  <FileDrop onDrop={console.log} />,\n  document.getElementById('root')\n);"}
{"task_id":"task/44","prompt":"const TreeView = ({","canonical_solution":"  data,\n  toggled = true,\n  name = null,\n  isLast = true,\n  isChildElement = false,\n  isParentToggled = true\n}) => {\n  const [isToggled, setIsToggled] = React.useState(toggled);\n  const isDataArray = Array.isArray(data);\n\n  return (\n    <div\n      className={`tree-element ${isParentToggled && 'collapsed'} ${\n        isChildElement && 'is-child'\n      }`}\n    >\n      <span\n        className={isToggled ? 'toggler' : 'toggler closed'}\n        onClick={() => setIsToggled(!isToggled)}\n      />\n      {name ? <strong>&nbsp;&nbsp;{name}: </strong> : <span>&nbsp;&nbsp;</span>}\n      {isDataArray ? '[' : '{'}\n      {!isToggled && '...'}\n      {Object.keys(data).map((v, i, a) =>\n        typeof data[v] === 'object' ? (\n          <TreeView\n            key={`${name}-${v}-${i}`}\n            data={data[v]}\n            isLast={i === a.length - 1}\n            name={isDataArray ? null : v}\n            isChildElement\n            isParentToggled={isParentToggled && isToggled}\n          />\n        ) : (\n          <p\n            key={`${name}-${v}-${i}`}\n            className={isToggled ? 'tree-element' : 'tree-element collapsed'}\n          >\n            {isDataArray ? '' : <strong>{v}: </strong>}\n            {data[v]}\n            {i === a.length - 1 ? '' : ','}\n          </p>\n        )\n      )}\n      {isDataArray ? ']' : '}'}\n      {!isLast ? ',' : ''}\n    </div>\n  );\n};","entry_point":"TreeView","test":"const data = {\n  lorem: {\n    ipsum: 'dolor sit',\n    amet: {\n      consectetur: 'adipiscing',\n      elit: [\n        'duis',\n        'vitae',\n        {\n          semper: 'orci'\n        },\n        {\n          est: 'sed ornare'\n        },\n        'etiam',\n        ['laoreet', 'tincidunt'],\n        ['vestibulum', 'ante']\n      ]\n    },\n    ipsum: 'primis'\n  }\n};\nReactDOM.render(\n  <TreeView data={data} name=\"data\" />,\n  document.getElementById('root')\n);"}
{"task_id":"task/45","prompt":"const usePersistedState = (name, defaultValue) => {","canonical_solution":"  const [value, setValue] = React.useState(defaultValue);\n  const nameRef = React.useRef(name);\n\n  React.useEffect(() => {\n    try {\n      const storedValue = localStorage.getItem(name);\n      if (storedValue !== null) setValue(storedValue);\n      else localStorage.setItem(name, defaultValue);\n    } catch {\n      setValue(defaultValue);\n    }\n  }, []);\n\n  React.useEffect(() => {\n    try {\n      localStorage.setItem(nameRef.current, value);\n    } catch {}\n  }, [value]);\n\n  React.useEffect(() => {\n    const lastName = nameRef.current;\n    if (name !== lastName) {\n      try {\n        localStorage.setItem(name, value);\n        nameRef.current = name;\n        localStorage.removeItem(lastName);\n      } catch {}\n    }\n  }, [name]);\n\n  return [value, setValue];\n};","entry_point":"usePersistedState","test":"const MyComponent = ({ name }) => {\n  const [val, setVal] = usePersistedState(name, 10);\n  return (\n    <input\n      value={val}\n      onChange={e => {\n        setVal(e.target.value);\n      }}\n    />\n  );\n};\n\nconst MyApp = () => {\n  const [name, setName] = React.useState('my-value');\n  return (\n    <>\n      <MyComponent name={name} />\n      <input\n        value={name}\n        onChange={e => {\n          setName(e.target.value);\n        }}\n      />\n    </>\n  );\n};\n\nReactDOM.render(<MyApp />, document.getElementById('root'));"}
{"task_id":"task/46","prompt":"const useWindowSize = () => {","canonical_solution":"  const [windowSize, setWindowSize] = React.useState({\n    width: undefined,\n    height: undefined,\n  });\n\n  React.useEffect(() => {\n    const handleResize = () =>\n      setWindowSize({ width: window.innerWidth, height: window.innerHeight });\n\n    window.addEventListener('resize', handleResize);\n\n    handleResize();\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  return windowSize;\n};","entry_point":"useWindowSize","test":"const MyApp = () => {\n  const { width, height } = useWindowSize();\n\n  return (\n    <p>\n      Window size: ({width} x {height})\n    </p>\n  );\n};\n\nReactDOM.render(<MyApp />, document.getElementById('root'));"}
{"task_id":"task/47","prompt":"const ControlledInput = ({ value, onValueChange, ...rest }) => {","canonical_solution":"  return (\n    <input\n      value={value}\n      onChange={({ target: { value } }) => onValueChange(value)}\n      {...rest}\n    />\n  );\n};","entry_point":"ControlledInput","test":"const Form = () => {\n  const [value, setValue] = React.useState('');\n\n  return (\n    <ControlledInput\n      type=\"text\"\n      placeholder=\"Insert some text here...\"\n      value={value}\n      onValueChange={setValue}\n    />\n  );\n};\n\nReactDOM.render(<Form />, document.getElementById('root'));"}
{"task_id":"task/48","prompt":"const DataTable = ({ data }) => {","canonical_solution":"  return (\n    <table>\n      <thead>\n        <tr>\n          <th>ID</th>\n          <th>Value</th>\n        </tr>\n      </thead>\n      <tbody>\n        {data.map((val, i) => (\n          <tr key={`${i}_${val}`}>\n            <td>{i}</td>\n            <td>{val}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};","entry_point":"DataTable","test":"const people = ['John', 'Jesse'];\nReactDOM.render(<DataTable data={people} />, document.getElementById('root'));"}
{"task_id":"task/49","prompt":"const useComponentWillUnmount = onUnmountHandler => {","canonical_solution":"  React.useEffect(\n    () => () => {\n      onUnmountHandler();\n    },\n    []\n  );\n};","entry_point":"useComponentWillUnmount","test":"const Unmounter = () => {\n  useComponentWillUnmount(() => console.log('Component will unmount'));\n\n  return <div>Check the console!</div>;\n};\n\nReactDOM.render(<Unmounter />, document.getElementById('root'));"}
{"task_id":"task/50","prompt":"const TabItem = props => <div {...props} />;\n\nconst Tabs = ({ defaultIndex = 0, onTabClick, children }) => {","canonical_solution":"  const [bindIndex, setBindIndex] = React.useState(defaultIndex);\n  const changeTab = newIndex => {\n    if (typeof onTabClick === 'function') onTabClick(newIndex);\n    setBindIndex(newIndex);\n  };\n  const items = children.filter(item => item.type.name === 'TabItem');\n\n  return (\n    <div className=\"wrapper\">\n      <div className=\"tab-menu\">\n        {items.map(({ props: { index, label } }) => (\n          <button\n            key={`tab-btn-${index}`}\n            onClick={() => changeTab(index)}\n            className={bindIndex === index ? 'focus' : ''}\n          >\n            {label}\n          </button>\n        ))}\n      </div>\n      <div className=\"tab-view\">\n        {items.map(({ props }) => (\n          <div\n            {...props}\n            className={`tab-content ${\n              bindIndex === props.index ? 'selected' : ''\n            }`}\n            key={`tab-content-${props.index}`}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};","entry_point":"Tabs","test":"ReactDOM.render(\n  <Tabs defaultIndex=\"1\" onTabClick={console.log}>\n    <TabItem label=\"A\" index=\"1\">\n      Lorem ipsum\n    </TabItem>\n    <TabItem label=\"B\" index=\"2\">\n      Dolor sit amet\n    </TabItem>\n  </Tabs>,\n  document.getElementById('root')\n);"}
{"task_id":"task/51","prompt":"const getOnLineStatus = () =>","canonical_solution":"  typeof navigator !== 'undefined' && typeof navigator.onLine === 'boolean'\n    ? navigator.onLine\n    : true;\n\nconst useNavigatorOnLine = () => {\n  const [status, setStatus] = React.useState(getOnLineStatus());\n\n  const setOnline = () => setStatus(true);\n  const setOffline = () => setStatus(false);\n\n  React.useEffect(() => {\n    window.addEventListener('online', setOnline);\n    window.addEventListener('offline', setOffline);\n\n    return () => {\n      window.removeEventListener('online', setOnline);\n      window.removeEventListener('offline', setOffline);\n    };\n  }, []);\n\n  return status;\n};","entry_point":"useNavigatorOnLine","test":"const StatusIndicator = () => {\n  const isOnline = useNavigatorOnLine();\n\n  return <span>You are {isOnline ? 'online' : 'offline'}.</span>;\n};\n\nReactDOM.render(<StatusIndicator />, document.getElementById('root'));"}
{"task_id":"task/52","prompt":"const PasswordRevealer = ({ value }) => {","canonical_solution":"  const [shown, setShown] = React.useState(false);\n  return (\n    <>\n      <input type={shown ? 'text' : 'password'} value={value} />\n      <button onClick={() => setShown(!shown)}>Show/Hide</button>\n    </>\n  );\n};","entry_point":"PasswordRevealer","test":"ReactDOM.render(<PasswordRevealer />, document.getElementById('root'));"}
{"task_id":"task/53","prompt":"const Star = ({ marked, starId }) => {","canonical_solution":"  return (\n    <span data-star-id={starId} className=\"star\" role=\"button\">\n      {marked ? '\\u2605' : '\\u2606'}\n    </span>\n  );\n};\n\nconst StarRating = ({ value }) => {\n  const [rating, setRating] = React.useState(parseInt(value) || 0);\n  const [selection, setSelection] = React.useState(0);\n\n  const hoverOver = event => {\n    let val = 0;\n    if (event && event.target && event.target.getAttribute('data-star-id'))\n      val = event.target.getAttribute('data-star-id');\n    setSelection(val);\n  };\n  return (\n    <div\n      onMouseOut={() => hoverOver(null)}\n      onClick={e => setRating(e.target.getAttribute('data-star-id') || rating)}\n      onMouseOver={hoverOver}\n    >\n      {Array.from({ length: 5 }, (v, i) => (\n        <Star\n          starId={i + 1}\n          key={`star_${i + 1}`}\n          marked={selection ? selection >= i + 1 : rating >= i + 1}\n        />\n      ))}\n    </div>\n  );\n};","entry_point":"StarRating","test":"ReactDOM.render(<StarRating value={2} />, document.getElementById('root'));"}
{"task_id":"task/54","prompt":"const useComponentDidUpdate = (callback, condition) => {","canonical_solution":"  const mounted = React.useRef(false);\n  React.useEffect(() => {\n    if (mounted.current) callback();\n    else mounted.current = true;\n  }, condition);\n};","entry_point":"useComponentDidUpdate","test":"const App = () => {\n  const [value, setValue] = React.useState(0);\n  const [otherValue, setOtherValue] = React.useState(1);\n\n  useComponentDidUpdate(() => {\n    console.log(`Current value is ${value}.`);\n  }, [value]);\n\n  return (\n    <>\n      <p>\n        Value: {value}, other value: {otherValue}\n      </p>\n      <button onClick={() => setValue(value + 1)}>Increment value</button>\n      <button onClick={() => setOtherValue(otherValue + 1)}>\n        Increment other value\n      </button>\n    </>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('root'));"}
{"task_id":"task/55","prompt":"const Toggle = ({ defaultToggled = false }) => {","canonical_solution":"  const [isToggleOn, setIsToggleOn] = React.useState(defaultToggled);\n\n  return (\n    <label className={isToggleOn ? 'toggle on' : 'toggle off'}>\n      <input\n        type=\"checkbox\"\n        checked={isToggleOn}\n        onChange={() => setIsToggleOn(!isToggleOn)}\n      />\n      {isToggleOn ? 'ON' : 'OFF'}\n    </label>\n  );\n};","entry_point":"Toggle","test":"ReactDOM.render(<Toggle />, document.getElementById('root'));"}
{"task_id":"task/56","prompt":"const MappedTable = ({ data, propertyNames }) => {","canonical_solution":"  let filteredData = data.map(v =>\n    Object.keys(v)\n      .filter(k => propertyNames.includes(k))\n      .reduce((acc, key) => ((acc[key] = v[key]), acc), {})\n  );\n  return (\n    <table>\n      <thead>\n        <tr>\n          {propertyNames.map(val => (\n            <th key={`h_${val}`}>{val}</th>\n          ))}\n        </tr>\n      </thead>\n      <tbody>\n        {filteredData.map((val, i) => (\n          <tr key={`i_${i}`}>\n            {propertyNames.map(p => (\n              <td key={`i_${i}_${p}`}>{val[p]}</td>\n            ))}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};","entry_point":"MappedTable","test":"const people = [\n  { name: 'John', surname: 'Smith', age: 42 },\n  { name: 'Adam', surname: 'Smith', gender: 'male' }\n];\nconst propertyNames = ['name', 'surname', 'age'];\nReactDOM.render(\n  <MappedTable data={people} propertyNames={propertyNames} />,\n  document.getElementById('root')\n);"}
{"task_id":"task/57","prompt":"const useEventListener = (type, handler, el = window) => {","canonical_solution":"  const savedHandler = React.useRef();\n\n  React.useEffect(() => {\n    savedHandler.current = handler;\n  }, [handler]);\n\n  React.useEffect(() => {\n    const listener = e => savedHandler.current(e);\n\n    el.addEventListener(type, listener);\n\n    return () => {\n      el.removeEventListener(type, listener);\n    };\n  }, [type, el]);\n};","entry_point":"useEventListener","test":"const MyApp = () => {\n  const [coords, setCoords] = React.useState({ x: 0, y: 0 });\n\n  const updateCoords = React.useCallback(\n    ({ clientX, clientY }) => {\n      setCoords({ x: clientX, y: clientY });\n    },\n    [setCoords]\n  );\n\n  useEventListener('mousemove', updateCoords);\n\n  return (\n    <p>Mouse coordinates: {coords.x}, {coords.y}</p>\n  );\n};\n\nReactDOM.render(<MyApp />, document.getElementById('root'));"}
{"task_id":"task/58","prompt":"const Callto = ({ phone, children }) => {","canonical_solution":"  return <a href={`tel:${phone}`}>{children}</a>;\n};","entry_point":"Callto","test":"ReactDOM.render(\n  <Callto phone=\"+302101234567\">Call me!</Callto>,\n  document.getElementById('root')\n);"}
{"task_id":"task/59","prompt":"const useOnWindowResize = callback => {","canonical_solution":"  const listener = React.useRef(null);\n\n  React.useEffect(() => {\n    if (listener.current)\n      window.removeEventListener('resize', listener.current);\n    listener.current = window.addEventListener('resize', callback);\n    return () => {\n      window.removeEventListener('resize', listener.current);\n    };\n  }, [callback]);\n};","entry_point":"useOnWindowResize","test":"const App = () => {\n  useOnWindowResize(() =>\n    console.log(`window size: (${window.innerWidth}, ${window.innerHeight})`)\n  );\n  return <p>Resize the window and check the console</p>;\n};\n\nReactDOM.render(<App />, document.getElementById('root'));"}
{"task_id":"task/60","prompt":"const UncontrolledInput = ({ defaultValue, onValueChange, ...rest }) => {","canonical_solution":"  return (\n    <input\n      defaultValue={defaultValue}\n      onChange={({ target: { value } }) => onValueChange(value)}\n      {...rest}\n    />\n  );\n};","entry_point":"UncontrolledInput","test":"ReactDOM.render(\n  <UncontrolledInput\n    type=\"text\"\n    placeholder=\"Insert some text here...\"\n    onValueChange={console.log}\n  />,\n  document.getElementById('root')\n);"}
{"task_id":"task/61","prompt":"const TextArea = ({","canonical_solution":"  cols = 20,\n  rows = 2,\n  defaultValue,\n  onValueChange,\n  ...rest\n}) => {\n  return (\n    <textarea\n      cols={cols}\n      rows={rows}\n      defaultValue={defaultValue}\n      onChange={({ target: { value } }) => onValueChange(value)}\n      {...rest}\n    />\n  );\n};","entry_point":"TextArea","test":"ReactDOM.render(\n  <TextArea\n    placeholder=\"Insert some text here...\"\n    onValueChange={val => console.log(val)}\n  />,\n  document.getElementById('root')\n);"}
{"task_id":"task/62","prompt":"const useScript = src => {","canonical_solution":"  const [status, setStatus] = React.useState(src ? 'loading' : 'idle');\n\n  React.useEffect(() => {\n    if (!src) {\n      setStatus('idle');\n      return;\n    }\n\n    let script = document.querySelector(`script[src=\"${src}\"]`);\n\n    if (!script) {\n      script = document.createElement('script');\n      script.src = src;\n      script.async = true;\n      script.setAttribute('data-status', 'loading');\n      document.body.appendChild(script);\n\n      const setDataStatus = event => {\n        script.setAttribute(\n          'data-status',\n          event.type === 'load' ? 'ready' : 'error'\n        );\n      };\n      script.addEventListener('load', setDataStatus);\n      script.addEventListener('error', setDataStatus);\n    } else {\n      setStatus(script.getAttribute('data-status'));\n    }\n\n    const setStateStatus = event => {\n      setStatus(event.type === 'load' ? 'ready' : 'error');\n    };\n\n    script.addEventListener('load', setStateStatus);\n    script.addEventListener('error', setStateStatus);\n\n    return () => {\n      if (script) {\n        script.removeEventListener('load', setStateStatus);\n        script.removeEventListener('error', setStateStatus);\n      }\n    };\n  }, [src]);\n\n  return status;\n};","entry_point":"useScript","test":"const script =\n  'data:text/plain;charset=utf-8;base64,KGZ1bmN0aW9uKCl7IGNvbnNvbGUubG9nKCdIZWxsbycpIH0pKCk7';\n\nconst Child = () => {\n  const status = useScript(script);\n  return <p>Child status: {status}</p>;\n};\n\nconst MyApp = () => {\n  const status = useScript(script);\n  return (\n    <>\n      <p>Parent status: {status}</p>\n      <Child />\n    </>\n  );\n};\n\nReactDOM.render(<MyApp />, document.getElementById('root'));"}
{"task_id":"task/63","prompt":"const useRequestAnimationFrame = callback => {","canonical_solution":"  const requestRef = React.useRef();\n  const previousTimeRef = React.useRef();\n\n  const animate = time => {\n    if (previousTimeRef.current) callback(time - previousTimeRef.current);\n    previousTimeRef.current = time;\n    requestRef.current = requestAnimationFrame(animate);\n  };\n\n  React.useEffect(() => {\n    requestRef.current = requestAnimationFrame(animate);\n    return () => cancelAnimationFrame(requestRef.current);\n  }, []);\n};","entry_point":"useRequestAnimationFrame","test":"const Counter = () => {\n  const [count, setCount] = React.useState(0);\n\n  useRequestAnimationFrame(deltaTime => {\n    setCount(prevCount => (prevCount + deltaTime * 0.01) % 100);\n  });\n\n  return <p>{Math.round(count)}</p>;\n};\n\nReactDOM.render(<Counter />, document.getElementById('root'));"}
{"task_id":"task/64","prompt":"const useSet = initialValue => {","canonical_solution":"  const [set, setSet] = React.useState(new Set(initialValue));\n\n  const actions = React.useMemo(\n    () => ({\n      add: item => setSet(prevSet => new Set([...prevSet, item])),\n      remove: item =>\n        setSet(prevSet => new Set([...prevSet].filter(i => i !== item))),\n      clear: () => setSet(new Set()),\n    }),\n    [setSet]\n  );\n\n  return [set, actions];\n};","entry_point":"useSet","test":"const MyApp = () => {\n  const [set, { add, remove, clear }] = useSet(new Set(['apples']));\n\n  return (\n    <div>\n      <button onClick={() => add(String(Date.now()))}>Add</button>\n      <button onClick={() => clear()}>Reset</button>\n      <button onClick={() => remove('apples')} disabled={!set.has('apples')}>\n        Remove apples\n      </button>\n      <pre>{JSON.stringify([...set], null, 2)}</pre>\n    </div>\n  );\n};\n\nReactDOM.render(<MyApp />, document.getElementById('root'));"}
{"task_id":"task/65","prompt":"const useLocalStorage = (keyName, defaultValue) => {","canonical_solution":"  const [storedValue, setStoredValue] = React.useState(() => {\n    try {\n      const value = window.localStorage.getItem(keyName);\n\n      if (value) {\n        return JSON.parse(value);\n      } else {\n        window.localStorage.setItem(keyName, JSON.stringify(defaultValue));\n        return defaultValue;\n      }\n    } catch (err) {\n      return defaultValue;\n    }\n  });\n\n  const setValue = newValue => {\n    try {\n      window.localStorage.setItem(keyName, JSON.stringify(newValue));\n    } catch (err) {}\n    setStoredValue(newValue);\n  };\n\n  return [storedValue, setValue];\n};","entry_point":"useLocalStorage","test":"const MyApp = () => {\n  const [name, setName] = useLocalStorage('name', 'John');\n\n  return <input value={name} onChange={e => setName(e.target.value)} />;\n};\n\nReactDOM.render(<MyApp />, document.getElementById('root'));"}
{"task_id":"task/66","prompt":"const Collapse = ({ collapsed, children }) => {","canonical_solution":"  const [isCollapsed, setIsCollapsed] = React.useState(collapsed);\n\n  return (\n    <>\n      <button\n        className=\"collapse-button\"\n        onClick={() => setIsCollapsed(!isCollapsed)}\n      >\n        {isCollapsed ? 'Show' : 'Hide'} content\n      </button>\n      <div\n        className={`collapse-content ${isCollapsed ? 'collapsed' : 'expanded'}`}\n        aria-expanded={isCollapsed}\n      >\n        {children}\n      </div>\n    </>\n  );\n};","entry_point":"Collapse","test":"ReactDOM.render(\n  <Collapse>\n    <h1>This is a collapse</h1>\n    <p>Hello world!</p>\n  </Collapse>,\n  document.getElementById('root')\n);"}
{"task_id":"task/67","prompt":"const RippleButton = ({ children, onClick }) => {","canonical_solution":"  const [coords, setCoords] = React.useState({ x: -1, y: -1 });\n  const [isRippling, setIsRippling] = React.useState(false);\n\n  React.useEffect(() => {\n    if (coords.x !== -1 && coords.y !== -1) {\n      setIsRippling(true);\n      setTimeout(() => setIsRippling(false), 300);\n    } else setIsRippling(false);\n  }, [coords]);\n\n  React.useEffect(() => {\n    if (!isRippling) setCoords({ x: -1, y: -1 });\n  }, [isRippling]);\n\n  return (\n    <button\n      className=\"ripple-button\"\n      onClick={e => {\n        const rect = e.target.getBoundingClientRect();\n        setCoords({ x: e.clientX - rect.left, y: e.clientY - rect.top });\n        onClick && onClick(e);\n      }}\n    >\n      {isRippling ? (\n        <span\n          className=\"ripple\"\n          style={{\n            left: coords.x,\n            top: coords.y\n          }}\n        />\n      ) : (\n        ''\n      )}\n      <span className=\"content\">{children}</span>\n    </button>\n  );\n};","entry_point":"RippleButton","test":"ReactDOM.render(\n  <RippleButton onClick={e => console.log(e)}>Click me</RippleButton>,\n  document.getElementById('root')\n);"}
{"task_id":"task/68","prompt":"const useMutationObserver = (","canonical_solution":"  ref,\n  callback,\n  options = {\n    attributes: true,\n    characterData: true,\n    childList: true,\n    subtree: true,\n  }\n) => {\n  React.useEffect(() => {\n    if (ref.current) {\n      const observer = new MutationObserver(callback);\n      observer.observe(ref.current, options);\n      return () => observer.disconnect();\n    }\n  }, [callback, options]);\n};","entry_point":"useMutationObserver","test":"const App = () => {\n  const mutationRef = React.useRef();\n  const [mutationCount, setMutationCount] = React.useState(0);\n  const incrementMutationCount = () => {\n    return setMutationCount(mutationCount + 1);\n  };\n  useMutationObserver(mutationRef, incrementMutationCount);\n  const [content, setContent] = React.useState('Hello world');\n\n  return (\n    <>\n      <label for=\"content-input\">Edit this to update the text:</label>\n      <textarea\n        id=\"content-input\"\n        style={{ width: '100%' }}\n        value={content}\n        onChange={e => setContent(e.target.value)}\n      />\n      <div\n        style={{ width: '100%' }}\n        ref={mutationRef}\n      >\n        <div\n          style={{\n            resize: 'both',\n            overflow: 'auto',\n            maxWidth: '100%',\n            border: '1px solid black',\n          }}\n        >\n          <h2>Resize or change the content:</h2>\n          <p>{content}</p>\n        </div>\n      </div>\n      <div>\n        <h3>Mutation count {mutationCount}</h3>\n      </div>\n    </>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('root'));"}
{"task_id":"task/69","prompt":"const Tooltip = ({ children, text, ...rest }) => {","canonical_solution":"  const [show, setShow] = React.useState(false);\n\n  return (\n    <div className=\"tooltip-container\">\n      <div className={show ? 'tooltip-box visible' : 'tooltip-box'}>\n        {text}\n        <span className=\"tooltip-arrow\" />\n      </div>\n      <div\n        onMouseEnter={() => setShow(true)}\n        onMouseLeave={() => setShow(false)}\n        {...rest}\n      >\n        {children}\n      </div>\n    </div>\n  );\n};","entry_point":"Tooltip","test":"ReactDOM.render(\n  <Tooltip text=\"Simple tooltip\">\n    <button>Hover me!</button>\n  </Tooltip>,\n  document.getElementById('root')\n);"}
{"task_id":"task/70","prompt":"const useTimeout = (callback, delay) => {","canonical_solution":"  const savedCallback = React.useRef();\n\n  React.useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  React.useEffect(() => {\n    const tick = () => {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setTimeout(tick, delay);\n      return () => clearTimeout(id);\n    }\n  }, [delay]);\n};","entry_point":"useTimeout","test":"const OneSecondTimer = props => {\n  const [seconds, setSeconds] = React.useState(0);\n  useTimeout(() => {\n    setSeconds(seconds + 1);\n  }, 1000);\n\n  return <p>{seconds}</p>;\n};\n\nReactDOM.render(<OneSecondTimer />, document.getElementById('root'));"}
{"task_id":"task/71","prompt":"const useError = err => {","canonical_solution":"  const [error, setError] = React.useState(err);\n\n  React.useEffect(() => {\n    if (error) throw error;\n  }, [error]);\n\n  const dispatchError = React.useCallback(err => {\n    setError(err);\n  }, []);\n\n  return dispatchError;\n};","entry_point":"useError","test":"Rconst ErrorButton = () => {\n  const dispatchError = useError();\n\n  const clickHandler = () => {\n    dispatchError(new Error('Error!'));\n  };\n\n  return <button onClick={clickHandler}>Throw error</button>;\n};\n\nReactDOM.render(<ErrorButton />, document.getElementById('root'));"}
{"task_id":"task/72","prompt":"const useCopyToClipboard = text => {","canonical_solution":"  const copyToClipboard = str => {\n    const el = document.createElement('textarea');\n    el.value = str;\n    el.setAttribute('readonly', '');\n    el.style.position = 'absolute';\n    el.style.left = '-9999px';\n    document.body.appendChild(el);\n    const selected =\n      document.getSelection().rangeCount > 0\n        ? document.getSelection().getRangeAt(0)\n        : false;\n    el.select();\n    const success = document.execCommand('copy');\n    document.body.removeChild(el);\n    if (selected) {\n      document.getSelection().removeAllRanges();\n      document.getSelection().addRange(selected);\n    }\n    return success;\n  };\n\n  const [copied, setCopied] = React.useState(false);\n\n  const copy = React.useCallback(() => {\n    if (!copied) setCopied(copyToClipboard(text));\n  }, [text]);\n  React.useEffect(() => () => setCopied(false), [text]);\n\n  return [copied, copy];\n};","entry_point":"useCopyToClipboard","test":"const TextCopy = props => {\n  const [copied, copy] = useCopyToClipboard('Lorem ipsum');\n  return (\n    <div>\n      <button onClick={copy}>Click to copy</button>\n      <span>{copied && 'Copied!'}</span>\n    </div>\n  );\n};\n\nReactDOM.render(<TextCopy />, document.getElementById('root'));"}
{"task_id":"task/73","prompt":"const useMap = initialValue => {","canonical_solution":"  const [map, setMap] = React.useState(new Map(initialValue));\n\n  const actions = React.useMemo(\n    () => ({\n      set: (key, value) =>\n        setMap(prevMap => {\n          const nextMap = new Map(prevMap);\n          nextMap.set(key, value);\n          return nextMap;\n        }),\n      remove: (key, value) =>\n        setMap(prevMap => {\n          const nextMap = new Map(prevMap);\n          nextMap.delete(key, value);\n          return nextMap;\n        }),\n      clear: () => setMap(new Map()),\n    }),\n    [setMap]\n  );\n\n  return [map, actions];\n};","entry_point":"useMap","test":"const MyApp = () => {\n  const [map, { set, remove, clear }] = useMap([['apples', 10]]);\n\n  return (\n    <div>\n      <button onClick={() => set(Date.now(), new Date().toJSON())}>Add</button>\n      <button onClick={() => clear()}>Reset</button>\n      <button onClick={() => remove('apples')} disabled={!map.has('apples')}>\n        Remove apples\n      </button>\n      <pre>\n        {JSON.stringify(\n          [...map.entries()].reduce(\n            (acc, [key, value]) => ({ ...acc, [key]: value }),\n            {}\n          ),\n          null,\n          2\n        )}\n      </pre>\n    </div>\n  );\n};\n\nReactDOM.render(<MyApp />, document.getElementById('root'));"}
{"task_id":"task/74","prompt":"const AutoLink = ({ text }) => {","canonical_solution":"  const delimiter = /((?:https?:\\/\\/)?(?:(?:[a-z0-9]?(?:[a-z0-9\\-]{1,61}[a-z0-9])?\\.[^\\.|\\s])+[a-z\\.]*[a-z]+|(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3})(?::\\d{1,5})*[a-z0-9.,_\\/~#&=;%+?\\-\\\\(\\\\)]*)/gi;\n\n  return (\n    <>\n      {text.split(delimiter).map(word => {\n        const match = word.match(delimiter);\n        if (match) {\n          const url = match[0];\n          return (\n            <a href={url.startsWith('http') ? url : `http://${url}`}>{url}</a>\n          );\n        }\n        return word;\n      })}\n    </>\n  );\n};","entry_point":"AutoLink","test":"ReactDOM.render(\n  <AutoLink text=\"foo bar baz http://example.org bar\" />,\n  document.getElementById('root')\n);"}
{"task_id":"task/75","prompt":"const useDebounce = (value, delay) => {","canonical_solution":"  const [debouncedValue, setDebouncedValue] = React.useState(value);\n\n  React.useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value]);\n\n  return debouncedValue;\n};","entry_point":"useDebounce","test":"const Counter = () => {\n  const [value, setValue] = React.useState(0);\n  const lastValue = useDebounce(value, 500);\n\n  return (\n    <div>\n      <p>\n        Current: {value} - Debounced: {lastValue}\n      </p>\n      <button onClick={() => setValue(value + 1)}>Increment</button>\n    </div>\n  );\n};\n\nReactDOM.render(<Counter />, document.getElementById('root'));"}
{"task_id":"task/76","prompt":"const useFetch = (url, options) => {","canonical_solution":"  const [response, setResponse] = React.useState(null);\n  const [error, setError] = React.useState(null);\n\n  React.useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const res = await fetch(url, options);\n        const json = await res.json();\n        setResponse(json);\n      } catch (error) {\n        setError(error);\n      }\n    };\n    fetchData();\n  }, []);\n\n  return { response, error };\n};","entry_point":"useFetch","test":"const ImageFetch = props => {\n  const res = useFetch('https://dog.ceo/api/breeds/image/random', {});\n  if (!res.response) {\n    return <div>Loading...</div>;\n  }\n  const imageUrl = res.response.message;\n  return (\n    <div>\n      <img src={imageUrl} alt=\"avatar\" width={400} height=\"auto\" />\n    </div>\n  );\n};\n\nReactDOM.render(<ImageFetch />, document.getElementById('root'));"}
{"task_id":"task/77","prompt":"const useOnGlobalEvent = (type, callback, options) => {","canonical_solution":"  const listener = React.useRef(null);\n  const previousProps = React.useRef({ type, options });\n\n  React.useEffect(() => {\n    const { type: previousType, options: previousOptions } = previousProps;\n\n    if (listener.current) {\n      window.removeEventListener(\n        previousType,\n        listener.current,\n        previousOptions\n      );\n    }\n\n    listener.current = window.addEventListener(type, callback, options);\n    previousProps.current = { type, options };\n\n    return () => {\n      window.removeEventListener(type, listener.current, options);\n    };\n  }, [callback, type, options]);\n};","entry_point":"useOnGlobalEvent","test":"const App = () => {\n  useOnGlobalEvent('mousemove', e => {\n    console.log(`(${e.x}, ${e.y})`);\n  });\n\n  return <p>Move your mouse around</p>;\n};\n\nReactDOM.render(<App />, document.getElementById('root'));"}
