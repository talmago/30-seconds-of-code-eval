{"task_id":"task/1","prompt":"function head($items)\n{","canonical_solution":"  return reset($items);\n}","entry_point":"head","test":"head([1, 2, 3]); // 1"}
{"task_id":"task/2","prompt":"function median($numbers)\n{","canonical_solution":"  sort($numbers);\n  $totalNumbers = count($numbers);\n  $mid = floor($totalNumbers / 2);\n\n  return ($totalNumbers % 2) === 0 ? ($numbers[$mid - 1] + $numbers[$mid]) / 2 : $numbers[$mid];\n}","entry_point":"median","test":"median([1, 3, 3, 6, 7, 8, 9]); // 6\nmedian([1, 2, 3, 6, 7, 9]); // 4.5"}
{"task_id":"task/3","prompt":"function take($items, $n = 1)\n{","canonical_solution":"  return array_slice($items, 0, $n);\n}","entry_point":"take","test":"take([1, 2, 3], 5); // [1, 2, 3]\ntake([1, 2, 3, 4, 5], 2); // [1, 2]"}
{"task_id":"task/4","prompt":"function last($items)\n{","canonical_solution":"  return end($items);\n}","entry_point":"last","test":"last([1, 2, 3]); // 3"}
{"task_id":"task/5","prompt":"function isContains($string, $needle)\n{","canonical_solution":"  return strpos($string, $needle) === false ? false : true;\n}","entry_point":"isContains","test":"isContains('This is an example string', 'example'); // true\nisContains('This is an example string', 'hello'); // false"}
{"task_id":"task/6","prompt":"function curry($function)\n{","canonical_solution":"  $accumulator = function ($arguments) use ($function, &$accumulator) {\n    return function (...$args) use ($function, $arguments, $accumulator) {\n      $arguments = array_merge($arguments, $args);\n      $reflection = new ReflectionFunction($function);\n      $totalArguments = $reflection->getNumberOfRequiredParameters();\n\n      if ($totalArguments <= count($arguments)) {\n        return $function(...$arguments);\n      }\n\n      return $accumulator($arguments);\n    };\n  };\n\n  return $accumulator([]);\n}","entry_point":"curry","test":"$curriedAdd = curry(\n  function ($a, $b) {\n    return $a + $b;\n  }\n);\n\n$add10 = $curriedAdd(10);\nvar_dump($add10(15)); // 25"}
{"task_id":"task/7","prompt":"function isAnagram($string1, $string2)\n{","canonical_solution":"  return count_chars($string1, 1) === count_chars($string2, 1);\n}","entry_point":"isAnagram","test":"isAnagram('act', 'cat'); // true"}
{"task_id":"task/8","prompt":"function hasDuplicates($items)\n{","canonical_solution":"  return count($items) > count(array_unique($items));\n}","entry_point":"hasDuplicates","test":"hasDuplicates([1, 2, 3, 4, 5, 5]); // true"}
{"task_id":"task/9","prompt":"function factorial($n)\n{","canonical_solution":"  if ($n <= 1) {\n    return 1;\n  }\n\n  return $n * factorial($n - 1);\n}","entry_point":"factorial","test":"factorial(6); // 720"}
{"task_id":"task/10","prompt":"function once($function)\n{","canonical_solution":"  return function (...$args) use ($function) {\n    static $called = false;\n    if ($called) {\n      return;\n    }\n    $called = true;\n    return $function(...$args);\n  };\n}","entry_point":"once","test":"$add = function ($a, $b) {\n  return $a + $b;\n};\n\n$once = once($add);\n\nvar_dump($once(10, 5)); // 15\nvar_dump($once(20, 10)); // null"}
{"task_id":"task/11","prompt":"function endsWith($haystack, $needle)\n{","canonical_solution":"  return strrpos($haystack, $needle) === (strlen($haystack) - strlen($needle));\n}","entry_point":"endsWith","test":"endsWith('Hi, this is me', 'me'); // true"}
{"task_id":"task/12","prompt":"function lcm(...$numbers)\n{","canonical_solution":"  $ans = $numbers[0];\n  for ($i = 1, $max = count($numbers); $i < $max; $i++) {\n    $ans = (($numbers[$i] * $ans) / gcd($numbers[$i], $ans));\n  }\n\n  return $ans;\n}","entry_point":"lcm","test":"lcm(12, 7); // 84\nlcm(1, 3, 4, 5); // 60"}
{"task_id":"task/13","prompt":"function without($items, ...$params)\n{","canonical_solution":"  return array_values(array_diff($items, $params));\n}","entry_point":"without","test":"without([2, 1, 2, 3], 1, 2); // [3]"}
{"task_id":"task/14","prompt":"function fibonacci($n)\n{","canonical_solution":"  $sequence = [0, 1];\n\n  for ($i = 2; $i < $n; $i++) {\n    $sequence[$i] = $sequence[$i-1] + $sequence[$i-2];\n  }\n\n  return $sequence;\n}","entry_point":"fibonacci","test":"fibonacci(6); // [0, 1, 1, 2, 3, 5]"}
{"task_id":"task/15","prompt":"function groupBy($items, $func)\n{","canonical_solution":"  $group = [];\n  foreach ($items as $item) {\n    if ((!is_string($func) && is_callable($func)) || function_exists($func)) {\n      $key = call_user_func($func, $item);\n      $group[$key][] = $item;\n    } elseif (is_object($item)) {\n      $group[$item->{$func}][] = $item;\n    } elseif (isset($item[$func])) {\n      $group[$item[$func]][] = $item;\n    }\n  }\n\n  return $group;\n}","entry_point":"groupBy","test":"groupBy(['one', 'two', 'three'], 'strlen'); // [3 => ['one', 'two'], 5 => ['three']]"}
{"task_id":"task/16","prompt":"function maxN($numbers)\n{","canonical_solution":"  $maxValue = max($numbers);\n  $maxValueArray = array_filter($numbers, function ($value) use ($maxValue) {\n    return $maxValue === $value;\n  });\n\n  return count($maxValueArray);\n}","entry_point":"maxN","test":"maxN([1, 2, 3, 4, 5, 5]); // 2\nmaxN([1, 2, 3, 4, 5]); // 1"}
{"task_id":"task/17","prompt":"function drop($items, $n = 1)\n{","canonical_solution":"  return array_slice($items, $n);\n}","entry_point":"drop","test":"drop([1, 2, 3]); // [2,3]\ndrop([1, 2, 3], 2); // [3]"}
{"task_id":"task/18","prompt":"function orderBy($items, $attr, $order)\n{","canonical_solution":"  $sortedItems = [];\n  foreach ($items as $item) {\n    $key = is_object($item) ? $item->{$attr} : $item[$attr];\n    $sortedItems[$key] = $item;\n  }\n  if ($order === 'desc') {\n    krsort($sortedItems);\n  } else {\n    ksort($sortedItems);\n  }\n\n  return array_values($sortedItems);\n}","entry_point":"orderBy","test":"orderBy(\n  [\n    ['id' => 2, 'name' => 'Joy'],\n    ['id' => 3, 'name' => 'Khaja'],\n    ['id' => 1, 'name' => 'Raja']\n  ],\n  'id',\n  'desc'\n); // [['id' => 3, 'name' => 'Khaja'], ['id' => 2, 'name' => 'Joy'], ['id' => 1, 'name' => 'Raja']]"}
{"task_id":"task/19","prompt":"function rotate($array, $shift = 1)\n{","canonical_solution":"  for ($i = 0; $i < $shift; $i++) {\n    array_push($array, array_shift($array));\n  }\n\n  return $array;\n}","entry_point":"rotate","test":"rotate([1, 3, 5, 2, 4]); // [3, 5, 2, 4, 1]\nrotate([1, 3, 5, 2, 4], 2); // [5, 2, 4, 1, 3]"}
{"task_id":"task/20","prompt":"function shorten($input, $length = 100, $end = '...')\n{","canonical_solution":"  if (mb_strlen($input) <= $length) {\n    return $input;\n  }\n\n  return rtrim(mb_substr($input, 0, $length, 'UTF-8')) . $end;\n}","entry_point":"shorten","test":"shorten('The quick brown fox jumped over the lazy dog', 15); // The quick brown..."}
{"task_id":"task/21","prompt":"function average(...$items)\n{","canonical_solution":"  $count = count($items);\n  \n  return $count === 0 ? 0 : array_sum($items) / $count;\n}","entry_point":"average","test":"average(1, 2, 3); // 2"}
{"task_id":"task/22","prompt":"function reject($items, $func)\n{","canonical_solution":"  return array_values(array_diff($items, array_filter($items, $func)));\n}","entry_point":"reject","test":"reject(['Apple', 'Pear', 'Kiwi', 'Banana'], function ($item) {\n  return strlen($item) > 4;\n}); // ['Pear', 'Kiwi']"}
{"task_id":"task/23","prompt":"function any($items, $func)\n{","canonical_solution":"  return count(array_filter($items, $func)) > 0;\n}","entry_point":"any","test":"any([1, 2, 3, 4], function ($item) {\n  return $item < 2;\n}); // true"}
{"task_id":"task/24","prompt":"function flatten($items)\n{","canonical_solution":"  $result = [];\n  foreach ($items as $item) {\n    if (!is_array($item)) {\n      $result[] = $item;\n    } else {\n      array_push($result, ...array_values($item));\n    }\n  }\n\n  return $result;\n}","entry_point":"flatten","test":"flatten([1, [2], 3, 4]); // [1, 2, 3, 4]"}
{"task_id":"task/25","prompt":"function startsWith($haystack, $needle)\n{","canonical_solution":"  return strpos($haystack, $needle) === 0;\n}","entry_point":"startsWith","test":"startsWith('Hi, this is me', 'Hi'); // true"}
{"task_id":"task/26","prompt":"function clampNumber($num, $a, $b)\n{","canonical_solution":"  return max(min($num, max($a, $b)), min($a, $b));\n}","entry_point":"clampNumber","test":"clampNumber(2, 3, 5); // 3\nclampNumber(1, -1, -5); // -1"}
{"task_id":"task/27","prompt":"function pull(&$items, ...$params)\n{","canonical_solution":"  $items = array_values(array_diff($items, $params));\n  return $items;\n}","entry_point":"pull","test":"$items = ['a', 'b', 'c', 'a', 'b', 'c'];\npull($items, 'a', 'c'); // $items will be ['b', 'b']"}
{"task_id":"task/28","prompt":"function compose(...$functions)\n{","canonical_solution":"  return array_reduce(\n    $functions,\n    function ($carry, $function) {\n      return function ($x) use ($carry, $function) {\n        return $function($carry($x));\n      };\n    },\n    function ($x) {\n      return $x;\n    }\n  );\n}","entry_point":"compose","test":"$compose = compose(\n  // add 2\n  function ($x) {\n    return $x + 2;\n  },\n  // multiply 4\n  function ($x) {\n    return $x * 4;\n  }\n);\n$compose(3); // 20"}
{"task_id":"task/29","prompt":"function findLastIndex($items, $func)\n{","canonical_solution":"  $keys = array_keys(array_filter($items, $func));\n\n  return array_pop($keys);\n}","entry_point":"findLastIndex","test":"findLastIndex([1, 2, 3, 4], function ($n) {\n  return ($n % 2) === 1;\n});\n// 2"}
{"task_id":"task/30","prompt":"function slugify($text) {","canonical_solution":"  $text = preg_replace('~[^\\pL\\d]+~u', '-', $text);\n  $text = iconv('utf-8', 'us-ascii//TRANSLIT', $text);\n  $text = preg_replace('~[^-\\w]+~', '', $text);\n  $text = preg_replace('~-+~', '-', $text);\n  $text = strtolower($text);\n  $text = trim($text, \" \\t\\n\\r\\0\\x0B-\");\n  if (empty($text)) {\n    return 'n-a';\n  }\n  return $text;\n}","entry_point":"slugify","test":"slugify('Hello World'); // 'hello-world'"}
{"task_id":"task/31","prompt":"function isUpperCase($string)\n{","canonical_solution":"  return $string === strtoupper($string);\n}","entry_point":"isUpperCase","test":"isUpperCase('MORNING SHOWS THE DAY!'); // true\nisUpperCase('qUick Fox'); // false"}
{"task_id":"task/32","prompt":"function countVowels($string)\n{","canonical_solution":"  preg_match_all('/[aeiou]/i', $string, $matches);\n\n  return count($matches[0]);\n}","entry_point":"countVowels","test":"countVowels('sampleInput'); // 4"}
{"task_id":"task/33","prompt":"function palindrome($string)\n{","canonical_solution":"  return strrev($string) === (string) $string;\n}","entry_point":"palindrome","test":"palindrome('racecar'); // true\npalindrome(2221222); // true"}
{"task_id":"task/34","prompt":"function firstStringBetween($haystack, $start, $end)\n{","canonical_solution":"  return trim(strstr(strstr($haystack, $start), $end, true), $start . $end);\n}","entry_point":"firstStringBetween","test":"firstStringBetween('This is a [custom] string', '[', ']'); // custom"}
{"task_id":"task/35","prompt":"function tail($items)\n{","canonical_solution":"  return count($items) > 1 ? array_slice($items, 1) : $items;\n}","entry_point":"tail","test":"tail([1, 2, 3]); // [2, 3]"}
{"task_id":"task/36","prompt":"function memoize($func)\n{","canonical_solution":"  return function () use ($func) {\n    static $cache = [];\n\n    $args = func_get_args();\n    $key = serialize($args);\n    $cached = true;\n\n    if (!isset($cache[$key])) {\n      $cache[$key] = $func(...$args);\n      $cached = false;\n    }\n\n    return ['result' => $cache[$key], 'cached' => $cached];\n  };\n}","entry_point":"memoize","test":"$memoizedAdd = memoize(\n  function ($num) {\n    return $num + 10;\n  }\n);\n\nvar_dump($memoizedAdd(5)); // ['result' => 15, 'cached' => false]\nvar_dump($memoizedAdd(6)); // ['result' => 16, 'cached' => false]\nvar_dump($memoizedAdd(5)); // ['result' => 15, 'cached' => true]"}
{"task_id":"task/37","prompt":"function isLowerCase($string)\n{","canonical_solution":"  return $string === strtolower($string);\n}","entry_point":"isLowerCase","test":"isLowerCase('Morning shows the day!'); // false\nisLowerCase('hello'); // true"}
{"task_id":"task/38","prompt":"function isEven($number)\n{","canonical_solution":"  return ($number % 2) === 0;\n}","entry_point":"isEven","test":"isEven(4); // true"}
{"task_id":"task/39","prompt":"function findLast($items, $func)\n{","canonical_solution":"  $filteredItems = array_filter($items, $func);\n\n  return array_pop($filteredItems);\n}","entry_point":"findLast","test":"findLast([1, 2, 3, 4], function ($n) {\n  return ($n % 2) === 1;\n});\n// 3"}
{"task_id":"task/40","prompt":"function minN($numbers)\n{","canonical_solution":"  $minValue = min($numbers);\n  $minValueArray = array_filter($numbers, function ($value) use ($minValue) {\n    return $minValue === $value;\n  });\n\n  return count($minValueArray);\n}","entry_point":"minN","test":"minN([1, 1, 2, 3, 4, 5, 5]); // 2\nminN([1, 2, 3, 4, 5]); // 1"}
{"task_id":"task/41","prompt":"function all($items, $func)\n{","canonical_solution":"  return count(array_filter($items, $func)) === count($items);\n}","entry_point":"all","test":"all([2, 3, 4, 5], function ($item) {\n  return $item > 1;\n}); // true"}
{"task_id":"task/42","prompt":"function pluck($items, $key)\n{","canonical_solution":"  return array_map( function($item) use ($key) {\n    return is_object($item) ? $item->$key : $item[$key];\n  }, $items);\n}","entry_point":"pluck","test":"pluck([\n  ['product_id' => 'prod-100', 'name' => 'Desk'],\n  ['product_id' => 'prod-200', 'name' => 'Chair'],\n], 'name');\n// ['Desk', 'Chair']"}
{"task_id":"task/43","prompt":"function approximatelyEqual($number1, $number2, $epsilon = 0.001)\n{","canonical_solution":"  return abs($number1 - $number2) < $epsilon;\n}","entry_point":"approximatelyEqual","test":"approximatelyEqual(10.0, 10.00001); // true\n\napproximatelyEqual(10.0, 10.01); // false"}
{"task_id":"task/44","prompt":"function decapitalize($string, $upperRest = false)\n{","canonical_solution":"  return lcfirst($upperRest ? strtoupper($string) : $string);\n}","entry_point":"decapitalize","test":"decapitalize('FooBar'); // 'fooBar'"}
{"task_id":"task/45","prompt":"function isPrime($number)\n{","canonical_solution":"  $boundary = floor(sqrt($number));\n  for ($i = 2; $i <= $boundary; $i++) {\n    if ($number % $i === 0) {\n      return false;\n    }\n  }\n\n  return $number >= 2;\n}","entry_point":"isPrime","test":"isPrime(3); // true"}
{"task_id":"task/46","prompt":"function remove($items, $func)\n{","canonical_solution":"  $filtered = array_filter($items, $func);\n\n  return array_diff_key($items, $filtered);\n}","entry_point":"remove","test":"remove([1, 2, 3, 4], function ($n) {\n  return ($n % 2) === 0;\n});\n// [0 => 1, 2 => 3]"}
{"task_id":"task/47","prompt":"function deepFlatten($items)\n{","canonical_solution":"  $result = [];\n  foreach ($items as $item) {\n    if (!is_array($item)) {\n      $result[] = $item;\n    } else {\n      array_push($result, ...deepFlatten($item));\n    }\n  }\n\n  return $result;\n}","entry_point":"deepFlatten","test":"deepFlatten([1, [2], [[3], 4], 5]); // [1, 2, 3, 4, 5]"}
{"task_id":"task/48","prompt":"function gcd(...$numbers)\n{","canonical_solution":"  if (count($numbers) > 2) {\n    return array_reduce($numbers, 'gcd');\n  }\n\n  $r = $numbers[0] % $numbers[1];\n  return $r === 0 ? abs($numbers[1]) : gcd($numbers[1], $r);\n}","entry_point":"gcd","test":"gcd(8, 36); // 4\ngcd(12, 8, 32); // 4"}
