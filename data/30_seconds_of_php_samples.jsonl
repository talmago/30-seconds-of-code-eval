{"task_id":"task/1","completion":" foreach ($items as $item) { $this->items[] = $item; } } }\n$items = array(1, 2, 3, 4, 5); $arr = new ArrayHead($items); echo $arr->"}
{"task_id":"task/1","completion":" echo \"<table width=100% border=1 cellspacing=0 cellpadding=0><tr>\"; foreach($items as $k=>$v) { echo \"<td align=center valign=top><font color=$v"}
{"task_id":"task/1","completion":"foreach from=$items item=item}\n{if $item.operation == \"ADD\"\n{set $i++\n}\n\n{/if}\n\n{/foreach}\n</programlisting>\n\nIn"}
{"task_id":"task/1","completion":" $last = $items[count($items)-1]; $first = $items[0]; return $last['title'] . \" \u2013 \" . $first['title']; }\n$books = array( array('title'=>'"}
{"task_id":"task/1","completion":" \u00a0\u00a0\u00a0 return $items[0]; \u00a0\u00a0\u00a0 }\nfunction last($items)\n{ \u00a0\u00a0\u00a0 return $items[count($items)-1]; \u00a0\u00a0\u00a0 }\n$items = array('first','second','third','fourth','fifth');"}
{"task_id":"task/2","completion":" $sum = 0; $count = 0; $divisor = 1; $quotient = 0; $remainder = 0; foreach ($numbers as $number) { $count++; $sum += $number;"}
{"task_id":"task/2","completion":" return $numbers[(($numbers.length - 1) / 2)]; }\n\nand then we can do things like this:\n\necho median(range(0, 10)); // 3\n\nTo be more specific,"}
{"task_id":"task/2","completion":"\n\nfunction sum($array)\n\nfunction avg($array)\n\nfunction stdev($array)\n\nfunction range($number, $number2)\n\nfunction random()\n\nfunction array_sum($array)\n\nfunction"}
{"task_id":"task/2","completion":"\n}\n\nAn example usage of this function might be:\n$median = median(array('one', 'three', 'eight', 'sixteen'));\n$median = median(\nIt is possible to consider that an"}
{"task_id":"task/2","completion":" $total = 0;\nfor ($i = 0; $i < $numbers; $i++) {\n$total += $numbers[$i];\n}\nreturn $total / count($numbers);\n}\n\n"}
{"task_id":"task/3","completion":"\n\nif (empty($items)) {\n\necho \"No items selected\";\n\n} else {\n\nif ($n == 1) {\n\necho \"1 selected\";\n\n} else {\n\necho \"\";\n\n"}
{"task_id":"task/3","completion":" for ($i = 0; $i < $n; $i++) { $items[$i] = \"Part \" . $i; } return $items; }\n\nThis is a naive implementation that might work on small arrays,"}
{"task_id":"task/3","completion":" $this->items = array_merge($this->items, $items);\nif ($n <= count($this->items)) {\nreturn true;\n}\nreturn false;\n}\n\nfunction numberOfTimes()\n{"}
{"task_id":"task/3","completion":" $this->items = array_merge($this->items, $items); return $this->items[$n-1]; }\n\n\nWe then add a few items, and then retrieve the last element, as in Example 4-"}
{"task_id":"task/3","completion":" $result = array(); for ($i = 0; $i < $n; $i++) { $result[] = $items[$i]; } return $result; }\n\n\nNote\n\n\nAs you can see, the function is"}
{"task_id":"task/4","completion":"\n\nfunction add()\n\nfunction get_last()\n\nfunction get_item_name()\n\nfunction get_item_length()\n\nfunction get_item_size()\n\nfunction add_item()\n\nfunction get"}
{"task_id":"task/4","completion":" $total = 0; $last = null; $i = 0; foreach ($items as $item) { if ($i == count($items)) { $last = $item; $total += $item->cost; break; }"}
{"task_id":"task/4","completion":" $last = null; if(is_array($items)) { $first = end($items); if(is_null($first)) { $last = null; } else { $last = $first; } } else { $last"}
{"task_id":"task/4","completion":"\n\nfunction last2($items)\n\nfunction last3($items)\n\nfunction last4($items)\n\nfunction last5($items)\n\nfunction last6($items)\n\nfunction last7($items)\n\n"}
{"task_id":"task/4","completion":" $last = $items[$this->depth]; $this->depth--; return $last; }\n$first = $items[0];\nfunction first()\n{ $this->depth = 0; return $first; }\n"}
{"task_id":"task/5","completion":" return preg_match('/'.$needle.'/', $string); }\nfunction isIn($array, $needle)\n{ foreach ($array as $item)\n{ if ($item == $needle)\n"}
{"task_id":"task/5","completion":" if (count($this->startsWith($string, $needle)) == 0) { return false; } else { return true; } }\n$in_array = function($needle, $haystack) use ($filter"}
{"task_id":"task/5","completion":" \u00a0\u00a0\u00a0 return (strpos($string, $needle) !== false); \u00a0\u00a0\u00a0 }\n$text = \"No longer with us is our beloved father and husband, Donald G.\";\necho \"before: \".$text.\"<"}
{"task_id":"task/5","completion":" \u00a0\u00a0\u00a0 $needleLen = strlen($needle); \u00a0\u00a0\u00a0 for ($i = 0; $i < strlen($string); $i++) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if ($string[$i] == $needle[$need"}
{"task_id":"task/5","completion":" $needle = trim($needle); $needle = strtolower($needle); //first character is not compared if ($string[0] != $needle) return false; //needle can only be present at the"}
{"task_id":"task/6","completion":" if(is_callable($function)){\n$result = $function();\nif($result instanceof Closure){\nreturn $result;\nelseif($result instanceof Array){\nreturn array_map($function, $result"}
{"task_id":"task/6","completion":" //function to execute return function($arg1, $arg2) use ($function) { return $function($arg1, $arg2); }; }\n$curryedAdd = curry(function($a, $b) { return"}
{"task_id":"task/6","completion":" $function = $function ?? ''; return function() use ($function) { $function($this); return $this; }; }\n$curryed = curry(function($number) { return $number + 1; });\necho $"}
{"task_id":"task/6","completion":" return function($var1, $var2) use ($function) { return $function($var1, $var2); }; } $add1 = curry(function($x, $y) { return $x + $y; });"}
{"task_id":"task/6","completion":"\n\n$function(mixed $arg1, mixed $arg2 = null)\n$function = (function(mixed $arg1, mixed $arg2 = null) \n\nfunction curried($function)\n\n$"}
{"task_id":"task/7","completion":"\n\nfunction isPalindrome($string)\n\n{\n\n}\n\nfunction isPangram($string)\n\n{\n\n}\n\nfunction isPangram($string)\n\n{\n\n}\n\n"}
{"task_id":"task/7","completion":"\n$length1 = strlen($string1);\n$length2 = strlen($string2);\nif($length1 != $length2) return 0;\n$char1 = $string1[0];\n$char2"}
{"task_id":"task/7","completion":" $length1 = strlen($string1); $length2 = strlen($string2); $alpha1 = substr($string1, 0, $length1-1); $alpha2 = substr($string2, 0, $length"}
{"task_id":"task/7","completion":" // return true if $string1 is a substring of $string2\n}\nThe function isAnagram accepts two strings as parameters and then checks if the first one is a substring of the second one.\n\nIf the same method"}
{"task_id":"task/7","completion":" $string1 = strtolower($string1); $string2 = strtolower($string2); for($i = 0; $i < strlen($string1); $i++) { if(strcmp($string1"}
{"task_id":"task/8","completion":" $hasDuplicates = false; foreach ($items as $item) { if (in_array($item, $previous)) { $hasDuplicates = true; break; } } return $hasDuplicates; }"}
{"task_id":"task/8","completion":" $found = 0; $value = 0; foreach ($items as $item) { if (isset($this->cache[$item->id])) { if ($this->cache[$item->id]->value == $"}
{"task_id":"task/8","completion":" return $items->filter(function($item) use ($items) { return !$items->contains($item); }); }\n}\n\nThis approach could be easily extended to define an interface for the list of items and test the many"}
{"task_id":"task/8","completion":" $duplicates = []; foreach ($items as $key => $item) { if (in_array($item, $duplicates)) { $duplicates[] = $key; } else { $duplicates[] ="}
{"task_id":"task/8","completion":" \u00a0\u00a0\u00a0 $results = array(); \u00a0\u00a0\u00a0 $count = count($items); \u00a0\u00a0\u00a0 $index = 0; \u00a0\u00a0\u00a0 foreach ($items as $item) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if (!array_key_exists($item, $results"}
{"task_id":"task/9","completion":"\n\nfunction factorial($n)\n\nThis function is named with a different name than the generic function and is called with different arguments. Since the function is named, it is clear to the programmer calling it what will be returned.\n\n"}
{"task_id":"task/9","completion":"\n\nfunction factorial($n)\n\nHere we have to add in the extra step of adding 1 to the running total. We can do this by performing the first loop iteration, then adding 1 to the running total before starting the second loop"}
{"task_id":"task/9","completion":" $n = intval($n); $n = $n * (1..$n-1); return $n; }\n$n = '6'; echo \"$n! = \".factorial($n).\"<br>\";\n"}
{"task_id":"task/9","completion":"\n</syntaxhighlight>\n</div>\n\n<div id=\"factorial\"></div>\n\n<div id=\"factorial\"></div>\n\n<div id=\"factorial\"></div>\n\n<div id=\""}
{"task_id":"task/9","completion":"\n\nThe output is:\n\n1! = 1\n2! = 2\n3! = 6\n4! = 24\n5! = 120\n\nTo prove that the results are correct, we can follow the execution of the program"}
{"task_id":"task/10","completion":"\nglobal $settings;\n\n$this->_settings['alnum'] = true;\n\n$this->_settings['alpha'] = true;\n\n$this->_settings['space'] = true;\n\n$this->"}
{"task_id":"task/10","completion":" if(is_callable($function)) { $function(); } else { trigger_error(\"Function %s not found\", $function); } }\nfunction trigger_error($message)\n{ error_log(\"Caught exception in function"}
{"task_id":"task/10","completion":" $entry_count = 0; $entry_start = -1; $entry_end = -1; $non_entry_start = -1; $non_entry_end = -1; $context = ''; $pattern"}
{"task_id":"task/10","completion":"\n\nfunction pre-function($function)\n\nfunction post-function($function)\n\nfunction once-twice($function)\n\nfunction once-twice($function)\n\nfunction once-twice($function)\n\n"}
{"task_id":"task/10","completion":" $function = strtolower($function);\nif (in_array($function, $functions)) {\n$cache[$function] = $GLOBALS[$function];\nreturn $cache[$function];\nelse"}
{"task_id":"task/11","completion":" $haystack = trim($haystack); $needle = trim($needle); if ($haystack === $needle) { return true; } if ($haystack === '') { return false; } return str"}
{"task_id":"task/11","completion":" if(strlen($haystack) < strlen($needle)) { return false; } else { $haystack = substr($haystack, 0, strlen($needle)); for($i = 0; $i"}
{"task_id":"task/11","completion":"\n\nfunction indexOf($haystack, $needle)\n\nfunction countOccurrences($haystack, $needle)\n\nfunction countOccurrences($haystack, $needle, $offset = 0"}
{"task_id":"task/11","completion":"\n\nfunction strlen($string)\n\n{\n\nfunction strrev($string)\n\n{\n\nfunction strstr($haystack, $needle)\n\n{\n\nfunction strtolower($string)\n"}
{"task_id":"task/11","completion":"\n\nfunction add(x, y)\n\nfunction sub(x, y)\n\nfunction mul(x, y)\n\nfunction div(x, y)\n\nfunction mod(x, y)\n\nfunction pow("}
{"task_id":"task/12","completion":" \n}\n\nThis is the interface for the function:\n\nfunction lcm(...$numbers)\n\nThis is an example use of the function:\n\nlcm(4,6,8)\n\nThis is"}
{"task_id":"task/12","completion":" $sqrtnums = $numbers | foreach {$_ * $_} $sum = 0 foreach ($n in $sqrtnums) { $sum += $n } return [math]::pow($sum,"}
{"task_id":"task/12","completion":"\n$result = 1;\nforeach($numbers as $number)\n{\n$result *= $number;\n}\nreturn $result;\n}\n\nThe LCM of the list of integers 1, 2, and"}
{"task_id":"task/12","completion":"\nfunction next_lcm(...$numbers)\n{\nfunction lcm_gcd(...$numbers)\n{\nfunction lcm_gcd(...$numbers)\n{\nfunction lcm_l"}
{"task_id":"task/12","completion":"\n$lcm = 1;\nfor ($i = 1; $i < $numbers; $i++) {\n\n$lcm *= $numbers[$i];\n\n}\n\nreturn $lcm;\n"}
{"task_id":"task/13","completion":" # $items is an array or a Traversable object\n}\n\n\n"}
{"task_id":"task/13","completion":" // ... }\n\nYou could say that the second argument is a named list, but it can have only a single element.\n\nStructures are very similar to anonymous unions in C. We could write an array-of-structures like"}
{"task_id":"task/13","completion":" <script> var $items = $items; if ($items === null) return; if ($items instanceof HTMLElement) { $items = $items.getAttribute('data-tooltip'); } if ($items === null)"}
{"task_id":"task/13","completion":" $params = iterator_to_array($params);\nforeach ($items as $key => $item) {\nif (isset($params[$key])) {\n$value = $params[$key];\n$items"}
{"task_id":"task/13","completion":"\n\nTo define a class, the \"class\" keyword is used. To instantiate an object, the \"new\" keyword is used:\n\nTo define a class, the \"class\" keyword is used. To instantiate an object,"}
{"task_id":"task/14","completion":"\n\nfunction bernoulli($n)\n\nfunction factorial($n)\n\nfunction fft($n)\n\nfunction gcd($a, $b)\n\nfunction get_pid()\n\nfunction lcm($"}
{"task_id":"task/14","completion":"\n\necho(n);\n}\n\n?>\n\nExample of recursion:\n\n<?php\n\nfunction fibonacci($n)\n\n{\n\nif ($n < 2)\n\n{\n\nreturn 1"}
{"task_id":"task/14","completion":"\n\n}\nThis function does exactly the same thing as the previous one, but it is not functional.\n\nIn the functional definition of fibonacci the argument n is not the source of data, it is the \"context\" of the"}
{"task_id":"task/14","completion":" if ($n <= 2) { return 1; } return fibonacci($n - 1) + fibonacci($n - 2); } }\n\n\n\nThis is a recursive function that calls itself to determine the values for n = 1"}
{"task_id":"task/14","completion":"\n\nfunction fibo(int $n)\n\nfunction fibo(int $n)\n\nfunction fibo(int $n)\n\nfunction fibo(int $n)\n\nfunction fibo(int $n)"}
{"task_id":"task/15","completion":" $items = iterator_to_array($items); $groups = array(); foreach ($items as $item) { $groups[$func($item)] = $item; } return $groups; } function GroupBy($data, $"}
{"task_id":"task/15","completion":" return array_map($func, $items); }\n}\n\nIn the above example, the method groupBy() returns an array, whose items are arrays of the same size, each with a single member. The method simply maps the value"}
{"task_id":"task/15","completion":"\n\nfunction ($items, $func)\n\nforeach ($items as $key => $value)\n\nforeach ($items as $key => $value)\n\nforeach ($items as $key => $value)\n\n"}
{"task_id":"task/15","completion":" $groups = array(); foreach ($items as $item) { $groups[$func($item)] = $item; } return $groups; }\n$items = collect(['a', 'b', 'c', 'd',"}
{"task_id":"task/15","completion":" \u00a0\u00a0\u00a0 $groupBy = array(); \u00a0\u00a0\u00a0 foreach ($items as $item) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if ($func($item)) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 $groupBy[] = $item; \u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0 return $"}
{"task_id":"task/16","completion":" if($numbers > $max) return $max; $max = $numbers; return $max; }\n$maxN = maxN(array_unique(range(10)))\n$maxN = 10\n\nWhile this"}
{"task_id":"task/16","completion":"\n\nThe maxn() function can be called with a single numeric value or with an array of numeric values. Both cases are shown below.\n\n$result = maxn(10);\n\necho $result;\n\necho \"<br"}
{"task_id":"task/16","completion":" return $numbers[0] * $numbers[1] * ... * $numbers[$numbers.Length - 1]; } }\nThis would be straightforward to understand, but it's also a bit wordy. It would"}
{"task_id":"task/16","completion":" \n\n<poem>The first number is: $numbers[0]\nThe last number is: $numbers[$numbers.Length - 1]\nThe maximum number is: $numbers[$numbers."}
{"task_id":"task/16","completion":"\n\nWorks with: PowerShell version 3\n\nThis function works with PowerShell v3 and later.\n\nfunction MaxN {\n\n$collection = @(1..10)\n\n$max = $collection | sort | select -first"}
{"task_id":"task/17","completion":" foreach ($items as $item) { if (in_array($item, $n)) { unset($items[$n]); $n--; } } }\n\n\n\necho \"How many items would you like to drop?"}
{"task_id":"task/17","completion":" \u00a0\u00a0\u00a0 $items = array_slice($items, 0, $n); \u00a0\u00a0\u00a0 return $items; \u00a0\u00a0\u00a0 }\nIn this example, we're just copying the items to a new array, but it could just as easily be a pivot"}
{"task_id":"task/17","completion":" $count = 0;\nforeach ($items as $i) {\nreturn $count;\n}\nThe above code can be used in an asynchronous way as well, but it would require the following:\n\nfunction drop($items,"}
{"task_id":"task/17","completion":" $tmp = array_reverse($items); return array_splice($tmp, $n, 1); }\n(note: you can use this function in other cases as well: for example in a form submit function, where you want to"}
{"task_id":"task/17","completion":" \u00a0\u00a0\u00a0\u00a0 $items = [0,1,2,3,4,5,6,7,8,9,10]; \u00a0\u00a0\u00a0\u00a0 $i = 0; \u00a0\u00a0\u00a0\u00a0 while ($i <= $n) \u00a0\u00a0\u00a0\u00a0 { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0"}
{"task_id":"task/18","completion":"\n\n}\n\n// function getCount($items, $attr)\n{\n\n}\n\n// function getItem($items, $attr)\n{\n\n}\n\n// function getItemCount($items, $attr)"}
{"task_id":"task/18","completion":"\u00a0 $items = array_filter($items, 'is_numeric');\u00a0 $sort_array = array();\u00a0 foreach ($items as $key => $value) {\u00a0\u00a0 $sort_array[$key] = strtou"}
{"task_id":"task/18","completion":"\n\nfunction orderByDesc($items, $attr, $order)\n{\n\nfunction orderByDesc($items, $attr, $order)\n{\n\nfunction orderByArray($items, $attr, $order)\n"}
{"task_id":"task/18","completion":"\n\nfunction getItemId($items, $attr)\n\nfunction getItemKeys($items, $attr)\n\nfunction getItemCount($items, $attr)\n\nfunction getItemTitle($items, $attr)\n\n"}
{"task_id":"task/18","completion":"\u00a0 if (isset($attr['from'])) { $order = $attr['from']; unset($attr['from']); }\u00a0 $items = array_slice($items, 0, $order);\u00a0 foreach ($items"}
{"task_id":"task/19","completion":"\nforeach($array as $value)\n\n$array = array_rotate($array, $shift);\nreturn $array;\n}\n\nInline Functions\n\nThe inline keyword can be used on a function. It is"}
{"task_id":"task/19","completion":"\nfunction rotate($array, $shift = 1)\n\nfunction rotate($array, $shift = 1)\n\nfunction rotate($array, $shift = 1)\n\nfunction rotate($array, $shift = 1)\n\nfunction"}
{"task_id":"task/19","completion":" # shift the array\n# 1) set the new base $base = $array[0];\n# 2) identify the leftovers\n# 3) build the right array (passing in the base)\n# 4) return the new"}
{"task_id":"task/19","completion":" if (is_array($array)) { $array2 = array(); for ($i = 0; $i < count($array); $i++) { $array2[$i] = $array[$i] + $shift;"}
{"task_id":"task/19","completion":"\n\nfunction rotate($array, $shift = 1)\n\nfunction rotate_left($array, $shift = 1)\n\nfunction rotate_right($array, $shift = 1)\n\nfunction reverse($array)\n\nfunction"}
{"task_id":"task/20","completion":" $segments = array(); $result = ''; $expiration = ''; $input = preg_replace('#[\\r\n]#', '', $input); $input = preg_replace('#[\\s"}
{"task_id":"task/20","completion":"\n\nfunction pad($input, $length = 100, $end = '...')\n{\n\nfunction repeat($input, $count = 1, $end = '...')\n{\n\nfunction repeatUntil($input, $end"}
{"task_id":"task/20","completion":"\n\nfunction join($input, $sep = ', ')\n\nfunction get_date($input, $default = 'now')\n\nfunction j_strftime($input, $format, $timestamp = 'now')\n"}
{"task_id":"task/20","completion":"\n$output = \"\";\nfor ($i = 0; $i < $length; $i++) {\nif (strlen($input) > $i) {\nelse {\n$output .= $end;\n$output"}
{"task_id":"task/20","completion":" $remainder = strlen($input);\nwhile ( strlen($input) >= $length ) {\nif ( substr($input, -1) != $end ) {\n$input = substr($input, 0, -1"}
{"task_id":"task/21","completion":"\n\nreturn $items[mean(scalar(@items))];\n\n}\n\nThis function would have to be defined in the same module as the function that calls it.\n\nNote that overloading functions in this way is"}
{"task_id":"task/21","completion":" \u00a0\u00a0\u00a0 $sum = 0; \u00a0\u00a0\u00a0 foreach ($items as $item) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 $sum += $item; \u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0 return $sum / count($items); \u00a0\u00a0\u00a0 }\nThe first difference is that the"}
{"task_id":"task/21","completion":" \u00a0 return ($items * $items) / (sum($items) - sum(distinct(...$items))); \u00a0 }\nThis method is very similar to the one we implemented before. Instead of using distinct() it calls sum() to"}
{"task_id":"task/21","completion":" \u00a0\u00a0\u00a0 return (sum(...$items)) / (length(...$items)); \u00a0\u00a0\u00a0 }\nIf you run this, you'll see that average is faster for small inputs but not for large inputs. What's going on?\nThe"}
{"task_id":"task/21","completion":" \u00a0\u00a0\u00a0 return ($items[0] + $items[1] + $items[2]...) / 3; \u00a0\u00a0\u00a0 }\nInstead of being a problem, this is a golden opportunity. We can use the fact that the values are now"}
{"task_id":"task/22","completion":"\n\n$items = $items * 10;\n\n$items = $items * 10;\n\necho $items;\n\necho $func('Parent::reject()');\n\necho $func('Parent::reject()');"}
{"task_id":"task/22","completion":" $this->items[$items[0]] = $func($items[1]); return $this; } } $myShoppingCart = new ShoppingCart(); $myShoppingCart->addItem('apple', 'Eat it!');"}
{"task_id":"task/22","completion":" }\n\n\n$items = [1, 2, 3];\n\n$func = function ($i) { return $i * 3; };\n\ncall_user_func_array('reject', $items, $func);\n"}
{"task_id":"task/22","completion":"\n\n<!--BEGINNING OF FUNCTION PARAMETERS-->\n\n$items = $arg1;\n\n$func = $arg2;\n\n<!--END OF FUNCTION PARAMETERS-->\n\n"}
{"task_id":"task/22","completion":" echo '<p>' . $items . '</p>'; } ?>\n<p> <form action=\"<?php echo $PHP_SELF; ?>\" method=\"post\"> <?php $i = 0;"}
{"task_id":"task/23","completion":" if (isset($items[0])) { \n\nThe $items array is usually an associative array or object, and the $func is the name of a user-defined function that acts on a single item in the array."}
{"task_id":"task/23","completion":" \n\nfunction any($items, $func)\n{ \n\nfunction collect($items, $func)\n{ \n\nfunction flatten($items, $func)\n{ \n\nfunction collect_list($items,"}
{"task_id":"task/23","completion":"\n\nIf there are not enough items to call the $func on, we call the $func with an empty array and return that.\nIf there are enough items, we call the $func on each item, and return the result of the"}
{"task_id":"task/23","completion":"\n\n<br>\n\n<br>\n\n}\n\n<br>\n\nfunction sum($numbers)\n{\n\n<br>\n\n<br>\n\n}\n\n<br>\n\nfunction mean"}
{"task_id":"task/23","completion":" foreach($items as $item) { if($func($item)) { return true; } } return false; }\nStep 2: Add the processor that will handle the tag\nIn order to pass a test item through our processor, we"}
{"task_id":"task/24","completion":"\u00a0 foreach ($items as $item)\n{\u00a0 if (is_array($item))\n{\u00a0 foreach ($item as $subitem)\n{\u00a0 flatten($subitem);\n\u00a0}\n\u00a0}\n\u00a0}"}
{"task_id":"task/24","completion":"\u00a0 \u00a0\u00a0\u00a0 foreach ($items as $item) \u00a0\u00a0\u00a0 { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // if its not an array, send it along \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if (!is_array($item)) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 $items[] = $"}
{"task_id":"task/24","completion":" $output = []; foreach ($items as $item) { $output[] = $item; } return $output; } function flatten(array $items)\npow($a, $b) { return $a ** $b"}
{"task_id":"task/24","completion":" \u00a0\u00a0\u00a0 $result = []; \u00a0\u00a0\u00a0 foreach ($items as $item) \u00a0\u00a0\u00a0 { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if (is_array($item)) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 $result[] = flatten($item); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 }"}
{"task_id":"task/24","completion":"\n\nfunction flatten(array $items)\n\n{\n\nfunction flatten(array $items)\n\nvar_dump(flatten([1,2,3,4,5,6,7,8,9,"}
{"task_id":"task/25","completion":"\n}\n\nThis function will search any given string for the first occurrence of a given substring.\n\nPHP allows any number of functions to be defined within a single PHP file, as long as the file is executed as a PHP script"}
{"task_id":"task/25","completion":"\n\nfunction startsWith($haystack, $needle)\n\nfunction startsWith($haystack, $needle)\n\nfunction startsWith($haystack, $needle)\n\nfunction startsWith($hay"}
{"task_id":"task/25","completion":" \nif ($needle === $haystack) {\nreturn true;\n} elseif ($needle !== null) {\nreturn false;\n} else {\nreturn null;\n}\n\nfunction trimStart($string"}
{"task_id":"task/25","completion":" $haystack = strtolower($haystack); $needle = strtolower($needle); $needlelen = strlen($needle); $needlepos = strpos($haystack, $"}
{"task_id":"task/25","completion":" \u00a0\u00a0\u00a0 $needle = strtolower($needle); \u00a0\u00a0\u00a0 $haystack = strtolower($haystack); \u00a0\u00a0\u00a0 if (strpos($haystack, $needle) === false) \u00a0\u00a0\u00a0\u00a0\u00a0"}
{"task_id":"task/26","completion":"\nThe third argument is used in cases where a binary operation is not defined for two values. For example, there is no binary operation defined for the number zero, and the addition operator only accepts two numbers. To handle this case, we define a"}
{"task_id":"task/26","completion":"\n\nfunction clampNumber($num, $a, $b)\n\nfunction clampNumber($num, $a, $b)\n\nfunction clampNumber($num, $a, $b)\n\nfunction clampNumber($num,"}
{"task_id":"task/26","completion":" return $num / $a / $b; }\n\n\nfunction clampNumber($num, $a, $b)\n{ return $num / ($a / $b); }\n\n\nfunction clampNumber($num, $a, $"}
{"task_id":"task/26","completion":"\nfunction clampNumber($num, $a, $b)\n\nfunction clampNumber($num, $a, $b)\n\nfunction clampNumber($num, $a, $b)\n\nfunction clampNumber($num, $"}
{"task_id":"task/26","completion":"\n\nfunction clampNumber($num, $a, $b)\n\nfunction clampNumber($num, $a, $b)\n\nfunction clampNumber($num, $a, $b)\n\nfunction clampNumber($num,"}
{"task_id":"task/27","completion":"\n\n// This is just to show how you can use param()\n\n// to quickly add params to a function.\n{\n// Same as above, but using named params\n\n// Note: This example uses the PHP 5.3"}
{"task_id":"task/27","completion":"\n\n$items is an array of scalar variables that are to be passed by reference.\n\nfunction set($$var1, ..., $var_n)\n\nfunction set(&$var1, ..., $var_n"}
{"task_id":"task/27","completion":"\n\nfunction get_children($items, ...$params)\n\nfunction get_parent($items, ...$params)\n\nfunction get_grandparent($items, ...$params)\n\nfunction get_children_from_item"}
{"task_id":"task/27","completion":" # implementation\n}\n\nNote that this function expects a reference to an array, since the caller of the function may be calling it with a longer array than what the function needs.\n\nFor an example, see the recode() function in"}
{"task_id":"task/27","completion":" $items->each(function($item, $index) use($params) { //\u00a0 //\u00a0$item is a single item from the collection //\u00a0 //\u00a0$index is the index of that item in the collection }); }\n$items"}
{"task_id":"task/28","completion":" \u00a0\u00a0\u00a0 $arity = count($functions); \u00a0\u00a0\u00a0 $body = $functions[0]; \u00a0\u00a0\u00a0 foreach ($functions[1 .. $arity] as $i => $f) \u00a0\u00a0\u00a0 { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 $body ="}
{"task_id":"task/28","completion":"\n}\n\nComposition of functions is useful for cases where a large number of similar functions are required.\n\nIn functional programming, a higher-order function is a function that takes one or more functions as arguments or returns a function as its"}
{"task_id":"task/28","completion":" \u00a0\u00a0\u00a0 return function () { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return $functions(...call_args()); \u00a0\u00a0\u00a0 }; \u00a0\u00a0\u00a0 }\nThis is a very powerful concept, but it's not always immediately obvious when to use it. There's actually a very"}
{"task_id":"task/28","completion":"\n\nfunction memoize(func) {\n\nfunction memoize(func) {\n\nformula_93:\n\nfunction memoize(func) {\n\nformula_93:\n\nformula_95:\n\n"}
{"task_id":"task/28","completion":"\n\n$last = $functions[$#functions];\n\nreturn function() use ($last) {\n\n$last($this);\n};\n}\n\nComposing the functions \"f\" and \"g\" to create"}
{"task_id":"task/29","completion":"\n\nfunction insertLast($items, $item)\n\nfunction findLast($items, $func)\n\nfunction removeLast($items, $item)\n\nfunction findLastIndex($items, $func)\n\nfunction insertBefore"}
{"task_id":"task/29","completion":" \u00a0\u00a0\u00a0 $lastIndex = array_search($func, $items, true); \u00a0\u00a0\u00a0 return $lastIndex; }\n/** * Get the last element in the array. * * @param array $items * @return mixed * @since"}
{"task_id":"task/29","completion":" $lastIndex = -1; $result = []; foreach ($items as $item) { if ($func($item)) { $result[$lastIndex] = $item; $lastIndex++; } } return $result; }\n\n"}
{"task_id":"task/29","completion":"\nif(sizeof($items) > 0)\n\nThe negative operator \"-=\" is used to remove the values from the array.\n\n$items = array_remove($items, 3);\n\necho $items[array_search"}
{"task_id":"task/29","completion":" \u00a0\u00a0\u00a0 return array_search($func, array_reverse($items)); \u00a0\u00a0\u00a0 }\nThe only other place where we need to use this is in the array_column function. The issue here is that if the array happens to be sorted and"}
{"task_id":"task/30","completion":" $text = preg_replace(\"/[^a-z0-9-_]+/\", \"\", $text); return preg_replace(\"/[a-z0-9-_]+/\", \"\", $text"}
{"task_id":"task/30","completion":" $text = preg_replace(\"/[a-zA-Z0-9-_]+/\", \"\", $text); $text = preg_replace(\"/[^a-zA-Z0-9-"}
{"task_id":"task/30","completion":" $text = preg_replace('/[a-z]/', '', $text); $text = preg_replace('/[A-Z]/', '', $text); $text = preg_replace('"}
{"task_id":"task/30","completion":" $text = preg_replace('/(\\.{2,}|{2,})/',\"$1-\",$text); $text = preg_replace('/(\\S+)/',\"-$1\",$text); $text"}
{"task_id":"task/30","completion":"\n\nforeach (array('A-Z', 'a-z', '0-9', ' ') as $c) {\n\n$text = strtolower($text) . strtoupper($c);\n"}
{"task_id":"task/31","completion":" \n\nfunction isUpperCase($string)\n{ \n\nfunction isUpperCase($string)\n{ \n\nfunction isUpperCase($string)\n{ \n\nfunction isUpperCase($string)"}
{"task_id":"task/31","completion":" $string = strtoupper($string); }\n\nThe above function will create a new case version of the string it is given, which in this case will be \"Welcome to LOWERCASE!\".\n\nPHP can be embedded"}
{"task_id":"task/31","completion":" $string = strtoupper($string);\n}\nNotice that the strtoupper() function is called with $string as its only argument. PHP always passes by value, so the actual string will be passed in, and the function"}
{"task_id":"task/31","completion":" \u00a0\u00a0\u00a0 return (strtoupper($string) === $string); \u00a0\u00a0\u00a0 }\nThe array_unique() function will produce a new array that contains all the values from the original array but not repeating values.\nThe PHP (5."}
{"task_id":"task/31","completion":" return ((string) $string) [0] >= 'A' && ((string) $string) [0] <= 'Z'; }\nThis is the smallest valid PHP program. It has 2 source lines and 2 executable lines. It uses"}
{"task_id":"task/32","completion":"\n$length = strlen($string);\n$diff = 0;\nfor ($i = 0; $i < $length; $i++) {\nif (substr($string, $i, 1) == 'a') {"}
{"task_id":"task/32","completion":" \n\nfunction countVowels($string)\n\nThe algorithm can be expressed in terms of the number of vowels with the following recurrence relation:\n\nFor example, given \"abracadabra\", we have:\n"}
{"task_id":"task/32","completion":"\n$vowels = ['a', 'e', 'i', 'o', 'u'];\n$lettercount = 0;\n\nwhile(strlen($string) > 0)\n{\n$lettercount += count($"}
{"task_id":"task/32","completion":"\n\n\"C\"\n\n\"Java\"\n\n\"Whisky\"\n\nThis method determines the number of vowels in a string by counting the vowel characters and ignoring all others. Vowels in this case are any of the following"}
{"task_id":"task/32","completion":" $numVowels = 0;\n$length = strlen($string);\nfor ($i = 0; $i < $length; $i++) {\n$vowelCount = count_chars($string, $i"}
{"task_id":"task/33","completion":"\n\n$len = strlen($string);\n\nfor ($i = 0; $i < $len; $i++) {\n\nif ($string[$i] != $string[$i + 1]) {\n\nreturn"}
{"task_id":"task/33","completion":" $string = trim($string); $string = strtolower($string); $string = preg_replace('/[^a-z0-9]/', '', $string); $string = preg_replace('"}
{"task_id":"task/33","completion":"\n\nThe variable $string is assigned a value to represent the string.\nThe variable $string is now the string, and is referenced in the next line.\nThe variable $string is assigned the string representation.\nThe string is compared to"}
{"task_id":"task/33","completion":"\n\necho \"The string is $string\";\n\n}\n\n?>\nThe output of the script will be:\nThe string is palindrome\n\nThe following example is a complete, valid script which performs no output, but"}
{"task_id":"task/33","completion":" $string = strtolower($string); $string = preg_replace('/[^a-zA-Z0-9]/', '', $string); $string = strrev($string); return (strcmp"}
{"task_id":"task/34","completion":"\n\nfunction firstStringBetween($haystack, $start, $end)\n\n{\n\n// the following is the recommended minimum contents of a validator\nfunction pwgReservedPagesValidator( $content )\n\n"}
{"task_id":"task/34","completion":"\nfunction firstStringBetween($haystack, $start, $end)\n\n{\nfunction firstStringBetween($haystack, $start, $end)\n\n{\n\nfunction firstStringBetween($haystack, $"}
{"task_id":"task/34","completion":" \u00a0\u00a0\u00a0 $start = strpos($haystack, $start, $end); \u00a0\u00a0\u00a0 return substr($haystack, $start, strlen($end)); \u00a0\u00a0\u00a0 }\nThe $start and $end variables are passed by reference"}
{"task_id":"task/34","completion":"\nfunction firstStringBetween($haystack, $start, $end)\n\nThe main difference between the two PHP implementations is the used data structure. In the Python version the sequence was used, which is optimized for accessing elements. In the"}
{"task_id":"task/34","completion":"\n\nfunction lastStringBetween($haystack, $start, $end)\n{\n\nfunction between(array $haystack, $needle, $offset = 0)\n{\n\nfunction stringBetween(string $h"}
{"task_id":"task/35","completion":"\nfunction trim($string)\n\nfunction number_formats($number, $places)\n\nfunction time_formats($time, $locale)\n\nfunction date_formats($date, $locale)\n\nfunction"}
{"task_id":"task/35","completion":" \u00a0\u00a0\u00a0 // do something with $items here \u00a0\u00a0\u00a0 }\nThis works. It's clean, it's simple, and it doesn't generate any warnings. You can call it from anywhere, and you know exactly what it's going to do."}
{"task_id":"task/35","completion":"\n\nfunction sub1($items)\n\nfunction sub2($items)\n\nfunction sub3($items)\n\nfunction sub4($items)\n\nfunction sub5($items)\n\nfunction sub6($items)\n\n"}
{"task_id":"task/35","completion":" $i = 0;\n}\n\n\nExample:\n\n$result = array_unique(array_unique(array_unique(array_unique(array_unique(array_unique(array_unique(array_unique(array_"}
{"task_id":"task/35","completion":"\n\nThe next two arguments define the head and tail of the list respectively.\nThe arguments are passed in the same order as they are defined in the list.\n\nThe return value is the rest of the list from the tail argument up to"}
{"task_id":"task/36","completion":"\n\nif (!isset($cache[$func])) {\n\n$cache[$func] = (object) $func();\n\n}\n\nreturn $cache[$func];\n\n}\n\nIn Python 2."}
{"task_id":"task/36","completion":"\n\nHere are some examples of how memoize() might be used.\nThe following example shows how memoize() can be used to cache the results of a function that uses sequential search to search an array for a value. This is a very"}
{"task_id":"task/36","completion":" \u00a0\u00a0\u00a0 if (function_exists('array_unique')) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 $cache = array_unique(array_merge($func(), array_keys($func()))); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return function() use ($cache)"}
{"task_id":"task/36","completion":"\n$cache = [];\nif (is_callable($func)) {\n$cache = [$func];\n}\nreturn $cache;\n}\n// usage example:\n$myfunc = function($arg) {\n$"}
{"task_id":"task/36","completion":" \u00a0\u00a0\u00a0 $cache = array(); \u00a0\u00a0\u00a0 $max = count($cache); \u00a0\u00a0\u00a0 return function () use ($func, &$cache, $max) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if ($max == count($cache)) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 $cache"}
{"task_id":"task/37","completion":" if (strtolower($string) == $string) { return true; } return false; }\nfunction isUpperCase($string)\n{ if (strtoupper($string) == $string) { return true;"}
{"task_id":"task/37","completion":" $string = strtolower($string); return ($string{0} >= 'a' && $string{0} <= 'z'); }\n\n\nfunction isURL($string)\n{ return (preg_match('#^"}
{"task_id":"task/37","completion":"\n\nfunction isUpperCase($string)\n\nfunction isDigit($string)\n\nfunction isAlpha($string)\n\nfunction isAlnum($string)\n\nfunction isValidEmail($string)\n\nfunction isValid"}
{"task_id":"task/37","completion":" $lowercase = array( \u00a0//Latin\u00a0 \u00a00xC6, \u00a0//small c, \u00a0//Latin\u00a0 \u00a00xC7, \u00a0//small c with cedilla, \u00a0//Latin"}
{"task_id":"task/37","completion":"\n\nfunction isCapitalized($string)\n\nfunction isOneOf($array, $value)\n\nfunction isNumeric($string)\n\nfunction isNumeric($value)\n\nfunction isDate($value)\n\nfunction"}
{"task_id":"task/38","completion":" if ($number % 2 == 0) { return true; } else { return false; } }\n\nThe function isEven is called with the argument number. This argument is then compared to 0, and if they are equal, true is returned"}
{"task_id":"task/38","completion":" return $number % 2 == 0; }\n\nAdd-Type -AssemblyName System.Windows.Forms\n\n[Windows.Forms.MessageBox]::Show(\"The result is \", isEven($x), \".\", \"Information"}
{"task_id":"task/38","completion":"\n\nfunction isEven($number)\n\nThis function is part of the \"zebra_num\" package, which means it has to be named \"zebra_num_isEven\". The package is given a unique name using the \""}
{"task_id":"task/38","completion":" if ($number % 2 == 0) { return true; } else { return false; } }\nThis is not a good idea for two reasons. The first is that it is not as readable as it could be. There is a lot of"}
{"task_id":"task/38","completion":" return ($number % 2) == 0; }\n\n\nNow the PHP code can be rewritten to the following:\n\nfunction isEven($number)\n{ return (function($number) use ($isEven) { return $isEven($"}
{"task_id":"task/39","completion":" $items->last(); $func($items); }\nfunction findFirst($items, $func)\n{ $items->first(); $func($items); }\nfunction createRandomString($size)\n{ $letters = array('a"}
{"task_id":"task/39","completion":" \u00a0 $lastItem = null; \u00a0 foreach ($items as $item) { \u00a0\u00a0\u00a0 if ($func($item) === true) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 $lastItem = $item; \u00a0\u00a0\u00a0 break; \u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0 } \u00a0"}
{"task_id":"task/39","completion":"\n\nfunction findLast($items, $func)\n\n{\n\nfunction f($items, $func)\n\n{\n\nfunction f($items, $func)\n\n{\n\nfunction f($items, $func)"}
{"task_id":"task/39","completion":" foreach ($items as $item) { if ($func($item)) { return $item; } } return false; } \n\nA particular application of this function is to find the last element of an array that satisfies a given test,"}
{"task_id":"task/39","completion":"\n\nfunction next($items, $func)\n\nfunction prev($items, $func)\n\nfunction move($items, $from, $to, $direction, $delay = 0)\n\nfunction skip($items, $from"}
{"task_id":"task/40","completion":"\n\nfunction maxN($numbers)\n\nfunction minN($array)\n\nfunction maxN($array)\n\nfunction minN1($array)\n\nfunction maxN1($array)\n\nfunction minN2($"}
{"task_id":"task/40","completion":"\n}\n\nAnd then we can call it as follows:\n\nfunction callMinN($numbers)\n{\n\n}\n\nAnd to call the function:\n\n$callMinN = new callMinN(4,"}
{"task_id":"task/40","completion":" \u00a0\u00a0\u00a0 return min($numbers); \u00a0\u00a0\u00a0 }\nWe can't really test function minN yet, but we can go ahead and create a test for the min function.\n$ phpunit --verbose\nPHPUnit 4.4"}
{"task_id":"task/40","completion":"\n\n$numbers = array_filter($numbers);\n\necho \"The minimum number is: \" . $numbers[0] . \"<br>\";\n\n}\n\n?>\n\nOutput:\nThe minimum"}
{"task_id":"task/40","completion":"\n\nfunction sum_of_squares($numbers)\n\nfunction check_if_prime($numbers)\n\nfunction is_prime($numbers)\n\nfunction next_prime($numbers)\n\nfunction next_"}
{"task_id":"task/41","completion":" foreach ($items as $item) { $func($item); } }\n\n\n$items is the array being sorted.\n\n$func is the sorting function.\n\n\nSorting a list is a common task, and it is often"}
{"task_id":"task/41","completion":" for($i=0; $i<count($items); $i++) {\n\nSince there is no requirement that this function modify any of the input arguments, it is safe to pass them by reference, since the function does not modify them"}
{"task_id":"task/41","completion":"\nThe all() function applies a callback to every item in an array or collection. This callback should be a function that takes one argument and returns either true or false. All elements for which the callback returns true are included in the new array.\n"}
{"task_id":"task/41","completion":" $func(array_slice($items, 0, 1)); }\n\nfunction map2($items, $mapper, $converter)\n{ foreach ($items as $key => $value) { $converter($"}
{"task_id":"task/41","completion":"\n$items = func($items);\nreturn $items;\n}\n$items = all(array('A', 'B', 'C', 'D'), function($item) {\nreturn strtoupper($item);\n});"}
{"task_id":"task/42","completion":"\nfunction pluck($items, $key)\n\nThe names of the functions are similar, but the parameters are different.\n"}
{"task_id":"task/42","completion":" return array_values(array_unique($items))[$key]; }\nfunction pluck_and_key($items, $key)\n{ return array_values(array_unique($items))[$key]; }\nfunction"}
{"task_id":"task/42","completion":" $key = \"functionName\"; # change this to the name of the function you want to call\nreturn $items->functionName($key);\n}\n\nThe above code defines a new function called pluck() which can be used just"}
{"task_id":"task/42","completion":"\n\nfunction make_map()\n\nfunction convert_to_ints($values)\n\nfunction convert_to_strings($values)\n\nfunction show_header()\n\nfunction show_map()\n\nfunction print_table()"}
{"task_id":"task/42","completion":" \u00a0\u00a0\u00a0 // iterate over the array, plucking values of $key\n}\n$array = array('a'=>'b','c'=>'d','e'=>'f');\n$array_key = array('a"}
{"task_id":"task/43","completion":" if ($number1 - $number2 > $epsilon) { return false; } else { return true; } }\n#endregion\n\n#region setters and getters\n#region constructors\n#endregion\n\n"}
{"task_id":"task/43","completion":" \u00a0\u00a0\u00a0 return (fabs($number1 - $number2) < $epsilon); \u00a0\u00a0\u00a0 }\nThe $epsilon variable is used to specify how close the two numbers need to be to be considered equal. The function returns"}
{"task_id":"task/43","completion":" \u00a0\u00a0\u00a0 $number1 = round($number1); \u00a0\u00a0\u00a0 $number2 = round($number2); \u00a0\u00a0\u00a0 if($number1 == $number2) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return true; \u00a0\u00a0\u00a0 else if($number1 === $number2"}
{"task_id":"task/43","completion":" return is_numeric($number1) && is_numeric($number2) && ($number1 - $number2) * $epsilon <= $epsilon; }\nThis function is then used to test if the value"}
{"task_id":"task/43","completion":" \u00a0\u00a0\u00a0 $maxDiff = abs($number1 - $number2); \u00a0\u00a0\u00a0 return ($maxDiff <= $epsilon); }\nfunction approximatelyEquals($number1, $number2, $epsilon = 0.001)"}
{"task_id":"task/44","completion":"\n#if ($upperRest === true)\n#else\n#end\n\nfunction make_half($number)\n\nfunction make_quarter($number)\n\nfunction make_three_quarters($number)\n\nfunction make_one"}
{"task_id":"task/44","completion":"\n$string = strtoupper($string);\nif ($upperRest) {\nreturn $string;\n}\nreturn strtolower($string);\n}\n\n<?php\n$string = \"Hello World\";\necho"}
{"task_id":"task/44","completion":"\n\nfunction decapitalize($string, $upperRest = false)\n\n{\n\nfunction decapitalize($string, $upperRest = false)\n\nfunction decapitalize($string, $upperRest = false)\n\n"}
{"task_id":"task/44","completion":" \n// split $string into words\n// convert to lowercase\n// capitalize the first character of each word\n// return an array of words\n}\n\n$string = \"Hello, this is my first program in PHP.\";\n"}
{"task_id":"task/44","completion":" if ($upperRest) $string = strtoupper($string); $string = str_replace(' ', '', $string);\nreturn $string;\n}\n\nfunction decapitalize_no_upper($string)\n{"}
{"task_id":"task/45","completion":"\n$low = 2;\n$found = true;\nfor ($i = $low; $i < $number; $i++) {\nif ($number % $i == 0) {\n$found = false;\n}\n"}
{"task_id":"task/45","completion":"\n$number % 2 == 0 or return 0;\nfor ($i = 2; $i*$i <= $number; $i++)\n{\nreturn 0;\n}\nreturn 1;\n}\nThe number 1 is not"}
{"task_id":"task/45","completion":"\n}\n\nThe function prototype declares the name of the function and its argument types. A function can take a variable number of arguments, but in this case it takes no arguments at all. The return type is not given; in this case,"}
{"task_id":"task/45","completion":"\n}\n\nTo access a protected function or property from outside the class, the class must be extended or the protected function or property must be defined as static (the static keyword was introduced in PHP 5.3). An example of extending a class"}
{"task_id":"task/45","completion":"\n\n$low_prime = 2;\n\n$high_prime = intval($number / $low_prime);\n\n$number_list = array();\n\nwhile ($number_list[$number] <= $high_"}
{"task_id":"task/46","completion":" foreach ($items as $key => $item) { if ($func($item)) { unset($items[$key]); } } }\n\nIf you are using PHP 7, you can use the new \"void\" return type which"}
{"task_id":"task/46","completion":"\n\n/**\n\n* @param array $items\n\n* @param string $func\n\n* @return array\n\n*/\n\npublic static function safeArrayMap($items, $func)\n$array = is_array($"}
{"task_id":"task/46","completion":" foreach ($items as $item) { $func($item); } }\n{ $a = [1, 2, 3]; remove($a, function($item) { return $item > 2; }); }\n{ $a ="}
{"task_id":"task/46","completion":" foreach ($items as $key => $item) { call_user_func($func, $item); } }\n$items = [1, 2, 3]; $items->remove(function ($item) { return $item >"}
{"task_id":"task/46","completion":" \u00a0\u00a0\u00a0 if(is_array($items)) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 foreach($items as $item) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if($func($item)) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return true; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0\u00a0\u00a0"}
{"task_id":"task/47","completion":" \u00a0\u00a0\u00a0 foreach ($items as $i) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 foreach ($i as $j) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 $items[$i][$j] = deepFlatten($i[$j]); \u00a0\u00a0\u00a0 return $items; \u00a0"}
{"task_id":"task/47","completion":" $result = []; foreach ($items as $item) { if (is_array($item)) { $result[] = deepFlatten($item); } else { $result[] = $item; } } return $result; } $"}
{"task_id":"task/47","completion":"\n</pre>\n\nThe shallowFlatten() function takes a nested associative array and flattens it out into a single level array. The deepFlatten() function takes a nested associative array and returns a multilevel associative array"}
{"task_id":"task/47","completion":" $items = array_filter($items); return array_map('deepFlatten', $items); }\nIf we try to run the following code: $deepFlatten = function($items) { $items = array_filter($items"}
{"task_id":"task/47","completion":" return array_reduce($items, function ($result, $item) use ($items) { return array_combine($result, $item); }, []); }\n$list = [ 1, [ 2, [3, [4"}
{"task_id":"task/48","completion":"\n\nfunction gcd(integer $m, integer $n)\n\nfunction gcd(...$numbers)\n\nfunction gcd(integer $a, integer $b)\n\nfunction gcd(...$numbers)"}
{"task_id":"task/48","completion":"\n\nfunction divisors($number)\n\nfunction sieve($number)\n\nfunction lcm($numbers)\n\nIn the next example, two types of context are used. The codice_17 statement is a control flow"}
{"task_id":"task/48","completion":"\n\nfunction gcd(int $n1, int $n2)\n\nfunction gcd(...)\n\nfunction gcd(int $n1, int $n2)\n\nfunction gcd(...)\n\nThe g"}
{"task_id":"task/48","completion":"\n\nfunction isPrime( $number ) {\n\nfunction isEmirp($number) {\n\nfunction emirp_sum(array $numbers) {\n\nfunction emirp_fast_gcd(array $"}
{"task_id":"task/48","completion":"\ngcd(...$numbers)\n\n}\n\ngcd(...)\n\nPerl does not have a built-in function for determining the greatest common divisor. The function gcd is declared and assigned to a scal"}
