{"task_id":"task/1","completion":"\n  useEffect(() => {\n    window.addEventListener('beforeunload', fn);\n    return () => {\n      window.removeEventListener('beforeunload', fn);\n    };\n  }, [fn]);\n};\n\nexport default useUnload;"}
{"task_id":"task/1","completion":"\n  const unload = function() {\n    if (typeof fn === 'function') {\n      fn();\n    }\n  };\n  window.addEventListener('beforeunload', unload);\n  return unload;\n};\n\nexport default useUnload;"}
{"task_id":"task/1","completion":"\n  if (useCallback) {\n    return useCallback(fn, [])\n  }\n\n  const listener = useRef()\n  listener.current = fn\n\n  useEffect(() => {\n    return () => {\n      window.removeEventListener('beforeunload', listener.current)\n    }\n  }, [])\n\n  useEffect(() => {\n    window.addEventListener('beforeunload', listener.current)\n"}
{"task_id":"task/1","completion":"\n  return useCallback(() => {\n    if (typeof fn === 'function') {\n      fn();\n    }\n  }, [fn]);\n};\n\nconst useDocumentTitle = (title: string) => {\n  const { current: initialTitle } = useRef(document.title);\n  useEffect(() => {\n    document.title = title;\n    return () => {\n      document.title = initialTitle;\n"}
{"task_id":"task/1","completion":"\n    const fnName = Symbol(fn.name);\n    window.addEventListener('beforeunload', ev => {\n        if (typeof fn === 'function') {\n            fn();\n        }\n        if (ev.target === window) {\n            ev.returnValue = true;\n        }\n    });\n    return fnName;\n};\n\nexport default useUnload;"}
{"task_id":"task/2","completion":"\n  const handleClick = (e) => {\n    if (ref.current && !ref.current.contains(e.target)) {\n      callback();\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('click', handleClick);\n\n    return () => {\n      document.removeEventListener('click', handleClick);\n    };\n  });\n};\n\nconst DropdownMenu = ({ children"}
{"task_id":"task/2","completion":"\n  const handleClick = event => {\n    if (ref.current && !ref.current.contains(event.target)) {\n      callback();\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener(\"mousedown\", handleClick);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClick);\n    };\n  });\n};\n\nconst useCheckbox ="}
{"task_id":"task/2","completion":"\n  const handleClick = (e) => {\n    if (ref.current && !ref.current.contains(e.target)) {\n      callback();\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('click', handleClick);\n\n    return () => {\n      document.removeEventListener('click', handleClick);\n    };\n  });\n};\n\nconst useModal = (initial"}
{"task_id":"task/2","completion":"\n    useEffect(() => {\n        const handleClickOutside = (event) => {\n            if (ref.current && !ref.current.contains(event.target)) {\n                callback();\n            }\n        };\n\n        document.addEventListener('mousedown', handleClickOutside);\n        return () => {\n            document.removeEventListener('mousedown', handleClickOutside);\n        };\n    }, [ref, callback"}
{"task_id":"task/2","completion":"\n    const handleClick = (e) => {\n        if (ref.current && !ref.current.contains(e.target)) {\n            callback();\n        }\n    };\n\n    useEffect(() => {\n        document.addEventListener('click', handleClick);\n\n        return () => {\n            document.removeEventListener('click', handleClick);\n        };\n    });\n};\n\nexport default useClickOutside;"}
{"task_id":"task/3","completion":"\n  const [value, setValue] = useState(() => {\n    try {\n      const value = JSON.parse(window.sessionStorage.getItem(keyName));\n      if (value) return value;\n      return defaultValue;\n    } catch (error) {\n      return defaultValue;\n    }\n  });\n\n  const setSessionStorage = value => {\n    window.sessionStorage.setItem(keyName, JSON"}
{"task_id":"task/3","completion":"\n  const storedValue = sessionStorage.getItem(keyName);\n  if (storedValue) {\n    return JSON.parse(storedValue);\n  }\n  return defaultValue;\n};\n\nexport const storeToSessionStorage = (keyName, value) => {\n  if (value) {\n    sessionStorage.setItem(keyName, JSON.stringify(value));\n  }\n};\n\nexport const useM"}
{"task_id":"task/3","completion":"\n  return {\n    setItem: (value) => {\n      window.sessionStorage.setItem(keyName, JSON.stringify(value));\n    },\n    getItem: () => {\n      return JSON.parse(window.sessionStorage.getItem(keyName) || defaultValue);\n    },\n    removeItem: () => {\n      window.sessionStorage.removeItem(keyName);\n    },\n  };\n};"}
{"task_id":"task/3","completion":"\n  const getFromStorage = () => {\n    const item = window.sessionStorage.getItem(keyName);\n    return item ? JSON.parse(item) : defaultValue;\n  };\n\n  const setToStorage = (value) => {\n    window.sessionStorage.setItem(keyName, JSON.stringify(value));\n  };\n\n  return [getFromStorage, setToStorage];\n};\n\nexport default useSession"}
{"task_id":"task/3","completion":"\n  const [value, setValue] = useState(() => {\n    const value = localStorage.getItem(keyName);\n    return value !== null ? JSON.parse(value) : defaultValue;\n  });\n\n  const setValueStorage = (value) => {\n    setValue(value);\n    localStorage.setItem(keyName, JSON.stringify(value));\n  };\n\n  return [value, setValue"}
{"task_id":"task/4","completion":"\n  useEffect(() => {\n    if (title) {\n      document.title = title;\n    }\n  }, [title]);\n};\n\nexport default useTitle;"}
{"task_id":"task/4","completion":"\n  useEffect(() => {\n    document.title = title;\n  }, [title]);\n};\n\nexport default useTitle;"}
{"task_id":"task/4","completion":"\n  const [state, setState] = useState(title);\n  const updateTitle = useCallback(\n    newTitle => {\n      setState(newTitle);\n    },\n    [setState]\n  );\n  return [state, updateTitle];\n};\n\nconst TitleHooks = () => {\n  const [title, updateTitle] = useTitle('Hello Hooks');\n  useEffect(() => {\n    document"}
{"task_id":"task/4","completion":"\n  const [titleState, setTitle] = useState(title);\n  const updateTitle = title => {\n    setTitle(title);\n    document.title = title;\n  };\n  return [titleState, updateTitle];\n};\n\nexport default useTitle;"}
{"task_id":"task/4","completion":"\n  const htmlTitle = useRef(document.title);\n  useEffect(() => {\n    document.title = title;\n    return () => {\n      document.title = htmlTitle.current;\n    };\n  }, [title]);\n};\n\nconst Title = ({ title }) => {\n  useTitle(title);\n  return null;\n};\n\nexport default Title;"}
{"task_id":"task/5","completion":"\n    useEffect(callback, [when]);\n};\n\nexport default useEffectOnce;"}
{"task_id":"task/5","completion":"\n  useEffect(callback, [when]);\n};\n\nexport default useEffectOnce;"}
{"task_id":"task/5","completion":"\n  const ran = useRef(false);\n  useEffect(() => {\n    if (ran.current) return;\n    ran.current = true;\n    return callback();\n  }, when);\n};\n\nconst useMappedState = (mapState, mapActions) => {\n  const store = useContext(context);\n  const state = useCallback(mapState(store.state), [store.state]);\n  const"}
{"task_id":"task/5","completion":"\n  useEffect(callback, [], when);\n};\n\nexport const useToggle = (\n  initialValue = false,\n  defaultValue = initialValue\n) => {\n  const [value, setValue] = useState(defaultValue);\n  const toggle = () => setValue(!value);\n  return [value, toggle];\n};\n\nexport const useLocalStorage = (\n  key,\n  initialValue = null,"}
{"task_id":"task/5","completion":"\n  useEffect(callback, [when]);\n};\n\nexport const useWindowSize = () => {\n  const [windowSize, setWindowSize] = useState({\n    width: window.innerWidth,\n    height: window.innerHeight,\n  });\n\n  useEffectOnce(() => {\n    const handleResize = () => {\n      setWindowSize({\n        width: window.innerWidth,\n        height: window."}
{"task_id":"task/6","completion":"\n  const [collapsed, setCollapsed] = useState(isCollapsed);\n\n  const toggleCollapsed = () => {\n    setCollapsed(!collapsed);\n    handleClick();\n  };\n\n  return (\n    <div className=\"accordion__item\">\n      <button\n        type=\"button\"\n        className=\"accordion__title\"\n        onClick={toggleCollapsed}\n      >\n       "}
{"task_id":"task/6","completion":"\n  const labelClassName = isCollapsed ? 'active' : '';\n  return (\n    <div className=\"accordion__item\">\n      <div className=\"accordion__label\" onClick={handleClick}>\n        <span className={labelClassName}>{label}</span>\n      </div>\n      <div className=\"accordion__content\">{children}</div>\n    </"}
{"task_id":"task/6","completion":"\n  const [isOpen, setIsOpen] = useState(isCollapsed);\n\n  return (\n    <div className=\"AccordionItem\">\n      <div\n        className=\"AccordionItem__label\"\n        onClick={() => {\n          setIsOpen(!isOpen);\n          handleClick(!isOpen);\n        }}\n      >\n        <span>{label}</span>\n        <span"}
{"task_id":"task/6","completion":"\n  const [isExpanded, setIsExpanded] = useState(!isCollapsed);\n\n  const onClick = () => {\n    setIsExpanded(!isExpanded);\n    handleClick(!isExpanded);\n  };\n\n  return (\n    <div className=\"accordion__item\">\n      <h3\n        className=\"accordion__title\"\n        onClick={onClick}\n       "}
{"task_id":"task/6","completion":"\n  const classes = classNames(\n    \"accordion-item\",\n    {\n      \"accordion-item--open\": !isCollapsed,\n      \"accordion-item--closed\": isCollapsed\n    }\n  );\n\n  return (\n    <div className={classes}>\n      <div className=\"accordion-item__header\" onClick={handleClick}>\n        <div className=\""}
{"task_id":"task/7","completion":" typeof window !== 'undefined' ? useEffect : useLayoutEffect;\n\nexport function useEventListener(eventName: string, handler: EventListenerOrEventListenerObject, element: HTMLElement | Window | Document) {\n  useIsomorphicEffect(() => {\n    const eventListener = (event: Event) => handler(event);\n\n    element.addEventListener(eventName, eventListener);\n\n    return () => {\n     "}
{"task_id":"task/7","completion":" typeof window !== 'undefined' ? useEffect : useLayoutEffect;\n\nfunction nodeIsContainedWithin(container, child) {\n  let parent = child.parentNode;\n\n  while (parent !== null) {\n    if (parent === container) {\n      return true;\n    }\n\n    parent = parent.parentNode;\n  }\n\n  return false;\n}\n\nfunction getScrollParent(element) {\n "}
{"task_id":"task/7","completion":" typeof window !== 'undefined' && window.document && window.document.createElement;\n\nfunction useEventCallback<T extends (...args: any[]) => any>(fn: T): T {\n  const ref = useRef<T>();\n\n  useIsomorphicEffect(() => {\n    ref.current = fn;\n  });\n\n  return useCallback(\n    (...args: Parameters<T>) => {\n      return"}
{"task_id":"task/7","completion":" typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;\n\ninterface Props {\n  children: React.ReactNode;\n  isOpen: boolean;\n  onClose: () => void;\n  timeout: number;\n}\n\nconst Toast: React.FC<Props> = ({ children, isOpen, onClose, timeout }) => {\n  const containerRef = React.useRef<HTML"}
{"task_id":"task/7","completion":" typeof window !== 'undefined' ? useEffect : useLayoutEffect;\n\n//\n// https://github.com/gaearon/react-hot-loader/issues/1069\n//\n\nfunction logTypeError(name: string, err: any) {\n  // @ts-ignore\n  console.error(err);\n}\n\n//\n// https://github.com/gaearon/react-hot-loader/issues"}
{"task_id":"task/8","completion":"\n  const [state, setState] = useState(initialState);\n\n  return [state, setState];\n};\n\nexport default useGetSet;"}
{"task_id":"task/8","completion":"\n  const [state, setState] = useState(initialState);\n\n  return [state, setState];\n};\n\nexport default useGetSet;"}
{"task_id":"task/8","completion":"\n  const [state, setState] = useState(initialState);\n\n  return [state, setState];\n};\n\nexport default useGetSet;"}
{"task_id":"task/8","completion":"\n  const [state, setState] = useState(initialState);\n\n  return [state, setState];\n};\n\nexport default useGetSet;"}
{"task_id":"task/8","completion":"\n  const [data, setData] = useState(initialState);\n\n  const getData = useCallback(() => data, [data]);\n\n  const setDataFunc = useCallback(value => setData(value), [setData]);\n\n  return [getData, setDataFunc];\n};\n\nexport default useGetSet;"}
{"task_id":"task/9","completion":"\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return ()"}
{"task_id":"task/9","completion":"\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return ()"}
{"task_id":"task/9","completion":"\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return ()"}
{"task_id":"task/9","completion":"\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return ()"}
{"task_id":"task/9","completion":"\n    const savedCallback = useRef();\n\n    // Remember the latest callback.\n    useEffect(() => {\n        savedCallback.current = callback;\n    }, [callback]);\n\n    // Set up the interval.\n    useEffect(() => {\n        function tick() {\n            savedCallback.current();\n        }\n        if (delay !== null) {\n            let id = setInterval(tick, delay);\n            return ()"}
{"task_id":"task/10","completion":"\n  return (\n    <div className=\"loader\">\n      <div className=\"lds-ring\">\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n      </div>\n    </div>\n  );\n};\n\nexport default Loader;"}
{"task_id":"task/10","completion":"\n  return (\n    <div>\n      <img src={loadingIcon} alt=\"Loading Icon\" className={`loader-${size}`} />\n    </div>\n  );\n};\n\nLoader.propTypes = {\n  size: PropTypes.string\n};\n\nLoader.defaultProps = {\n  size: 'medium'\n};\n\nexport default Loader;"}
{"task_id":"task/10","completion":"\n  return (\n    <div className=\"loadingio-spinner-double-ring-r64jb2mr8s\">\n      <div className=\"ldio-6tp9m3zq3l\">\n        <div></div>\n        <div></div>\n        <div>\n          <div></div>\n        </div>\n        <div>\n          <div></div>\n        </div>\n"}
{"task_id":"task/10","completion":"\n  return (\n    <svg\n      width={size}\n      height={size}\n      viewBox=\"0 0 38 38\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <g stroke=\"none\" strokeWidth=\"1\" fill=\"none\" fillRule=\"evenodd\">\n        <g transform=\"translate(1.000000, 1.000000)\" fill=\"#000000\">\n         "}
{"task_id":"task/10","completion":"\n  return (\n    <LoaderContainer>\n      <LoaderIcon size={size} />\n    </LoaderContainer>\n  );\n};\n\nLoader.propTypes = {\n  size: PropTypes.number,\n};\n\nLoader.defaultProps = {\n  size: 50,\n};\n\nexport default Loader;"}
{"task_id":"task/11","completion":"\n  const handleOnClose = () => {\n    onClose()\n  }\n\n  return (\n    <ModalStyle isVisible={isVisible}>\n      <Container>\n        <Header>\n          <Title>{title}</Title>\n          <Close onClick={handleOnClose}>x</Close>\n        </Header>\n        <Content>{content}</Content>\n        <Footer>{footer"}
{"task_id":"task/11","completion":"\n  const handleClick = (event) => {\n    const target = event.target;\n    if (target === event.currentTarget) {\n      onClose();\n    }\n  };\n\n  return (\n    <ModalContainer isVisible={isVisible} onClick={handleClick}>\n      <ModalInner>\n        <div className=\"modal-header\">\n          <span className=\"modal-title"}
{"task_id":"task/11","completion":"\n  const [isVisibleClassName, setIsVisibleClassName] = useState(\n    isVisible ? 'modal--visible' : ''\n  );\n\n  useEffect(() => {\n    setIsVisibleClassName(isVisible ? 'modal--visible' : '');\n  }, [isVisible]);\n\n  return (\n    <div className={`modal ${isVisibleClassName}`}"}
{"task_id":"task/11","completion":"\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <ModalDialog isVisible={isVisible} onClose={onClose}>\n        <div className={classes.paper}>\n          <div className={classes.header}>\n            <Typography className={classes.title}>{title}</Typography>\n            <IconButton\n              aria"}
{"task_id":"task/11","completion":"\n  const isContentEmpty = content === null || content === undefined;\n  const hasTitle = title !== null && title !== undefined;\n  const hasFooter = footer !== null && footer !== undefined;\n\n  return (\n    <div className={cx('Modal', { 'Modal--visible': isVisible })}>\n      <div className=\"Modal__container\">\n        <div className=\""}
{"task_id":"task/12","completion":"\n  const [entry, setEntry] = useState(null);\n  const observer = useRef(null);\n\n  useEffect(() => {\n    observer.current = new IntersectionObserver(entries => {\n      setEntry(entries[0]);\n    }, options);\n    if (ref.current) {\n      observer.current.observe(ref.current);\n    }\n    return () => {\n      observer"}
{"task_id":"task/12","completion":"\n  const [isIntersecting, setIsIntersecting] = useState(false);\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(entries => {\n      const { isIntersecting } = entries[0];\n      setIsIntersecting(isIntersecting);\n    }, options);\n\n    if (ref.current) {\n      observer.observe(ref.current);\n   "}
{"task_id":"task/12","completion":"\n  const [entry, setEntry] = useState();\n  const [entries, setEntries] = useState();\n  const [{ isIntersecting }, setIsIntersecting] = useState();\n\n  useEffect(() => {\n    const io = new IntersectionObserver(\n      ([entry]) => {\n        setEntry(entry);\n      },\n      options\n    );\n\n    if (ref.current) {"}
{"task_id":"task/12","completion":"\n  const [entry, setEntry] = useState(null);\n  const [isIntersecting, setIsIntersecting] = useState(false);\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        setEntry(entry);\n        setIsIntersecting(entry.isIntersecting);\n      },\n      options\n    );\n\n    observer.obser"}
{"task_id":"task/12","completion":"\n  const [entry, setEntry] = useState(null);\n  const [node, setNode] = useState(null);\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(entries => {\n      if (entries[0].isIntersecting) {\n        setEntry(entries[0]);\n        setNode(ref.current);\n      }\n    }, options);\n\n    if ("}
{"task_id":"task/13","completion":"value, onChange }) => {\n  return (\n    <div className=\"slider\">\n      <SliderTrack>\n        <SliderThumb value={value} onChange={onChange} />\n      </SliderTrack>\n    </div>\n  );\n};\n\nSlider.propTypes = {\n  value: PropTypes.number.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n"}
{"task_id":"task/13","completion":"x, y, size, onClick, onHover, isSelected, label, value, suffix, onChange }) => {\n  const handleClick = (event) => {\n    if (onClick) {\n      onClick(event);\n    }\n  };\n\n  const handleMouseOver = (event) => {\n    if (onHover) {\n      onHover(event);\n    }\n  };\n\n  const handleMouse"}
{"task_id":"task/13","completion":"value, min, max, step, onChange }) => {\n  const [localValue, setLocalValue] = useState(value);\n\n  useEffect(() => {\n    setLocalValue(value);\n  }, [value]);\n\n  const handleChange = (event, newValue) => {\n    setLocalValue(newValue);\n    onChange(newValue);\n  };\n\n  return (\n    <Grid container spacing={2} align"}
{"task_id":"task/13","completion":"getPosition, id, label, value, options, setValue }) => {\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  return (\n    <Card className=\"slider-card\">\n      <Typography variant=\"h5\" component=\"h2\">\n        {label}\n      </Typography>\n      <Slider\n        min={options.min}\n        max={"}
{"task_id":"task/13","completion":"max, onChange, value }) => {\n  const handleChange = (event, newValue) => {\n    onChange(newValue);\n  };\n\n  return (\n    <div>\n      <Slider\n        min={0}\n        max={max}\n        value={value}\n        onChange={handleChange}\n        valueLabelDisplay=\"auto\"\n        marks\n        step={1}\n      />\n    </div>\n"}
{"task_id":"task/14","completion":"\n  const [isToggled, setToggled] = useState(initialState);\n\n  const handleToggle = () => {\n    setToggled(prevState => !prevState);\n  };\n\n  return {\n    isToggled,\n    handleToggle\n  };\n};\n\nexport default useToggler;"}
{"task_id":"task/14","completion":"\n\tconst [isToggled, setToggled] = useState(initialState);\n\n\tconst toggle = () => setToggled(!isToggled);\n\n\treturn [isToggled, toggle];\n};\n\nexport default useToggler;"}
{"task_id":"task/14","completion":"\n  const [isOpen, setIsOpen] = useState(initialState);\n\n  const toggle = () => setIsOpen(!isOpen);\n\n  return { isOpen, toggle };\n};\n\nexport default useToggler;"}
{"task_id":"task/14","completion":"\n  const [state, setState] = useState(initialState);\n\n  const toggler = useCallback(() => {\n    setState(currentState => !currentState);\n  }, []);\n\n  return [state, toggler];\n};\n\nexport default useToggler;"}
{"task_id":"task/14","completion":"\n  const [isToggled, setToggled] = useState(initialState);\n\n  const toggle = () => setToggled(!isToggled);\n\n  return [isToggled, toggle];\n};\n\nexport default useToggler;"}
{"task_id":"task/15","completion":"\n  const [hover, setHover] = useState(false);\n  const onMouseOver = () => setHover(true);\n  const onMouseOut = () => setHover(false);\n  return { hover, onMouseOver, onMouseOut };\n};\n\nconst useAnimation = (duration = 1000) => {\n  const [isAnimated, setAnimated] = useState(false);\n  const animationStyles"}
{"task_id":"task/15","completion":"\n  const [hover, setHover] = useState(false);\n  const ref = useRef(null);\n\n  useEffect(() => {\n    function handleMouseOver() {\n      setHover(true);\n    }\n\n    function handleMouseOut() {\n      setHover(false);\n    }\n\n    ref.current.addEventListener('mouseover', handleMouseOver);\n    ref.current.addEventListener('"}
{"task_id":"task/15","completion":"\n  const [hovered, setHovered] = useState(false);\n\n  const onMouseEnter = () => setHovered(true);\n  const onMouseLeave = () => setHovered(false);\n\n  return {\n    hovered,\n    onMouseEnter,\n    onMouseLeave,\n  };\n};\n\nexport default useHover;"}
{"task_id":"task/15","completion":"\n  const [hovered, setHovered] = useState(false);\n  const toggleHover = () => setHovered(!hovered);\n  return { hovered, toggleHover };\n};\n\nexport default useHover;"}
{"task_id":"task/15","completion":"\n  const [isHovering, setIsHovering] = useState(false);\n  const ref = useRef(null);\n\n  const handleMouseOver = () => {\n    setIsHovering(true);\n  };\n\n  const handleMouseOut = () => {\n    setIsHovering(false);\n  };\n\n  useEffect(() => {\n    const node = ref.current;\n    if (node"}
{"task_id":"task/16","completion":"\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n};\n\nexport const useLocalStorage = (\n  key,\n  initialValue,\n  type = 'value',\n  isServer = false\n) => {\n  const [storedValue, setStoredValue] = useState(() => {\n    if (isServer) {"}
{"task_id":"task/16","completion":"\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n};\n\nconst App: React.FC = () => {\n  const state = useGlobalState();\n  const prevState = usePrevious(state);\n  const updateContent = useCallback(\n    (result: IContent, idx: number) => {\n      const content = [..."}
{"task_id":"task/16","completion":"\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n};\n\nexport const usePortal = name => {\n  const [isOpen, setIsOpen] = useState(false);\n  const previousName = usePrevious(name);\n  const [state, dispatch] = useReducer(reducer, null);\n\n  useEffect(()"}
{"task_id":"task/16","completion":"\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n};\n\nexport default usePrevious;"}
{"task_id":"task/16","completion":"\n    const ref = useRef();\n    useEffect(() => {\n        ref.current = value;\n    });\n    return ref.current;\n};\n\nconst useSearchState = (initialValue) => {\n    const [search, setSearch] = useState(initialValue);\n    const prevSearch = usePrevious(search);\n\n    useEffect(() => {\n        if (prevSearch !== search) {\n            onSearch"}
{"task_id":"task/17","completion":"\n    const mql = window.matchMedia(query);\n    let hasMatch = mql.matches;\n    if (hasMatch) {\n        return whenTrue;\n    } else {\n        return whenFalse;\n    }\n};\n\nexport const useScreenWidth = () => {\n    const [width, setWidth] = useState(useMediaQuery('(min-width: 500px)', 500, 320));\n    use"}
{"task_id":"task/17","completion":"\n    const mediaQueryList = window.matchMedia(query);\n    let currentValue = null;\n    const onQueryChange = (event) => {\n        if (event.matches) {\n            currentValue = whenTrue;\n        } else {\n            currentValue = whenFalse;\n        }\n    };\n    onQueryChange(mediaQueryList);\n    return [currentValue, onQueryChange];\n};\n\nexport default use"}
{"task_id":"task/17","completion":"\n  const [matches, setMatches] = useState(\n    window.matchMedia(query).matches\n  );\n\n  useEffect(() => {\n    const handler = e => setMatches(e.matches);\n    window.matchMedia(query).addListener(handler);\n    return () => window.matchMedia(query).removeListener(handler);\n  }, [query]);\n\n  return matches ? whenTrue : when"}
{"task_id":"task/17","completion":"\n  return useContext(MediaQueryContext) === query ? whenTrue : whenFalse;\n};\n\nconst useMediaQueryWithContext = (query, whenTrue, whenFalse) => {\n  return useContext(MediaQueryContext) === query ? whenTrue : whenFalse;\n};\n\nexport { useMediaQuery, useMediaQueryWithContext };"}
{"task_id":"task/17","completion":"\n    const mediaQuery = window.matchMedia(query);\n    if (mediaQuery.matches) {\n        return whenTrue;\n    } else {\n        return whenFalse;\n    }\n};\n\nexport default useMediaQuery;"}
{"task_id":"task/18","completion":"\n  const [state, setState] = useState(() =>\n    initialState === undefined ? defaultState : initialState\n  );\n\n  return [state, setState];\n};\n\nexport default useDefault;"}
{"task_id":"task/18","completion":"\n    const initialStateIsUndefined = typeof initialState === 'undefined';\n    const isInitialStateDefault = initialState === defaultState;\n    if (initialStateIsUndefined || isInitialStateDefault) {\n        return defaultState;\n    }\n    return initialState;\n};\nconst createReducer = (reducers, defaultState) => (state, action) => {\n    if (typeof reducers === 'function')"}
{"task_id":"task/18","completion":"\n    const [state, setState] = useState(() =>\n        initialState === undefined ? defaultState : initialState\n    );\n\n    return [state, setState];\n};\n\nexport default useDefault;"}
{"task_id":"task/18","completion":"\n  return (\n    initialState === undefined ? defaultState : initialState\n  );\n};\n\nconst useCallbackCondition = (callback, condition) => {\n  return useMemo(() => condition ? callback : null, [condition]);\n};\n\nconst useForceUpdate = () => {\n  const [, setTick] = useState(0);\n  const update = useCallback(() => setTick(tick => tick + 1"}
{"task_id":"task/18","completion":"\n  return Object.keys(defaultState).reduce((acc, key) => {\n    if (initialState[key] === undefined) {\n      acc[key] = defaultState[key];\n    } else {\n      acc[key] = initialState[key];\n    }\n    return acc;\n  }, {});\n};\n\nexport default useDefault;"}
{"task_id":"task/19","completion":"\n  const [input, setInput] = useState('');\n  const [isTagsListOpen, setIsTagsListOpen] = useState(false);\n  const [filteredTags, setFilteredTags] = useState(tags);\n\n  const searchTags = () => {\n    const searchedTags = tags.filter(tag => tag.toLowerCase().includes(input.toLowerCase()));\n    setFilteredTags(se"}
{"task_id":"task/19","completion":"\n  const [input, setInput] = useState('');\n  const [tagInput, setTagInput] = useState([]);\n\n  const handleChange = (e) => {\n    const { value } = e.target;\n    setInput(value);\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      add"}
{"task_id":"task/19","completion":"\n  const [text, setText] = useState('');\n  const [tagsArr, setTagsArr] = useState(tags);\n\n  const handleTextChange = event => {\n    setText(event.target.value);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (text) {\n      setTagsArr([...tagsArr, text]);\n      set"}
{"task_id":"task/19","completion":"\n  const [tag, setTag] = useState('');\n  const [tagList, setTagList] = useState(tags);\n\n  const handleTag = (event) => {\n    setTag(event.target.value);\n  };\n\n  const handleAddTag = () => {\n    if (tag.length > 0) {\n      setTagList([...tagList, tag]);\n      setTag('');\n   "}
{"task_id":"task/19","completion":"\n  const [ inputValue, setInputValue ] = useState('');\n  const [ active, setActive ] = useState(false);\n  const [ filteredTags, setFilteredTags ] = useState(tags);\n  const [ focus, setFocus ] = useState(false);\n\n  const [ selectedTags, setSelectedTags ] = useState([]);\n\n  const inputRef = useRef(null);\n\n  useEffect("}
{"task_id":"task/20","completion":"\n  const handleChange = (e) => {\n    onChange(e.target.value);\n  };\n\n  return (\n    <div className=\"multiselect-checkbox\">\n      {options.map((option) => (\n        <FormControlLabel\n          key={option.value}\n          control={\n            <Checkbox\n              value={option.value}\n              onChange={handleChange}\n              color=\"primary\""}
{"task_id":"task/20","completion":"\n  const items = options.map(o => ({\n    label: o.label,\n    value: o.value,\n    selected: o.selected,\n  }));\n\n  const handleSelect = (item, selected) => {\n    onChange(item.value, selected);\n  };\n\n  return (\n    <Checkbox.Group\n      className=\"multiselect-checkbox\"\n      onChange={handleSelect}\n"}
{"task_id":"task/20","completion":"\n  const [allSelected, setAllSelected] = useState(false);\n  const onClick = () => {\n    setAllSelected(!allSelected);\n    onChange(allSelected);\n  };\n\n  return (\n    <div className=\"multiselect-checkbox\">\n      <input\n        type=\"checkbox\"\n        checked={allSelected}\n        onChange={onClick}\n       "}
{"task_id":"task/20","completion":"\n  const handleChange = event => {\n    onChange(event.target.value);\n  };\n\n  return (\n    <CheckboxGroup\n      name=\"form-field-name\"\n      value={options}\n      onChange={handleChange}\n    >\n      {options.map(option => (\n        <FormControlLabel\n          value={option}\n          control={<Checkbox color=\"primary\" />}\n          label={"}
{"task_id":"task/20","completion":"\n  const [checked, setChecked] = useState({});\n\n  const onCheck = (value, checked) => {\n    setChecked({ ...checked });\n    onChange(value, checked);\n  };\n\n  return (\n    <div className=\"checkbox-group\">\n      {options.map(({ label, value }) => (\n        <div className=\"checkbox-group__item\" key={value}>\n"}
{"task_id":"task/21","completion":"\n  const renderRows = () => {\n    return data.map((item, index) => {\n      return (\n        <li className=\"data-list__item\" key={`${item}_${index}`}>\n          {item}\n        </li>\n      );\n    });\n  };\n\n  return (\n    <ul className={`data-list ${isOrdered ? 'data-list--ordered'"}
{"task_id":"task/21","completion":"\n  return (\n    <div className=\"datalist\">\n      {data.map((item, i) => (\n        <div key={i} className=\"datalist-item\">\n          <div className=\"datalist-item-text\">\n            {isOrdered ? (\n              <OrderItem data={item} />\n            ) : (\n              <Item data={item} />\n            )}\n          </"}
{"task_id":"task/21","completion":"\n  const dataList = data.map((dataRow, index) => {\n    const className = index === 0 ? 'DataList_DataRow_First' : '';\n    const isOrderedData =\n      dataRow.orderedData && dataRow.orderedData.length > 0;\n    const data = isOrderedData ? dataRow.orderedData : dataRow.unorderedData;\n    return (\n      <li key={data"}
{"task_id":"task/21","completion":"\n  const ordered = <ol>{data.map(DataListItem)}</ol>;\n  const unordered = <ul>{data.map(DataListItem)}</ul>;\n\n  return isOrdered ? ordered : unordered;\n};\n\nexport default DataList;"}
{"task_id":"task/21","completion":"\n  const renderHeader = isOrdered ? <OrderedListHeader /> : <ListHeader />;\n  const renderItem = isOrdered ? <OrderedListItem /> : <ListItem />;\n\n  return (\n    <ul className=\"list\">\n      {renderHeader}\n      {data.map((item, index) => (\n        <li key={index}>{renderItem(item)}</li>\n      ))}\n"}
{"task_id":"task/22","completion":"\n  const [currentIdx, setCurrentIdx] = useState(0);\n  const [translateValue, setTranslateValue] = useState(0);\n  const { width } = useWindowDimensions();\n\n  useEffect(() => {\n    setTranslateValue(width * currentIdx);\n  }, [currentIdx, width]);\n\n  const nextSlide = () => {\n    if (currentIdx ==="}
{"task_id":"task/22","completion":"\n  const { t } = useTranslation();\n  const classes = useStyles();\n  const [carouselIndex, setCarouselIndex] = useState(0);\n  const [carouselTranslateValue, setCarouselTranslateValue] = useState(0);\n  const [animationValue, setAnimationValue] = useState(new Animated.Value(0));\n\n  const renderCarouselItems = () => {\n    return car"}
{"task_id":"task/22","completion":"\n  const [currentSlide, setCurrentSlide] = useState(0);\n  const [slideWidth, setSlideWidth] = useState(0);\n  const [slideHeight, setSlideHeight] = useState(0);\n  const [visibleSlides, setVisibleSlides] = useState(3);\n  const { width, height } = useViewport();\n  const { theme } = useTheme"}
{"task_id":"task/22","completion":"\n  const renderItems = carouselItems.map((item, index) => {\n    return (\n      <CarouselItem key={index} {...item} {...rest}>\n        {item.children}\n      </CarouselItem>\n    );\n  });\n\n  return <CarouselWrapper {...rest}>{renderItems}</CarouselWrapper>;\n};\n\nCarousel.propTypes = {\n  car"}
{"task_id":"task/22","completion":"\n  const settings = {\n    dots: true,\n    speed: 500,\n    slidesToShow: 1,\n    slidesToScroll: 1,\n    autoplay: true,\n    autoplaySpeed: 5000,\n    ...rest,\n  };\n\n  return (\n    <CarouselContainer>\n      <Slider {...settings}>\n        {carouselItems.map((item) => (\n          <div key={item."}
{"task_id":"task/23","completion":"\n  const [state, setState] = useState(initialState);\n\n  const setMergeState = (newState) => {\n    const updateState = (s, n) => ({ ...s, ...n });\n    setState((prevState) => updateState(prevState, newState));\n  };\n\n  return [state, setMergeState];\n};\n\nexport default useMergeState;"}
{"task_id":"task/23","completion":"\n  const [state, setState] = useState(initialState);\n  const stateMerge = useCallback((newState) => {\n    setState((prevState) => {\n      return { ...prevState, ...newState };\n    });\n  }, []);\n  return [state, stateMerge];\n};\n\nexport default useMergeState;"}
{"task_id":"task/23","completion":"\n  const [state, setState] = useState(initialState);\n  const setMergeState = (newState) => {\n    setState({ ...state, ...newState });\n  };\n  return [state, setMergeState];\n};\n\nconst useSyncState = (initialState = {}) => {\n  const [state, setState] = useState(initialState);\n  const setSyncState = (newState"}
{"task_id":"task/23","completion":"\n  const mergeRef = useRef(initialState);\n  return useMemo(() => [mergeRef.current, mergeRef.current.set, mergeRef.current.delete], [initialState]);\n};\n\nexport default useMergeState;"}
{"task_id":"task/23","completion":"\n  const [state, setState] = useState(initialState);\n\n  const setValue = (key, value) => {\n    setState({\n      ...state,\n      [key]: value,\n    });\n  };\n\n  return [state, setValue];\n};\n\nexport default useMergeState;"}
{"task_id":"task/24","completion":"\n  const [state, setState] = useState({\n    loading: false,\n    data: null,\n    error: null,\n  });\n\n  useEffect(() => {\n    async function load() {\n      setState({\n        loading: true,\n        data: null,\n        error: null,\n      });\n\n      try {\n        const result = await fn();\n        setState({\n          loading: false,\n"}
{"task_id":"task/24","completion":"\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [result, setResult] = useState(null);\n\n  useEffect(() => {\n    async function doFetch() {\n      setLoading(true);\n      try {\n        const result = await fn();\n        setResult(result);\n      } catch (error) {\n        set"}
{"task_id":"task/24","completion":"\n  const wrapper = useCallback(async (...args) => {\n    await fn(...args);\n  }, []);\n  return wrapper;\n};\n\nexport default useAsync;"}
{"task_id":"task/24","completion":"\n  return () => {\n    const controller = new AbortController();\n    const [value, error] = useAsyncError(fn, controller.signal);\n    const abort = () => controller.abort();\n    return { value, error, abort };\n  };\n};\n\nexport const useAsyncWithAbort = (fn, ctx) => {\n  const controller = new AbortController();\n  const [value, error]"}
{"task_id":"task/24","completion":"\n  const [state, setState] = useState(INITIAL_STATE);\n\n  const execute = async () => {\n    setState(PENDING_STATE);\n    try {\n      const result = await fn();\n      setState({\n        data: result,\n        isValid: true,\n      });\n    } catch (error) {\n      setState({\n        error,\n        isValid: false,\n      });"}
{"task_id":"task/25","completion":"\n  useEffect(() => {\n    const scrollHandler = () => {\n      const scrollTop = document.documentElement.scrollTop || document.body.scrollTop;\n      const height = document.documentElement.scrollHeight || document.body.scrollHeight;\n      const offset = window.innerHeight;\n      if (scrollTop + offset >= height) {\n        document.body.style.overflow = 'hidden';\n      } else {"}
{"task_id":"task/25","completion":"\n  const [isLocked, setIsLocked] = useState(false);\n\n  const onScrollHandler = useCallback(() => {\n    setIsLocked(window.scrollY > 0);\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('scroll', onScrollHandler);\n\n    return () => {\n      window.removeEventListener('scroll', onScrollHandler);\n    };\n  },"}
{"task_id":"task/25","completion":"\n  const [ref, setRef] = useState<HTMLDivElement | null>(null);\n  const [isFixed, setIsFixed] = useState(false);\n\n  const elRef = useCallback((node: HTMLDivElement) => {\n    if (node !== null) {\n      setRef(node);\n    }\n  }, []);\n\n  const handleScroll = useCallback(() => {\n    if (ref && ref"}
{"task_id":"task/25","completion":"\n    const html = document.querySelector('html');\n    const body = document.querySelector('body');\n    const lock = () => {\n        html.style.overflow = 'hidden';\n        body.style.overflow = 'hidden';\n    };\n    const unlock = () => {\n        html.style.overflow = '';\n        body.style.overflow = '';\n    };\n    return {\n"}
{"task_id":"task/25","completion":"\n  return {\n    bind: {\n      style: {\n        position: 'fixed',\n        width: '100%',\n        height: '100%',\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n        margin: 0,\n        padding: 0,\n        zIndex: 1001,\n        overflow: 'hidden',\n        WebkitOverflowScrolling: 'touch"}
{"task_id":"task/26","completion":"\n  const [values, setValues] = useState(initialValues);\n\n  const handleInputChange = ({ target: { name, value } }) => {\n    setValues({ ...values, [name]: value });\n  };\n\n  const handleSubmit = event => {\n    if (event) event.preventDefault();\n  };\n\n  return {\n    values,\n    handleInputChange,\n    handleSubmit\n  };\n};\n\n"}
{"task_id":"task/26","completion":"\n  const [values, setValues] = useState(initialValues);\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    setValues({ ...values, [name]: value });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(values);\n  };\n\n  return {\n    handleChange,\n    handleSubmit,\n    values"}
{"task_id":"task/26","completion":"\n  const [values, setValues] = useState(initialValues);\n\n  const handleInputChange = e => {\n    setValues({\n      ...values,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(values);\n  };\n\n  return {\n    handleInputChange,\n    handleSubmit,"}
{"task_id":"task/26","completion":"\n  const [values, setValues] = useState(initialValues);\n\n  const handleChange = e => {\n    setValues({\n      ...values,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    alert(JSON.stringify(values, null, 2));\n  };\n\n  return {\n    handleChange,"}
{"task_id":"task/26","completion":"\n  const [formState, setFormState] = useState(initialValues);\n\n  const handleInputChange = (event) => {\n    event.persist();\n    setFormState(state => ({\n      ...state,\n      [event.target.name]: event.target.value,\n    }));\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    setFormState(initial"}
{"task_id":"task/27","completion":"\n  const portalRef = useRef(null);\n  useEffect(() => {\n    portalRef.current = document.createElement('div');\n    document.body.appendChild(portalRef.current);\n    return () => {\n      document.body.removeChild(portalRef.current);\n    };\n  }, []);\n  useEffect(() => {\n    if (portalRef.current) {\n      portal"}
{"task_id":"task/27","completion":"\n\tconst [target, setTarget] = useState(null);\n\tconst [container] = useState(document.createElement(\"div\"));\n\n\tuseEffect(() => {\n\t\tconst { current } = el;\n\t\tsetTarget(current);\n\t}, [el]);\n\n\tuseEffect(() => {\n\t\tconst { current } = target;\n\t\tcurrent.appendChild(container);\n\t\treturn () =>"}
{"task_id":"task/27","completion":"\n  const [portal, setPortal] = useState(null);\n  const [modal, setModal] = useState(false);\n\n  useEffect(() => {\n    const mountNode = document.getElementById(el);\n    if (mountNode) {\n      setPortal(mountNode);\n    }\n  }, [el]);\n\n  return [portal, setModal];\n};\n\nexport default"}
{"task_id":"task/27","completion":"\n  const [portal, setPortal] = useState(false);\n  const togglePortal = () => setPortal(!portal);\n  const portalRoot = usePortalRoot();\n\n  if (portalRoot) {\n    return createPortal(\n      <PortalContext.Provider value={{ portal, togglePortal }}>\n        {el}\n      </PortalContext.Provider>,\n      portalRoot\n   "}
{"task_id":"task/27","completion":"\n  const existing = useRef(document.querySelector(el));\n  const [portal] = useState(document.createElement('div'));\n\n  useEffect(() => {\n    if (existing.current) {\n      existing.current.parentNode.removeChild(existing.current);\n    }\n    document.body.appendChild(portal);\n    return () => {\n      portal.remove();\n    };\n"}
{"task_id":"task/28","completion":"\n  const [anchorRef, isOpen] = useToggle(false);\n  const linkProps = {\n    ...(href || (email && `mailto:${email}`)),\n    ...(onClick && { onClick }),\n    ...(target && { target }),\n    ...(rel && { rel }),\n    ...(tabIndex === undefined ? { tabIndex: '-1' } : { tabIndex }"}
{"task_id":"task/28","completion":"\n  const qs = [];\n  if (subject) qs.push(`subject=${encodeURIComponent(subject)}`);\n  if (body) qs.push(`body=${encodeURIComponent(body)}`);\n  return (\n    <a href={`mailto:${email}?${qs.join('&')}`}>\n      {children}\n    </a>\n"}
{"task_id":"task/28","completion":"\n  return (\n    <a\n      href={`mailto:${email}?subject=${subject}&body=${body}`}\n      onClick={() => trackEvent('clicked_email', { subject, body })}\n    >\n      {children}\n    </a>\n  )\n}\n\nexport default Mailto"}
{"task_id":"task/28","completion":"\n  const href = `mailto:${email}?subject=${subject}&body=${body}`;\n  return (\n    <a\n      href={href}\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n      className=\"mailto-link\"\n    >\n      {children}\n    </a>\n  );\n};\n\nMailto.propTypes = {\n  email"}
{"task_id":"task/28","completion":"\n  const href = `mailto:${email}?subject=${subject}&body=${body}`;\n  return (\n    <a\n      className=\"mailto\"\n      href={href}\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      {children}\n    </a>\n  );\n};\n\nexport default Mailto;"}
{"task_id":"task/29","completion":"\n  const listener = event => {\n    if (event.key === targetKey) {\n      // console.log(targetKey);\n      return false;\n    }\n  };\n  useEffect(() => {\n    window.addEventListener(\"keydown\", listener);\n    return () => {\n      window.removeEventListener(\"keydown\", listener);\n    };\n  });\n};\n\nexport default useKeyPress;"}
{"task_id":"task/29","completion":"\n  const [keyPressed, setKeyPressed] = useState(false);\n\n  const downHandler = ({ key }) => {\n    if (key === targetKey) {\n      setKeyPressed(true);\n    }\n  };\n\n  const upHandler = ({ key }) => {\n    if (key === targetKey) {\n      setKeyPressed(false);\n    }\n  };\n\n  useEffect(() => {"}
{"task_id":"task/29","completion":"\n\tconst [keyPressed, setKeyPressed] = useState(false);\n\n\tconst downHandler = ({ key }) => {\n\t\tif (key === targetKey) {\n\t\t\tsetKeyPressed(true);\n\t\t}\n\t};\n\n\tconst upHandler = ({ key }) => {\n\t\tif (key === targetKey) {\n\t\t\tsetKeyPressed(false);\n\t\t}\n\t};"}
{"task_id":"task/29","completion":"\n  // State for keeping track of whether key is pressed\n  const [keyPressed, setKeyPressed] = useState(false);\n\n  // If pressed key is our target key then set to true\n  function downHandler({ key }) {\n    if (key === targetKey) {\n      setKeyPressed(true);\n    }\n  }\n\n  // If released key is our target key then set to false\n  const upHandler ="}
{"task_id":"task/29","completion":"\n  const [keyPressed, setKeyPressed] = useState(false);\n\n  const downHandler = ({ key }) => {\n    if (key === targetKey) {\n      setKeyPressed(true);\n    }\n  };\n\n  const upHandler = ({ key }) => {\n    if (key === targetKey) {\n      setKeyPressed(false);\n    }\n  };\n\n  useEffect(() => {"}
{"task_id":"task/30","completion":"\n  const [countDown, setCountDown] = useState({ hours, minutes, seconds });\n  const [timeOut, setTimeOut] = useState(false);\n\n  useEffect(() => {\n    if (hours > 0 || minutes > 0 || seconds > 0) {\n      let interval = setInterval(() => {\n        setCountDown(prevCountDown => {\n          const newCountDown = { ...prevCountDown };"}
{"task_id":"task/30","completion":"\n  const [timeLeft, setTimeLeft] = useState(0);\n\n  useEffect(() => {\n    setTimeLeft(hours * 3600 + minutes * 60 + seconds);\n  }, [hours, minutes, seconds]);\n\n  useEffect(() => {\n    const timerId = setInterval(() => {\n      setTimeLeft(t => t - 1);\n    }, 1000);\n\n    return () => clearInterval("}
{"task_id":"task/30","completion":"\n  return (\n    <div className=\"countdown-container\">\n      <div className=\"countdown-item\">\n        <span className=\"countdown-value\">{hours}</span>\n        <span className=\"countdown-label\">Hours</span>\n      </div>\n      <div className=\"countdown-item\">\n        <span className=\"countdown-value\">{minutes}</span>\n"}
{"task_id":"task/30","completion":"\n  const [timeLeft, setTimeLeft] = useState(\n    (hours * 3600) + (minutes * 60) + seconds\n  );\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setTimeLeft(timeLeft - 1);\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, [timeLeft]);\n\n  const time = timeLeft => {\n"}
{"task_id":"task/30","completion":"\n  return (\n    <div className=\"CountDown\">\n      <div className=\"CountDown__days\">{`${hours} : ${minutes} : ${seconds}`}</div>\n    </div>\n  );\n};\n\nexport default CountDown;"}
{"task_id":"task/31","completion":"\n  const [isShown, setIsShown] = useState(isDefaultShown);\n  const classes = useStyles();\n\n  useEffect(() => {\n    if (isDefaultShown) {\n      setTimeout(() => {\n        setIsShown(false);\n      }, timeout);\n    }\n  }, [isDefaultShown, timeout]);\n\n  return (\n    <Snackbar\n      classes="}
{"task_id":"task/31","completion":"\n  const [isShown, setIsShown] = useState(isDefaultShown);\n  const [startTime, setStartTime] = useState(Date.now());\n  const [transitionTime, setTransitionTime] = useState(0);\n\n  useEffect(() => {\n    if (isDefaultShown) {\n      setIsShown(true);\n      setStartTime(Date.now());\n     "}
{"task_id":"task/31","completion":"\n  const [isAlertShown, setIsAlertShown] = useState(isDefaultShown);\n  const [isClosing, setIsClosing] = useState(false);\n\n  const onClose = () => {\n    setIsAlertShown(false);\n    setIsClosing(true);\n    setTimeout(() => {\n      setIsClosing(false);\n    }, timeout);\n  };\n\n  use"}
{"task_id":"task/31","completion":"\n  const [show, setShow] = useState(isDefaultShown);\n  const [isClosing, setIsClosing] = useState(false);\n\n  const handleClose = () => {\n    setIsClosing(true);\n    setTimeout(() => {\n      setShow(false);\n      setIsClosing(false);\n    }, timeout);\n  };\n\n  const closeAlert = () => {\n    set"}
{"task_id":"task/31","completion":"\n  const [visible, setVisible] = useState(isDefaultShown);\n  const [timer, setTimer] = useState(null);\n\n  const handleClose = () => {\n    setVisible(false);\n    setTimer(null);\n  };\n\n  useEffect(() => {\n    if (isDefaultShown) {\n      setVisible(true);\n      setTimer(\n        setTimeout(() =>"}
{"task_id":"task/32","completion":"\n  return window.location.hash.split('#')[1];\n};\n\nconst useQuery = () => {\n  return window.location.search.split('?')[1];\n};\n\nconst appendToURL = (query, hash) => {\n  const newURL = `${window.location.origin}${window.location.pathname}?${query}#${hash}`;\n  window.history.pushState({"}
{"task_id":"task/32","completion":"\n  const [path, setPath] = useState('');\n  const location = useLocation();\n\n  useEffect(() => {\n    setPath(location.hash.slice(1));\n  }, [location]);\n\n  return path;\n};\n\nexport default useHash;"}
{"task_id":"task/32","completion":"\n  const [href, setHref] = useState(location.href);\n  const [hash, setHash] = useState(location.hash);\n\n  useEffect(() => {\n    const handlePopState = () => {\n      setHref(location.href);\n      setHash(location.hash);\n    };\n\n    window.addEventListener('popstate', handlePopState);\n\n    return () => {\n      window"}
{"task_id":"task/32","completion":"\n  return useMountedState().hash;\n};\n\nexport default useHash;"}
{"task_id":"task/32","completion":"\n  const [hash, setHash] = useState(window.location.hash);\n  useEffect(() => {\n    window.addEventListener('hashchange', () => {\n      setHash(window.location.hash);\n    });\n    return () => {\n      window.removeEventListener('hashchange', () => {\n        setHash(window.location.hash);\n      });\n    };\n  }, []);\n "}
{"task_id":"task/33","completion":"\n  const [value, setValue] = useState(initialState);\n  const [delayedValue, setDelayedValue] = useState(initialState);\n\n  useEffect(() => {\n    if (condition(value)) {\n      setDelayedValue(value);\n    }\n  }, [value]);\n\n  useEffect(() => {\n    if (condition(delayedValue)) {\n      setValue(delayedValue);"}
{"task_id":"task/33","completion":"\n  const [state, setState] = useState(initialState);\n  const [isTrue, setIsTrue] = useState(false);\n\n  useEffect(() => {\n    if (condition) {\n      setIsTrue(true);\n    }\n  }, [condition]);\n\n  useEffect(() => {\n    if (isTrue) {\n      setState(initialState);\n      setIsTrue(false);\n   "}
{"task_id":"task/33","completion":"\n  const [state, setState] = useState(initialState);\n  const [delayedState, setDelayedState] = useState(initialState);\n\n  useEffect(() => {\n    if (condition) {\n      setDelayedState(state);\n    }\n  }, [state, condition]);\n\n  useEffect(() => {\n    setState(delayedState);\n  }, [delayedState]);\n\n  return"}
{"task_id":"task/33","completion":"\n  const [delayedState, setDelayedState] = useState(initialState);\n  const [delayed, setDelayed] = useState(false);\n\n  useEffect(() => {\n    if (condition) {\n      setDelayed(true);\n    }\n  }, [condition]);\n\n  useEffect(() => {\n    if (delayed) {\n      setDelayedState(initialState);\n    }\n"}
{"task_id":"task/33","completion":"\n  const [delayedState, setDelayedState] = useState(initialState);\n  const [delayTimer, setDelayTimer] = useState(null);\n\n  useEffect(() => {\n    return () => {\n      clearTimeout(delayTimer);\n    };\n  }, [delayTimer]);\n\n  const onChange = (value) => {\n    clearTimeout(delayTimer);\n    setDelayedState(value);\n"}
{"task_id":"task/34","completion":"\n\tconst [value, setValue] = useState(getSearchParam(param) || '');\n\tconst onChange = event => {\n\t\tsetValue(event.target.value);\n\t\tsetSearchParam(param, event.target.value);\n\t};\n\treturn [value, onChange];\n};\n\nexport default useSearchParam;"}
{"task_id":"task/34","completion":"\n    const [query, setQuery] = useState(param || \"\");\n    const [results, setResults] = useState([]);\n    const [isFetching, setIsFetching] = useState(false);\n\n    const search = useCallback(async query => {\n        setIsFetching(true);\n        setResults([]);\n        const { results } = await getUsers(query);\n        set"}
{"task_id":"task/34","completion":"\n  const [value, setValue] = useState('');\n  const [query, setQuery] = useState(window.location.search);\n\n  useEffect(() => {\n    if (query) {\n      const q = query.slice(1).split('&');\n      const queryObj = q.reduce((a, b) => {\n        const c = b.split('=');\n        a[c[0"}
{"task_id":"task/34","completion":"\n  const [paramValue, setParamValue] = useState('');\n  const [searchValue, setSearchValue] = useState('');\n\n  const handleSearchValue = e => {\n    const value = e.target.value;\n    setSearchValue(value);\n    if (param === 'keyword') {\n      searchByKeyword(value);\n    } else if (param === 'tags') {\n      searchBy"}
{"task_id":"task/34","completion":"\n  const [value, setValue] = useState('');\n  const [state, setState] = useState({});\n\n  const [getParam, setParam] = useState(() => {\n    const rawParam = window.location.search;\n    if (rawParam) {\n      const queryString = decodeURIComponent(rawParam);\n      const query = queryString.substring(1).split('&');\n"}
{"task_id":"task/35","completion":"\n  const [update, { loading, error }] = useMutation(Mutation.UPDATE_USER);\n  const updateHandler = useCallback(\n    (values: FormData) => {\n      update({\n        variables: {\n          input: {\n            id: values.id,\n            name: values.name,\n            password: values.password,\n            email: values.email,\n            role: values.role,\n         "}
{"task_id":"task/35","completion":"\n  const [, update] = useReducer(reducer, initialState);\n  return update;\n};\n\nexport default useUpdate;"}
{"task_id":"task/35","completion":"\n  const [, forceUpdate] = useState(0);\n  return () => forceUpdate(Math.random());\n};\n\nconst useUpdate2 = () => {\n  const [, forceUpdate] = useState(0);\n  return () => forceUpdate(Math.random());\n};\n\nexport const InitPage = () => {\n  useUpdate();\n  useUpdate2();\n  return (\n    <>\n      <p"}
{"task_id":"task/35","completion":"\n  const [isLoading, setIsLoading] = useState(false);\n  const [isSuccess, setIsSuccess] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [user, setUser] = useState(null);\n\n  const updateUser = async (userId, firstName, lastName, phone, imageUrl) => {\n    setIsLoading(true);\n"}
{"task_id":"task/35","completion":"\n    const state = useRef({\n        selected: 0,\n        data: []\n    })\n    const {selected, data} = state.current\n\n    const [onUpdate, setData] = useState(() => {\n        return {\n            selected: 0,\n            data: []\n        }\n    })\n\n    // \u8bbe\u7f6e\u521d\u59cb\u72b6\u6001\n    useEffect(() => {\n"}
{"task_id":"task/36","completion":"\n  const selectValue = v => {\n    onValueChange(v);\n  };\n\n  return (\n    <StyledSelect {...rest}>\n      {values.map(({ label, value }) => (\n        <Option\n          key={value}\n          onClick={() => selectValue(value)}\n          disabled={value === selectedValue}\n        >\n          {label}\n        </Option>\n      ))}\n   "}
{"task_id":"task/36","completion":"\n  const handleChange = (e) => {\n    const { value } = e.target;\n    onValueChange(value);\n  };\n\n  return (\n    <select {...rest} value={selectedValue} onChange={handleChange}>\n      {values.map((value) => (\n        <option key={value} value={value}>\n          {value}\n        </option>\n      ))}\n    </select"}
{"task_id":"task/36","completion":"\n  const handleOnChange = (e) => {\n    onValueChange(e.target.value);\n  };\n\n  return (\n    <select {...rest} value={selectedValue} onChange={handleOnChange}>\n      {values.map((value) => (\n        <option key={value} value={value}>\n          {value}\n        </option>\n      ))}\n    </select>\n  );\n"}
{"task_id":"task/36","completion":"\n  const [ menuOpen, setMenuOpen ] = useState(false);\n  const [ menuHeight, setMenuHeight ] = useState(0);\n  const ref = useRef(null);\n\n  const handleValueChange = (option) => {\n    onValueChange(option);\n    setMenuOpen(false);\n  };\n\n  const handleBlur = () => {\n    setMenuOpen(false);\n  };\n\n  const"}
{"task_id":"task/36","completion":"\n  const options = values.map(value => (\n    <option key={value} value={value}>\n      {value}\n    </option>\n  ));\n\n  return (\n    <select\n      {...rest}\n      onChange={onValueChange}\n      value={selectedValue}\n      data-testid=\"select\"\n    >\n      {options}\n    </select>\n  );\n};\n\nSelect."}
{"task_id":"task/37","completion":"\n  return (\n    <Textarea\n      rows={rows}\n      cols={cols}\n      value={value}\n      readOnly\n      className=\"limited-textarea\"\n      onChange={() => {}}\n    >\n      {value.length}/{limit}\n    </Textarea>\n  );\n};\n\nexport default LimitedWordTextarea;"}
{"task_id":"task/37","completion":"\n  const [error, setError] = useState(false);\n  const [currentLength, setCurrentLength] = useState(0);\n\n  const onChange = ({ target: { value } }) => {\n    setCurrentLength(value.length);\n    if (value.length > limit) {\n      setError(true);\n    } else {\n      setError(false);\n    }\n  };\n\n  const onBlur"}
{"task_id":"task/37","completion":"\n  const [text, setText] = useState(value);\n  const [error, setError] = useState('');\n\n  const onChange = e => {\n    const { value } = e.target;\n    setText(value);\n    setError(isValid(value, limit) ? '' : `Cannot exceed ${limit} characters`);\n  };\n\n  return (\n    <>\n      <Textarea\n"}
{"task_id":"task/37","completion":"\n  const [currVal, setCurrVal] = useState(value);\n  const [count, setCount] = useState(value.length);\n\n  const handleChange = (e) => {\n    const words = e.target.value.split(' ');\n    const textCount = words.filter((word) => word !== '').length;\n    setCurrVal(e.target.value);\n    setCount"}
{"task_id":"task/37","completion":"\n  const [length, setLength] = useState(countSymbols(value));\n  const [count, setCount] = useState(countSymbols(value));\n  const [tempValue, setTempValue] = useState(value);\n\n  const handleChange = ({ target: { value } }) => {\n    const newLength = countSymbols(value);\n    setTempValue(value);\n    setLength(new"}
{"task_id":"task/38","completion":"\n  const prevScrollTop = useRef(window.pageYOffset);\n  const handleScroll = () => {\n    const currentScrollTop = window.pageYOffset;\n    if (prevScrollTop.current < currentScrollTop) {\n      callback(true);\n    } else {\n      callback(false);\n    }\n    prevScrollTop.current = currentScrollTop;\n  };\n  useEffect(() => {\n    window"}
{"task_id":"task/38","completion":"\n  const win = useWindow();\n  useEffect(() => {\n    const handleScroll = () => {\n      if (window.pageYOffset > callback.current) {\n        callback.current = window.pageYOffset;\n      }\n    };\n    win.addEventListener('scroll', handleScroll);\n    return () => {\n      win.removeEventListener('scroll', handleScroll);\n    };\n  }, [win]);"}
{"task_id":"task/38","completion":"\n  useEffect(() => {\n    window.addEventListener('scroll', callback);\n    return () => window.removeEventListener('scroll', callback);\n  }, [callback]);\n};\n\nexport const useThrottle = (callback, delay) => {\n  const [, update] = useState(() => {\n    const timeout = setTimeout(callback, delay);\n    return () => clearTimeout(timeout);\n  });\n\n"}
{"task_id":"task/38","completion":"\n  const handleScroll = (e) => {\n    callback(e);\n  };\n\n  useEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, []);\n};\n\nexport default useOnWindowScroll;"}
{"task_id":"task/38","completion":"\n  const [isVisible, setIsVisible] = useState(true);\n\n  useEffect(() => {\n    const handleScroll = () => {\n      const { scrollY } = window;\n      const isTop = scrollY < 40;\n      setIsVisible(isTop);\n    };\n\n    window.addEventListener('scroll', handleScroll);\n\n    return () => {\n      window.removeEventListener('scroll',"}
{"task_id":"task/39","completion":"\n    useEffect(() => {\n        const handleClick = (e) => {\n            if (ref.current && !ref.current.contains(e.target)) {\n                callback();\n            }\n        };\n\n        document.addEventListener('click', handleClick);\n\n        return () => {\n            document.removeEventListener('click', handleClick);\n        };\n    }, [ref, callback]);\n};\n\nexport const"}
{"task_id":"task/39","completion":"\n  const handleClick = (e) => {\n    if (ref.current && !ref.current.contains(e.target)) {\n      callback();\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('click', handleClick);\n\n    return () => {\n      document.removeEventListener('click', handleClick);\n    };\n  });\n};\n\nexport default useClickInside;"}
{"task_id":"task/39","completion":"\n    const listener = event => {\n        if (!ref.current || ref.current.contains(event.target)) {\n            return;\n        }\n        callback(event);\n    };\n    document.addEventListener('click', listener);\n    return () => {\n        document.removeEventListener('click', listener);\n    };\n};\n\nconst useOutsideClick = (ref, callback) => {\n    const listener = event"}
{"task_id":"task/39","completion":"\n  const handleClick = e => {\n    if (ref.current && !ref.current.contains(e.target)) {\n      callback();\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener(\"click\", handleClick);\n\n    return () => {\n      document.removeEventListener(\"click\", handleClick);\n    };\n  });\n};\n\nconst inputPlaceholder = {\n  \""}
{"task_id":"task/39","completion":"\n    const handleClick = e => {\n        if (ref.current && !ref.current.contains(e.target)) {\n            callback()\n        }\n    }\n\n    useEffect(() => {\n        document.addEventListener('click', handleClick)\n\n        return () => {\n            document.removeEventListener('click', handleClick)\n        }\n    })\n}\n\nexport default useClickInside"}
{"task_id":"task/40","completion":"\n  typeof window !== 'undefined' &&\n  window.document &&\n  window.document.createElement\n);\n\nexport const isSafari = isDOMavailable && /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n\nexport const isChrome = isDOMavailable && /^chrome.*safari/i.test(navigator.userAgent);\n\nexport const isChrome"}
{"task_id":"task/40","completion":"typeof window !== 'undefined' && window.document && window.document.createElement);\n\n/**\n * Map to convert svg filters to webgl filters.\n */\nconst SVG_FILTERS = {\n  'blur': 0,\n  'brightness': 1,\n  'contrast': 2,\n  'grayscale': 3,\n  'hueRotate': 4,\n  'invert': 5,"}
{"task_id":"task/40","completion":"\n  typeof window !== 'undefined' &&\n  window.document &&\n  window.document.createElement\n);\n\nconst addEventListener = (element, event, handler) => {\n  if (isDOMavailable) {\n    element.addEventListener(event, handler);\n  }\n};\n\nconst removeEventListener = (element, event, handler) => {\n  if (isDOMavailable) {\n    element."}
{"task_id":"task/40","completion":"\n  typeof window !== 'undefined' &&\n  window.document &&\n  window.document.createElement\n);\n\nconst getConfigFromMetaTag = (html: string): Config | null => {\n  const regex = /<meta [^>]*name=\"recharts_config\" [^>]*content=\"([^\"]*)\"/i;\n  const meta = html.match(regex);\n\n  if (meta &&"}
{"task_id":"task/40","completion":"\n  typeof window !== 'undefined' &&\n  window.document &&\n  window.document.createElement\n);\n\nexport function createPortal(\n  children: React.ReactNode,\n  container: Element | null,\n  forceNew?: boolean,\n): Element | null {\n  if (!isDOMavailable) {\n    return null;\n  }\n\n  if (!container) {\n    return null;\n  }"}
{"task_id":"task/41","completion":"\n  const [count, setCount] = useState(value.length);\n  const [text, setText] = useState(value);\n\n  useEffect(() => {\n    setCount(value.length);\n    setText(value);\n  }, [value]);\n\n  const removeLastChar = (e) => {\n    e.preventDefault();\n    setCount(count - 1);\n    setText(text.slice"}
{"task_id":"task/41","completion":"\n  const [visibleText, setVisibleText] = useState(value);\n  const [isOverLimit, setIsOverLimit] = useState(false);\n\n  useEffect(() => {\n    if (value && value.length > limit) {\n      setVisibleText(value.substring(0, limit));\n      setIsOverLimit(true);\n    } else {\n      setVisibleText(value);\n     "}
{"task_id":"task/41","completion":"\n  const [text, setText] = useState(value)\n  const [textCount, setTextCount] = useState(value.length)\n\n  useEffect(() => {\n    setText(value)\n    setTextCount(value.length)\n  }, [value])\n\n  const handleChange = e => {\n    setText(e.target.value)\n    setTextCount(e.target.value.length)"}
{"task_id":"task/41","completion":"\n  const [text, setText] = useState(value);\n  const [count, setCount] = useState(0);\n\n  const changeText = (e) => {\n    setText(e.target.value);\n    setCount(e.target.value.length);\n  };\n\n  const resetText = () => {\n    setText(value);\n    setCount(0);\n  };\n\n  return (\n"}
{"task_id":"task/41","completion":"\n  const classes = useStyles();\n  const [text, setText] = useState(value);\n  const [end, setEnd] = useState(false);\n\n  const handleChange = (e) => {\n    const { value } = e.target;\n    if (value.length > limit) {\n      setText(value.slice(0, limit));\n      setEnd(true);\n    } else {\n     "}
{"task_id":"task/42","completion":"\n  return useEffect(() => {\n    if (onMountHandler) {\n      onMountHandler();\n    }\n  }, []);\n};\n\nexport const useComponentWillUnmount = onUnmountHandler => {\n  return useEffect(() => {\n    return () => {\n      if (onUnmountHandler) {\n        onUnmountHandler();\n      }\n    };\n  }, []);\n};\n\nexport const"}
{"task_id":"task/42","completion":"\n  return useEffect(() => {\n    onMountHandler();\n  }, []);\n};\n\nexport default useComponentDidMount;"}
{"task_id":"task/42","completion":"\n  const handleComponentDidMount = () => {\n    onMountHandler()\n  }\n\n  return handleComponentDidMount\n}\n\nexport default useComponentDidMount"}
{"task_id":"task/42","completion":"\n  useEffect(() => {\n    onMountHandler();\n  }, []);\n};\n\nconst useComponentWillUnmount = onUnmountHandler => {\n  useEffect(() => {\n    return () => {\n      onUnmountHandler();\n    };\n  }, []);\n};\n\nexport { useComponentDidMount, useComponentWillUnmount };"}
{"task_id":"task/42","completion":"\n  useEffect(() => {\n    onMountHandler();\n  }, []);\n};\n\nexport default useComponentDidMount;"}
{"task_id":"task/43","completion":"\n  const dropRef = useRef(null);\n\n  const handleDrop = (e) => {\n    e.preventDefault();\n    onDrop(e.dataTransfer.files);\n  };\n\n  const handleDragOver = (e) => {\n    e.preventDefault();\n  };\n\n  return (\n    <div\n      className=\"drop-box\"\n      ref={dropRef}\n      onDrop={handleDrop"}
{"task_id":"task/43","completion":"\n  const [file, setFile] = useState();\n  const [error, setError] = useState();\n\n  const onChange = useCallback(\n    (e) => {\n      const { files } = e.target;\n      if (files && files.length > 0) {\n        setFile(files[0]);\n      }\n    },\n    [setFile]\n  );\n\n  const onDropHandler = useCallback"}
{"task_id":"task/43","completion":"\n  const onDragOver = e => {\n    e.preventDefault();\n  };\n\n  const onDropHandler = e => {\n    e.preventDefault();\n    onDrop(e.dataTransfer.files);\n  };\n\n  return (\n    <div\n      onDragOver={onDragOver}\n      onDrop={onDropHandler}\n      className=\"dropzone-container\"\n    >\n      <div class"}
{"task_id":"task/43","completion":"\n  const [dragOver, setDragOver] = useState(false);\n\n  const onDragOver = (e) => {\n    e.preventDefault();\n    setDragOver(true);\n  };\n\n  const onDragLeave = () => {\n    setDragOver(false);\n  };\n\n  const onDropHandler = (e) => {\n    onDrop(e.dataTransfer.files);\n    setDragOver"}
{"task_id":"task/43","completion":"\n  const [uploading, setUploading] = useState(false);\n  const [file, setFile] = useState(null);\n  const [filename, setFilename] = useState(null);\n  const [error, setError] = useState(null);\n\n  const handleDrop = (acceptedFiles) => {\n    setUploading(true);\n    setFilename(null);\n    setError(null);\n   "}
{"task_id":"task/44","completion":"\n  name,\n  url,\n  children,\n  icon,\n  className,\n  activeClassName,\n  activeOnlyWhenExact,\n  activeStyle,\n  style,\n  isActive,\n  depth,\n  ...rest\n}) => {\n  const isActiveProps = isActive ? { activeClassName, activeStyle, isActive } : {};\n  const routeProps = {\n    name,\n   "}
{"task_id":"task/44","completion":"\n  // context\n  name, required, strict, depth,\n  // state\n  state, path, formName,\n  // actions\n  actions,\n  //\n  list, listPath, listActions,\n  item, itemPath, itemActions,\n  //\n  onChange,\n  children,\n  //\n  className,\n  ...props\n}) => {\n  const {\n    autoFocus, disabled,"}
{"task_id":"task/44","completion":" className, data, onSelect, getKey, getText, getIcon, onDoubleClick, onRightClick, onExpand }) => {\n  const onSelectInternal = (item, event) => {\n    if (onSelect) {\n      onSelect(item, event);\n    }\n  };\n\n  const onDoubleClickInternal = (item, event) => {\n    if (onDoubleClick) {\n      onDoubleClick(item,"}
{"task_id":"task/44","completion":" root, header, onClick, onToggle, onDoubleClick, getItemProps, getItemPropsOfSelectedItem, renderItem, renderSelectedItem, renderExpandedItem, onClickItem }) => {\n  const [, theme] = useStyletron();\n  const classes = useTreeViewClasses({ theme });\n  const [selected, setSelected] = useState([]);\n  const [expanded, setExpanded"}
{"task_id":"task/44","completion":"\n  className,\n  data,\n  expandable,\n  // eslint-disable-next-line no-unused-vars\n  onToggle,\n  ...props\n}: TreeViewProps) => {\n  const [expanded, setExpanded] = useState<string[]>([]);\n\n  const handleToggle = (value: string) => {\n    const currentIndex = expanded.indexOf(value);"}
{"task_id":"task/45","completion":"\n  const [value, setValue] = useState(() => {\n    const persistedValue = JSON.parse(\n      localStorage.getItem(name) || String(defaultValue)\n    );\n    return persistedValue;\n  });\n\n  const setValuePersisted = (value) => {\n    setValue(value);\n    localStorage.setItem(name, JSON.stringify(value));\n  };\n\n  return [value"}
{"task_id":"task/45","completion":"\n  const [value, setValue] = useState(() => {\n    const persistedValue = localStorage.getItem(name);\n    return persistedValue === null ? defaultValue : persistedValue;\n  });\n\n  const setValuePersisted = useCallback(value => {\n    setValue(value);\n    localStorage.setItem(name, value);\n  }, []);\n\n  return [value, setValuePersisted];\n};\n"}
{"task_id":"task/45","completion":"\n  const store = getOrCreateStore();\n  const [state, setState] = useState(() => store.get(name, defaultValue));\n\n  const setPersistedState = value => {\n    setState(value);\n    store.set(name, value);\n  };\n\n  return [state, setPersistedState];\n};\n\nexport default usePersistedState;"}
{"task_id":"task/45","completion":"\n  const [state, setState] = useState(() => {\n    const persistedState = window.localStorage.getItem(name);\n    return persistedState ? JSON.parse(persistedState) : defaultValue;\n  });\n\n  const setStateAndPersist = (newState) => {\n    setState(newState);\n    window.localStorage.setItem(name, JSON.stringify(newState));\n  };"}
{"task_id":"task/45","completion":"\n  const [state, setState] = useState(() => {\n    const nameFromStorage = window.localStorage.getItem(name);\n    if (nameFromStorage) {\n      return JSON.parse(nameFromStorage);\n    }\n    return defaultValue;\n  });\n\n  const setStateToStorage = useCallback(\n    value => {\n      setState(value);\n      window.localStorage.setItem(name"}
{"task_id":"task/46","completion":"\n    const [size, setSize] = useState({\n        width: window.innerWidth,\n        height: window.innerHeight\n    });\n\n    useEffect(() => {\n        const handleResize = () => {\n            setSize({\n                width: window.innerWidth,\n                height: window.innerHeight\n            });\n        };\n\n        window.addEventListener('resize', handleResize);\n\n        return () =>"}
{"task_id":"task/46","completion":"\n  const [size, setSize] = useState({\n    width: window.innerWidth,\n    height: window.innerHeight,\n  });\n\n  useEffect(() => {\n    const onResize = () => {\n      setSize({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    };\n\n    window.addEventListener('resize', onResize);\n\n    return"}
{"task_id":"task/46","completion":"\n  const [windowSize, setWindowSize] = useState({\n    width: window.innerWidth,\n    height: window.innerHeight,\n  });\n\n  useEffect(() => {\n    const handleResize = () => {\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    };\n\n    window.addEventListener('resize', handleResize);"}
{"task_id":"task/46","completion":"\n  const [size, setSize] = useState({\n    width: window.innerWidth,\n    height: window.innerHeight,\n  });\n\n  useEffect(() => {\n    const handleResize = () => {\n      setSize({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    };\n\n    window.addEventListener('resize', handleResize);\n    return"}
{"task_id":"task/46","completion":"\n  const [windowSize, setWindowSize] = useState({\n    width: window.innerWidth,\n    height: window.innerHeight,\n  });\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    }\n\n    window.addEventListener(\"resize\", handleResize);\n   "}
{"task_id":"task/47","completion":"\n  return (\n    <Input\n      value={value}\n      onChange={(event) => onValueChange(event.target.value)}\n      {...rest}\n    />\n  );\n};\n\nexport default ControlledInput;"}
{"task_id":"task/47","completion":"\n  const handleChange = useCallback(\n    e => {\n      onValueChange(e.target.value);\n    },\n    [onValueChange]\n  );\n\n  return <input value={value} onChange={handleChange} {...rest} />;\n};\n\nControlledInput.propTypes = {\n  value: PropTypes.string.isRequired,\n  onValueChange: PropTypes.func.isRequired\n};"}
{"task_id":"task/47","completion":"\n  const [controlledValue, setControlledValue] = useState(value);\n\n  const onChange = useCallback(\n    (event) => {\n      setControlledValue(event.target.value);\n      onValueChange(event.target.value);\n    },\n    [onValueChange],\n  );\n\n  useEffect(() => {\n    setControlledValue(value);\n  }, [value]);\n\n  return ("}
{"task_id":"task/47","completion":"\n  const handleChange = e => {\n    const value = e.target.value;\n    onValueChange(value);\n  };\n\n  return (\n    <div>\n      <input\n        onChange={handleChange}\n        value={value}\n        {...rest}\n      />\n    </div>\n  );\n};\n\nControlledInput.propTypes = {\n  value: PropTypes.string.isRequired,"}
{"task_id":"task/47","completion":"\n  const handleChange = (e) => {\n    if (rest.type === 'number') {\n      onValueChange(parseInt(e.target.value, 10));\n    } else {\n      onValueChange(e.target.value);\n    }\n  };\n\n  return (\n    <input\n      type={rest.type}\n      value={value}\n      onChange={handleChange}\n      {...rest}"}
{"task_id":"task/48","completion":"\n  return (\n    <div className=\"table-container\">\n      <table className=\"table table-striped table-bordered\">\n        <thead>\n          <tr>\n            <th>Date</th>\n            <th>Description</th>\n            <th>Credit</th>\n            <th>Debit</th>\n            <th>Balance</th>\n          </tr>\n        </thead"}
{"task_id":"task/48","completion":"\n  return (\n    <table className=\"table table-hover\">\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Email</th>\n          <th>Description</th>\n          <th>Status</th>\n          <th>Created At</th>\n          <th>Updated At</th>\n        </tr>\n      </thead>\n      <tbody"}
{"task_id":"task/48","completion":"\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Name',\n        accessor: 'name',\n      },\n      {\n        Header: 'Info',\n        accessor: 'info',\n      },\n    ],\n    []\n  );\n\n  return (\n    <ReactTable\n      data={data}\n      columns={columns}\n      defaultPageSize={10}\n"}
{"task_id":"task/48","completion":"\n  const dataRows = data.map((row, i) => (\n    <tr key={i}>\n      {Object.keys(row).map((key, i) => (\n        <td key={i}>{row[key]}</td>\n      ))}\n    </tr>\n  ));\n\n  return (\n    <Table className=\"custom-table\">\n      <thead>\n        <tr>\n"}
{"task_id":"task/48","completion":"\n  return (\n    <TableContainer>\n      <Table aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>\n            <TableCell align=\"left\">Date</TableCell>\n            <TableCell align=\"left\">Description</TableCell>\n            <TableCell align=\"left\">Category</TableCell>\n            <TableCell align=\"left\">Amount</TableCell>\n          </TableRow>\n        </"}
{"task_id":"task/49","completion":"\n  const componentWillUnmount = () => {\n    onUnmountHandler()\n  }\n\n  return [componentWillUnmount]\n}\n\nexport default useComponentWillUnmount"}
{"task_id":"task/49","completion":"\n  useEffect(() => {\n    return () => {\n      onUnmountHandler();\n    };\n  }, []);\n};\n\nconst useComponentDidMount = onMountHandler => {\n  useEffect(() => {\n    onMountHandler();\n  }, []);\n};\n\nexport { useComponentDidMount, useComponentWillUnmount };"}
{"task_id":"task/49","completion":"\n  const componentWillUnmount = props => {\n    if (onUnmountHandler) {\n      onUnmountHandler(props);\n    }\n  };\n\n  return [componentWillUnmount];\n};\n\nexport default useComponentWillUnmount;"}
{"task_id":"task/49","completion":"\n  const previousComponentWillUnmount =\n    React.Component.prototype.componentWillUnmount;\n\n  React.Component.prototype.componentWillUnmount = function() {\n    if (typeof previousComponentWillUnmount === 'function') {\n      previousComponentWillUnmount.call(this);\n    }\n\n    if (typeof onUnmountHandler === 'function') {\n      onUnmountHandler.call(this);\n    }\n"}
{"task_id":"task/49","completion":"\n  const prevUnmount = useRef();\n  const prevUnmountSet = useRef(false);\n\n  useEffect(() => {\n    prevUnmount.current = onUnmountHandler;\n    prevUnmountSet.current = true;\n  }, [onUnmountHandler]);\n\n  useEffect(() => {\n    if (prevUnmountSet.current) {\n      prevUnmount.current();\n    }\n  }, []"}
{"task_id":"task/50","completion":"\n  const [activeIndex, setActiveIndex] = useState(defaultIndex);\n\n  const handleTabClick = index => {\n    setActiveIndex(index);\n    onTabClick && onTabClick(index);\n  };\n\n  return (\n    <ul className=\"tabs\">\n      {React.Children.map(children, (child, index) => {\n        const { disabled } = child.props;\n        const"}
{"task_id":"task/50","completion":"\n  const [currentIndex, setCurrentIndex] = useState(defaultIndex);\n\n  const onClick = index => {\n    setCurrentIndex(index);\n    onTabClick && onTabClick(index);\n  };\n\n  return (\n    <div className=\"tabs\">\n      <ul className=\"tabs-nav\">\n        {React.Children.map(children, (child, index) => {\n          return ("}
{"task_id":"task/50","completion":"\n  const [currentIndex, setCurrentIndex] = useState(defaultIndex);\n\n  const handleTabClick = index => {\n    setCurrentIndex(index);\n    onTabClick && onTabClick(index);\n  };\n\n  return (\n    <ul className=\"c-tabs\">\n      {React.Children.map(children, (child, index) => {\n        if (!child) {\n          return null;\n"}
{"task_id":"task/50","completion":"\n  const [activeIndex, setActiveIndex] = useState(defaultIndex);\n\n  const onClick = (index, disabled) => {\n    if (!disabled) {\n      setActiveIndex(index);\n      onTabClick && onTabClick(index);\n    }\n  };\n\n  return (\n    <div className=\"tabs\">\n      <TabItem onClick={() => onClick(0, children[0].props"}
{"task_id":"task/50","completion":"\n  const [currentIndex, setCurrentIndex] = useState(defaultIndex);\n\n  const handleTabClick = index => {\n    setCurrentIndex(index);\n    onTabClick && onTabClick(index);\n  };\n\n  return (\n    <div className=\"tabs\">\n      <div className=\"tabs-nav\">\n        {React.Children.map(children, (child, index) => {\n          const"}
{"task_id":"task/51","completion":" {\n  return typeof navigator !== 'undefined' ? navigator.onLine : true;\n};\n\nexport default function networkStatus(): Observable<boolean> {\n  return new Observable(subscriber => {\n    const onlineStatus = getOnLineStatus();\n    subscriber.next(onlineStatus);\n\n    const handler = () => {\n      subscriber.next(getOnLineStatus());\n    };\n\n    const eventHandler ="}
{"task_id":"task/51","completion":" {\n  return {\n    type: GET_ONLINE_STATUS,\n    online: online\n  };\n};\n\nexport const getOnlineStatus = () => {\n  if (isBrowser) {\n    const status = navigator.onLine;\n    setOnline(status);\n    return status;\n  }\n  return online;\n};\n\nexport const setOnline = status => {\n  online = status;\n  if (is"}
{"task_id":"task/51","completion":" {\n  const { app } = window.webviewApis;\n  if (app) {\n    return app.getOnLineStatus();\n  }\n  return false;\n};\n\nconst updateOnLineStatus = (status: boolean) => {\n  const { app } = window.webviewApis;\n  if (app) {\n    app.updateOnLineStatus(status);\n  }\n};\n\n// getCurrentUrl"}
{"task_id":"task/51","completion":" {\n  return {\n    type: GET_ONLINE_STATUS,\n    onLineStatus: true\n  };\n};\n\nexport const offLineStatus = () => {\n  return {\n    type: OFF_LINE_STATUS,\n    onLineStatus: false\n  };\n};\n\nexport const removeUserInfo = () => {\n  return {\n    type: REMOVE_USER_INFO\n  };\n};\n\n"}
{"task_id":"task/51","completion":" {\n  return (dispatch: Dispatch<ActionTypes>) => {\n    axios.get('https://www.easy-mock.com/mock/5c8a3a14ac2acb3a322b28f5/example/onlineStatus')\n      .then((res) => {\n        if (res.data.code === 0) {\n          dispatch(changeOnLineStatus(res.data.data));\n        }"}
{"task_id":"task/52","completion":"\n  const [visible, setVisible] = useState(false);\n\n  const handleToggleVisible = () => {\n    setVisible(!visible);\n  };\n\n  return (\n    <>\n      <Input\n        type={visible ? 'text' : 'password'}\n        value={value}\n        endAdornment={\n          <InputAdornment position=\"end\">\n            <IconButton\n              aria"}
{"task_id":"task/52","completion":"\n  const [showPassword, setShowPassword] = useState(false);\n\n  const toggleShowPassword = () => {\n    setShowPassword(!showPassword);\n  };\n\n  return (\n    <div className=\"relative\">\n      <input\n        type={showPassword ? 'text' : 'password'}\n        value={value}\n        className=\"w-full px-3 py-2 rounded-md text-sm"}
{"task_id":"task/52","completion":"\n  const [isRevealed, setIsRevealed] = useState(false);\n\n  return (\n    <div className=\"py-2 px-4\">\n      <RevealPassword\n        value={value}\n        isRevealed={isRevealed}\n        onToggleReveal={() => setIsRevealed(!isRevealed)}\n      />\n    </div>\n  );"}
{"task_id":"task/52","completion":"\n  const [isRevealed, setIsRevealed] = useState(false);\n\n  return (\n    <div className=\"password-revealer\">\n      <div\n        className=\"password-revealer__input\"\n        onClick={() => setIsRevealed(!isRevealed)}\n      >\n        {value.replace(/./g, '\u25cf')}\n      </div>\n      <Tool"}
{"task_id":"task/52","completion":"\n  const [visible, setVisible] = useState(false);\n\n  return (\n    <React.Fragment>\n      <Input\n        type={visible ? 'text' : 'password'}\n        value={value}\n        onChange={() => {}}\n        endAdornment={\n          <InputAdornment position=\"end\">\n            <IconButton\n              aria-label=\"toggle password visibility\"\n              on"}
{"task_id":"task/53","completion":"\n  return (\n    <button\n      className={marked ? \"star-active\" : \"star-inactive\"}\n      onClick={() => {\n        starClicked(starId);\n      }}\n    >\n      &#x2605;\n    </button>\n  );\n};\n\nexport default Star;"}
{"task_id":"task/53","completion":"\n  return (\n    <div className=\"star\" onClick={() => marked(starId)}>\n      <FontAwesomeIcon icon={faStar} />\n    </div>\n  );\n};\n\nexport default Star;"}
{"task_id":"task/53","completion":"\n  const className = marked ? 'fas fa-star' : 'far fa-star';\n  return <i className={className} id={starId} />;\n};\n\nexport default Star;"}
{"task_id":"task/53","completion":"\n  const [star, setStar] = useState(starId)\n  const [preview, setPreview] = useState(starId)\n  const [backgroundColor, setBackgroundColor] = useState('#d8e1e8')\n  const [color, setColor] = useState('#000000')\n  const [name, setName] = useState('')\n  const [description, setDescription] = useState"}
{"task_id":"task/53","completion":"\n  return (\n    <span\n      onClick={() => handleStarClick(starId)}\n      className={marked ? 'Star__marked' : 'Star'}\n    >\n      *\n    </span>\n  );\n};\n\nexport default Star;"}
{"task_id":"task/54","completion":"\n    const userDidUpdate = useCallback(() => {\n        if (!condition || !condition()) return;\n        callback();\n    }, [callback, condition]);\n\n    useEffect(() => {\n        userDidUpdate();\n    }, [userDidUpdate]);\n};\n\nconst useComponentWillUpdate = (callback, condition) => {\n    const userWillUpdate = useCallback(() => {\n        if (!condition || !condition()) return;"}
{"task_id":"task/54","completion":"\n  const didUpdate = useCallback(\n    (previousProps, previousState) => {\n      if (condition) {\n        callback(previousProps, previousState);\n      }\n    },\n    [callback, condition]\n  );\n  useEffect(() => {\n    return didUpdate;\n  }, [didUpdate]);\n};\n\nexport default useComponentDidUpdate;"}
{"task_id":"task/54","completion":"\n  useEffect(() => {\n    if (condition) {\n      callback();\n    }\n  });\n};\n\nexport default useComponentDidUpdate;"}
{"task_id":"task/54","completion":"\n  const prevProps = useRef();\n  const prevState = useRef();\n\n  useEffect(() => {\n    if (condition) {\n      callback();\n    }\n  }, [callback, condition]);\n\n  useEffect(() => {\n    prevProps.current = props;\n    prevState.current = state;\n  });\n};\n\nexport default useComponentDidUpdate;"}
{"task_id":"task/54","completion":"\n  const prevProps = useRef();\n  const prevState = useRef();\n\n  const safeCallback = useCallback(callback, [callback]);\n\n  useEffect(() => {\n    if (condition(prevProps.current, prevState.current)) {\n      safeCallback();\n    }\n  }, [condition, safeCallback]);\n\n  useEffect(() => {\n    prevProps.current = props;\n    prevState."}
{"task_id":"task/55","completion":"\n  const [toggled, setToggled] = useState(defaultToggled);\n\n  const handleClick = () => {\n    setToggled(!toggled);\n  };\n\n  return (\n    <button onClick={handleClick}>\n      {toggled ? \"Toggled\" : \"Untoggled\"}\n    </button>\n  );\n};\n\nexport default Toggle;"}
{"task_id":"task/55","completion":"\n  const [isToggled, setIsToggled] = useState(defaultToggled);\n\n  const toggle = () => setIsToggled(!isToggled);\n\n  return (\n    <button className=\"toggle\" onClick={toggle}>\n      <span className=\"toggle__round\" />\n      <span className=\"toggle__label\">{isToggled ? 'ON' : 'OFF'}"}
{"task_id":"task/55","completion":"\n  const [toggled, setToggled] = useState(defaultToggled);\n\n  const toggle = () => setToggled(!toggled);\n\n  return (\n    <div>\n      <label htmlFor=\"toggle\">\n        <input\n          id=\"toggle\"\n          type=\"checkbox\"\n          checked={toggled}\n          onChange={toggle}\n        />\n        {toggled ?"}
{"task_id":"task/55","completion":"\n  const [isToggled, setIsToggled] = useState(defaultToggled);\n\n  const handleToggle = () => {\n    setIsToggled(!isToggled);\n  };\n\n  return (\n    <Container isToggled={isToggled}>\n      <SwitchLabel>\n        <SwitchToggle onClick={handleToggle}>\n          <SwitchToggleText isT"}
{"task_id":"task/55","completion":"\n  const [toggled, setToggled] = useState(defaultToggled);\n\n  const toggle = () => setToggled(!toggled);\n\n  return (\n    <ToggleButton onClick={toggle} toggled={toggled}>\n      {toggled ? \"Yes\" : \"No\"}\n    </ToggleButton>\n  );\n};\n\nexport default Toggle;"}
{"task_id":"task/56","completion":"\n  const colums = propertyNames.map(propertyName => {\n    const func = (value, row) => {\n      if (value) {\n        const [key, value] = value.split(':');\n        const property = getProperty(row, key);\n        return property ? property[value] : null;\n      }\n      return null;\n    };\n    return {\n      title: propertyName,\n      dataIndex"}
{"task_id":"task/56","completion":"\n  const mapped = data.map(entry => {\n    const mappedRow = propertyNames.map(prop => entry[prop]);\n    return mappedRow;\n  });\n  return mapped;\n};\n\nMappedTable.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.object).isRequired,\n  propertyNames: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nexport default M"}
{"task_id":"task/56","completion":"\n  const mappedData = _.map(data, ({ id, ...row }) => ({\n    id,\n    ..._.mapValues(row, value => (_.isArray(value) ? value.join(', ') : value))\n  }));\n\n  return (\n    <Table\n      headers={propertyNames}\n      data={mappedData}\n      className=\"table-sm\"\n      onRowClick={() => null}"}
{"task_id":"task/56","completion":"\n  return (\n    <table className=\"table table-striped\">\n      <thead>\n        <tr>\n          {propertyNames.map(propertyName => {\n            return <th key={propertyName}>{propertyName}</th>;\n          })}\n        </tr>\n      </thead>\n      <tbody>\n        {data.map(value => {\n          return (\n            <tr key"}
{"task_id":"task/56","completion":"\n  return (\n    <>\n      {propertyNames.map((name, index) => (\n        <td key={name}>{data[index]}</td>\n      ))}\n    </>\n  );\n};\n\nexport default MappedTable;"}
{"task_id":"task/57","completion":"\n  el.addEventListener(type, handler)\n\n  return () => {\n    el.removeEventListener(type, handler)\n  }\n}\n\nexport default useEventListener"}
{"task_id":"task/57","completion":"\n  el.addEventListener(type, handler);\n  return () => el.removeEventListener(type, handler);\n};\n\nexport const useLockBodyScroll = () => {\n  const [, toggle] = useLockBodyScrollState();\n  return toggle;\n};\n\nexport const useLockBodyScrollState = () => {\n  const [locked, setLocked] = useState(false);\n  const toggle = () => set"}
{"task_id":"task/57","completion":"\n    el.addEventListener(type, handler);\n    return () => el.removeEventListener(type, handler);\n};\n\nconst useEventCallback = (type, callback) => {\n    const handler = useCallback(event => callback(event), []);\n    useEventListener(type, handler);\n};\n\nexport { useEventListener, useEventCallback };"}
{"task_id":"task/57","completion":"\n    el.addEventListener(type, handler);\n    return () => el.removeEventListener(type, handler);\n};\n\nconst useWindowSize = () => {\n    const [windowSize, setWindowSize] = useState(() => ({\n        width: window.innerWidth,\n        height: window.innerHeight,\n    }));\n\n    useEffect(() => {\n        const handleResize = () => {\n           "}
{"task_id":"task/57","completion":"\n  el.addEventListener(type, handler);\n  return () => el.removeEventListener(type, handler);\n};\n\nfunction App() {\n  const [userList, setUserList] = useState([]);\n  const [userName, setUserName] = useState(\"\");\n  const [msgList, setMsgList] = useState([]);\n  const [user, setUser] = useState({});"}
{"task_id":"task/58","completion":"\n  return (\n    <a href={`tel:${phone}`}>\n      <div className=\"callto\">\n        <span className=\"callto__icon\">\n          <Icon name=\"phone\" />\n        </span>\n        <span className=\"callto__text\">{children}</span>\n      </div>\n    </a>\n  );\n};\n\nexport default Callto;"}
{"task_id":"task/58","completion":"\n  return (\n    <CalltoButton href={`tel:${phone}`} target=\"_blank\">\n      {children}\n    </CalltoButton>\n  );\n};\n\nexport default Callto;"}
{"task_id":"task/58","completion":"\n  return (\n    <a href={`tel:${phone}`} className=\"text-yellow-500 hover:text-yellow-800\">\n      {children}\n    </a>\n  );\n};\n\nexport default Callto;"}
{"task_id":"task/58","completion":"\n  return (\n    <>\n      <a\n        className=\"callto\"\n        href={`tel:${phone}`}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        {children}\n      </a>\n    </>\n  );\n};\n\nexport default Callto;"}
{"task_id":"task/58","completion":"\n  return (\n    <div className=\"callto\">\n      <a href={`tel:${phone}`}>{children}</a>\n    </div>\n  );\n};\n\nexport default Callto;"}
{"task_id":"task/59","completion":"\n\tconst throttledCallback = useCallback(\n\t\tthrottle(callback, 200),\n\t\t[callback]\n\t);\n\n\tuseEffect(() => {\n\t\twindow.addEventListener('resize', throttledCallback);\n\n\t\treturn () => {\n\t\t\twindow.removeEventListener('resize', throttledCallback);\n\t\t};\n\t}, [throttledCallback]);\n};\n\nconst Feed = () =>"}
{"task_id":"task/59","completion":"\n\tconst onResize = useCallback(() => {\n\t\tcallback(window.innerWidth);\n\t}, [callback]);\n\n\tuseEffect(() => {\n\t\twindow.addEventListener('resize', onResize);\n\t\treturn () => {\n\t\t\twindow.removeEventListener('resize', onResize);\n\t\t};\n\t}, [onResize]);\n};\n\nexport default useOnWindowRes"}
{"task_id":"task/59","completion":"\n  useEffect(() => {\n    const listener = () => {\n      callback();\n    };\n    window.addEventListener('resize', listener);\n    return () => {\n      window.removeEventListener('resize', listener);\n    };\n  }, [callback]);\n};\n\nconst WindowListener = ({ callback }) => {\n  useOnWindowResize(callback);\n  return null;\n};\n\nexport default Window"}
{"task_id":"task/59","completion":"\n  const handleResize = () => {\n    callback();\n  };\n\n  useEffect(() => {\n    window.addEventListener('resize', handleResize);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n};\n\nexport default useOnWindowResize;"}
{"task_id":"task/59","completion":"\n  const handleResize = () => {\n    callback();\n  };\n\n  useEffect(() => {\n    window.addEventListener('resize', handleResize);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n};\n\nconst useIsMobile = useCallback(() => {\n  const isMobile = useMediaQuery(MOBILE_BRE"}
{"task_id":"task/60","completion":"\n  const [value, setValue] = useState(defaultValue);\n\n  useEffect(() => {\n    setValue(defaultValue);\n  }, [defaultValue]);\n\n  const handleValueChange = useCallback(event => {\n    setValue(event.target.value);\n    onValueChange(event.target.value);\n  }, [onValueChange]);\n\n  return (\n    <Input\n      type=\"text\"\n     "}
{"task_id":"task/60","completion":"\n  const [value, setValue] = useState(defaultValue);\n\n  useEffect(() => {\n    setValue(defaultValue);\n  }, [defaultValue]);\n\n  const onChange = useCallback(\n    e => {\n      setValue(e.target.value);\n      onValueChange(e.target.value);\n    },\n    [onValueChange]\n  );\n\n  return <input onChange={onChange"}
{"task_id":"task/60","completion":"\n  const onChange = useEventCallback(event => onValueChange(event.target.value));\n\n  return <input defaultValue={defaultValue} onChange={onChange} {...rest} />;\n};\n\nexport default UncontrolledInput;"}
{"task_id":"task/60","completion":"\n  const [value, setValue] = useState(defaultValue);\n\n  const onChange = useCallback(\n    e => {\n      const nextValue = e.target.value;\n      setValue(nextValue);\n      onValueChange(nextValue);\n    },\n    [onValueChange]\n  );\n\n  return <input onChange={onChange} {...rest} value={value} />;\n};\n\nexport default"}
{"task_id":"task/60","completion":"\n  const [value, setValue] = useState(defaultValue);\n\n  useEffect(() => {\n    setValue(defaultValue);\n  }, [defaultValue]);\n\n  const handleValueChange = useCallback(\n    e => {\n      setValue(e.target.value);\n      onValueChange(e.target.value);\n    },\n    [onValueChange]\n  );\n\n  return (\n    <input {"}
{"task_id":"task/61","completion":" name, label, error, ...rest }) => {\n  return (\n    <div className=\"form-group\">\n      <label htmlFor={name}>{label}</label>\n      <textarea {...rest} name={name} id={name} className=\"form-control\" />\n      {error && <div className=\"alert alert-danger\">{error}</div>}\n    </div>\n  );\n};\n"}
{"task_id":"task/61","completion":" label, name, value, error, onChange, onBlur, disabled, maxLength }) => {\n  return (\n    <div className=\"form-group\">\n      <label htmlFor={name}>{label}</label>\n      <textarea\n        className=\"form-control\"\n        id={name}\n        name={name}\n        value={value}\n        onChange={onChange}\n        onBlur={on"}
{"task_id":"task/61","completion":"\n  name,\n  placeholder,\n  value,\n  isMulti,\n  ...rest\n}: TextAreaProps) => {\n  return (\n    <StyledTextArea name={name} placeholder={placeholder} value={value} {...rest} />\n  );\n};\n\nexport default TextArea;"}
{"task_id":"task/61","completion":"\n  name,\n  label,\n  error,\n  ...rest\n}) => {\n  return (\n    <div className=\"form-group\">\n      <label htmlFor={name}>{label}</label>\n      <textarea\n        className=\"form-control\"\n        id={name}\n        name={name}\n        {...rest}\n      />\n      {error && <div className=\"alert alert-danger"}
{"task_id":"task/61","completion":" name, rows, label, error, ...rest }) => {\n  return (\n    <div className=\"form-group\">\n      <label htmlFor={name}>{label}</label>\n      <textarea\n        className=\"form-control\"\n        rows={rows}\n        name={name}\n        id={name}\n        {...rest}\n      />\n      {error && <div className=\"alert alert-danger\">"}
{"task_id":"task/62","completion":"\n    const [state, setState] = useState({\n        loaded: false,\n        error: false\n    });\n\n    useEffect(() => {\n        const script = document.createElement(\"script\");\n        script.src = src;\n        script.async = true;\n\n        script.onload = () => {\n            setState({\n                loaded: true,\n                error: false\n            });\n        };\n\n        script"}
{"task_id":"task/62","completion":"\n    const [state, setState] = useState({\n        loaded: false,\n        error: false\n    });\n\n    useEffect(() => {\n        const script = document.createElement('script');\n        script.src = src;\n        script.async = true;\n\n        script.onload = () => {\n            setState({\n                loaded: true,\n                error: false\n            });\n        };\n\n        script"}
{"task_id":"task/62","completion":"\n  let script = document.createElement('script');\n  script.src = src;\n  script.async = true;\n  document.body.appendChild(script);\n};\n\n// IFrame\nconst IFrame = ({ src, height, width, ...rest }) => {\n  const props = { ...rest };\n  const iframe = useRef(null);\n  const scriptSrc =\n    src.indexOf('http"}
{"task_id":"task/62","completion":"\n    useEffect(() => {\n        const script = document.createElement('script');\n        script.src = src;\n        document.body.appendChild(script);\n        return () => {\n            document.body.removeChild(script);\n        };\n    }, [src]);\n};\n\nexport default function Sankey({ height, width, data }) {\n    useScript('https://unpkg.com/@antv/data"}
{"task_id":"task/62","completion":"\n  const ref = useRef()\n  useEffect(() => {\n    if (!ref.current) {\n      const script = document.createElement('script')\n      script.src = src\n      ref.current = script\n      document.body.appendChild(script)\n    }\n  }, [src]) // Only re-run if value changes\n  return ref\n}\n\nconst useStyles = makeStyles({\n  img"}
{"task_id":"task/63","completion":"\n  const requestAnimationFrame =\n    window.requestAnimationFrame ||\n    window.mozRequestAnimationFrame ||\n    window.webkitRequestAnimationFrame ||\n    window.msRequestAnimationFrame;\n  const frameDeadline = window.performance.now() + FRAME_THRESHOLD;\n  requestAnimationFrame(callback);\n  return () => {\n    requestAnimationFrame(() => {\n      if (window.performance.now() >="}
{"task_id":"task/63","completion":"\n    const requestAnimationFrame =\n        window.requestAnimationFrame ||\n        window.mozRequestAnimationFrame ||\n        window.webkitRequestAnimationFrame ||\n        window.msRequestAnimationFrame;\n    const raf = requestAnimationFrame(callback);\n    return () => {\n        requestAnimationFrame.cancel(raf);\n    };\n};\n\nconst useMouseCoords = initialX => {\n    const [mouseX, setMouseX"}
{"task_id":"task/63","completion":"\n  const element = useRef();\n  useEffect(() => {\n    element.current = requestAnimationFrame(callback);\n    return () => cancelAnimationFrame(element.current);\n  }, [callback]);\n};\n\nexport default useRequestAnimationFrame;"}
{"task_id":"task/63","completion":"\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (savedCallback.current) {\n      const id = setInterval(tick, 1000 / 60);\n"}
{"task_id":"task/63","completion":"\n  const frame = requestAnimationFrame(() => {\n    if (frame !== null) {\n      cancelAnimationFrame(frame);\n    }\n    callback();\n  });\n};\n\nconst useInterval = (callback, delay) => {\n  const interval = setInterval(callback, delay);\n  useEffect(() => {\n    return () => {\n      clearInterval(interval);\n    };\n  }, ["}
{"task_id":"task/64","completion":"\n    const [value, setValue] = useState(initialValue);\n    return [value, setValue];\n};\n\nexport default useSet;"}
{"task_id":"task/64","completion":"\n  const [state, setState] = useState(initialValue);\n  return [state, setState];\n};\n\nexport default useSet;"}
{"task_id":"task/64","completion":"\n  const [state, setState] = useState(initialValue);\n  return [state, setState];\n};\n\nconst useSubscribe = (callback, deps) => {\n  const [, forceUpdate] = useState();\n  useEffect(() => {\n    callback();\n    return () => {\n      callback = () => {};\n    };\n  }, deps || []);\n  return forceUpdate;\n};\n"}
{"task_id":"task/64","completion":"\n  const [value, setValue] = useState(initialValue);\n  return [value, setValue];\n};\n\nexport default useSet;"}
{"task_id":"task/64","completion":"\n  const [value, setValue] = useState(initialValue);\n  return [value, setValue];\n};\n\nexport default useSet;"}
{"task_id":"task/65","completion":"\n  const [state, setState] = useState(() => {\n    try {\n      const val = localStorage.getItem(keyName);\n      return val ? JSON.parse(val) : defaultValue;\n    } catch (e) {\n      return defaultValue;\n    }\n  });\n\n  const set = useCallback(\n    val => {\n      try {\n        const valString = JSON.stringify(val);"}
{"task_id":"task/65","completion":"\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      const item = window.localStorage.getItem(keyName);\n      return item ? JSON.parse(item) : defaultValue;\n    } catch (error) {\n      console.log(error);\n      return defaultValue;\n    }\n  });\n\n  const setValue = (value) => {\n    try {\n"}
{"task_id":"task/65","completion":"\n  const [localValue, setLocalValue] = useState(\n    getLocalStorageValue(keyName, defaultValue)\n  );\n\n  const setValue = value => {\n    setLocalValue(value);\n    setLocalStorageValue(keyName, value);\n  };\n\n  return [localValue, setValue];\n};\n\nexport default useLocalStorage;"}
{"task_id":"task/65","completion":"\n  const [data, setData] = useState(defaultValue);\n\n  useEffect(() => {\n    const dataFromStorage = JSON.parse(localStorage.getItem(keyName));\n    if (dataFromStorage) {\n      setData(dataFromStorage);\n    }\n  }, [keyName]);\n\n  useEffect(() => {\n    localStorage.setItem(keyName, JSON.stringify(data));\n"}
{"task_id":"task/65","completion":"\n  const [data, setData] = useState(() => {\n    const storageValue = localStorage.getItem(keyName);\n    if (storageValue) {\n      return JSON.parse(storageValue);\n    }\n    return defaultValue;\n  });\n\n  const setLocalStorage = value => {\n    const valueToStore =\n      value instanceof Function ? value(data) : value;\n    localStorage.setItem"}
{"task_id":"task/66","completion":"\n  return collapsed ? null : children;\n};\n\nexport default Collapse;"}
{"task_id":"task/66","completion":"\n  const [width, setWidth] = useState(getWidth(collapsed));\n\n  useEffect(() => {\n    window.addEventListener('resize', () => {\n      setWidth(getWidth(collapsed));\n    });\n  }, [collapsed]);\n\n  return (\n    <>\n      <div\n        style={{\n          overflowY: 'auto',\n          overflowX: 'hidden',\n          width:"}
{"task_id":"task/66","completion":"\n  const isMobile = useMediaQuery({ maxWidth: 768 });\n  const containerStyle = {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: isMobile ? '100vh' : 'auto',\n    margin: '0 0 1em 0',\n  };\n  const svgStyle = {\n    width: '75%"}
{"task_id":"task/66","completion":"\n  const isOpen = !collapsed;\n  return (\n    <div className={`collapse ${isOpen ? 'is-open' : ''}`}>\n      {children}\n    </div>\n  );\n};\n\nCollapse.propTypes = {\n  collapsed: PropTypes.bool,\n  children: PropTypes.node,\n};\n\nCollapse.defaultProps = {\n  collapsed: false,"}
{"task_id":"task/66","completion":"\n  const style = collapsed ? { display: 'none' } : {};\n  return <div style={style}>{children}</div>;\n};\n\nCollapse.propTypes = {\n  collapsed: PropTypes.bool.isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nexport default Collapse;"}
{"task_id":"task/67","completion":"\n  const [ripples, setRipples] = useState([]);\n\n  const startRipple = useCallback(\n    event => {\n      setRipples(prevRipples => [\n        ...prevRipples,\n        <Ripple key={Date.now()} />,\n      ]);\n    },\n    [setRipples],\n  );\n\n  const endRipple = useCallback(\n    event => {\n      set"}
{"task_id":"task/67","completion":"\n  const [ripples, setRipples] = useState([]);\n\n  const clickHandler = (e) => {\n    setRipples([\n      ...ripples,\n      <Ripple key={Math.random()} />,\n    ]);\n    onClick(e);\n  };\n\n  return (\n    <button onClick={clickHandler}>\n      {children}\n      {ripples}\n    </button>"}
{"task_id":"task/67","completion":"\n  const handleClick = (e) => {\n    e.preventDefault();\n    onClick();\n  };\n\n  return (\n    <button\n      onClick={handleClick}\n      className=\"border border-gray-400 hover:bg-gray-400 bg-transparent hover:text-gray-700 font-semibold hover:border-transparent rounded py-2 px-4\"\n    >\n      {"}
{"task_id":"task/67","completion":"\n  const wrapperRef = useRef(null);\n  const [shouldBlur, setShouldBlur] = useState(false);\n\n  const handleMouseDown = (e) => {\n    setShouldBlur(true);\n    e.persist();\n    e.stopPropagation();\n    e.nativeEvent.stopImmediatePropagation();\n  };\n\n  const handleMouseUp = (e) => {\n    set"}
{"task_id":"task/67","completion":"\n  const [ripple, setRipple] = useState([]);\n  const classes = useStyles();\n\n  const handleMouseDown = (event) => {\n    setRipple([\n      {\n        top: event.clientY,\n        left: event.clientX,\n      },\n    ]);\n  };\n\n  const handleMouseUp = () => {\n    setRipple([]);\n  };\n\n  const"}
{"task_id":"task/68","completion":"() => {\n  const MutationObserver = (window as any).MutationObserver;\n  const isNative = MutationObserver !== undefined;\n  if (isNative) {\n    return () => {\n      const observer = new MutationObserver(callback);\n      return {\n        observe: observer.observe,\n        disconnect: observer.disconnect,\n      };\n    };\n  }\n  const prefixes"}
{"task_id":"task/68","completion":"): {\n  observe: (element: HTMLElement) => void;\n  disconnect: () => void;\n} => {\n  const observer = new MutationObserver(\n    (mutations) => {\n      mutations.forEach((mutation) => {\n        if (mutation.type === 'attributes') {\n          mutation.attributeName === 'data-name' &&\n            mutation.target.dispatchEvent(new Event"}
{"task_id":"task/68","completion":"callback: Function) => {\n  let observer: MutationObserver;\n  let fn: Function;\n  const callback2 = (mutations: MutationRecord[], observer: MutationObserver) => {\n    callback(mutations, observer);\n  };\n  const getObserver = () => {\n    if (!observer) {\n      observer = new MutationObserver(callback2);\n    }\n    return observer;\n"}
{"task_id":"task/68","completion":"options) => {\n  const observers = new WeakMap();\n  return {\n    /**\n     * @function useMutationObserver\n     * @description callback will be called if element changes\n     * @param {HTMLElement} el\n     * @param {Function} cb\n     * @param {Object} options\n     * @returns {Object}\n     */\n    on: (el, cb, options) => {"}
{"task_id":"task/68","completion":"callback) => {\n    const observer = new MutationObserver(callback);\n    observer.observe(document.body, {\n        childList: true,\n        subtree: true,\n    });\n};\n\nexport const useMutationObserverEffect = (callback) => {\n    useEffect(() => {\n        useMutationObserver(callback);\n    }, []);\n};"}
{"task_id":"task/69","completion":"\n  return (\n    <TooltipTrigger\n      mouseEnterDelay={0.1}\n      {...rest}\n    >\n      {children}\n      <TooltipContainer>\n        <TooltipArrow />\n        <TooltipText>{text}</TooltipText>\n      </TooltipContainer>\n    </TooltipTrigger>\n  );\n};\n\nTooltip.propTypes = {\n  children: PropTypes"}
{"task_id":"task/69","completion":"\n  return (\n    <TooltipWrapper {...rest}>\n      {children}\n      <TooltipText>{text}</TooltipText>\n    </TooltipWrapper>\n  );\n};\n\nexport default Tooltip;"}
{"task_id":"task/69","completion":"\n  return (\n    <TooltipWrapper {...rest}>\n      {children}\n      <TooltipText>{text}</TooltipText>\n    </TooltipWrapper>\n  );\n};\n\nTooltip.propTypes = {\n  children: PropTypes.node.isRequired,\n  text: PropTypes.string.isRequired,\n};\n\nexport default Tooltip;"}
{"task_id":"task/69","completion":"\n  return (\n    <TooltipEl {...rest}>\n      {children}\n      <span>{text}</span>\n    </TooltipEl>\n  );\n};\n\nTooltip.propTypes = {\n  children: PropTypes.node.isRequired,\n  text: PropTypes.string.isRequired,\n};\n\nexport default Tooltip;"}
{"task_id":"task/69","completion":"\n  return (\n    <TooltipWrapper\n      className=\"tooltip\"\n      tooltip={text}\n      {...rest}\n    >\n      {children}\n    </TooltipWrapper>\n  );\n};\n\nTooltip.propTypes = {\n  children: PropTypes.node.isRequired,\n  text: PropTypes.string.isRequired,\n};\n\nexport default Tooltip;"}
{"task_id":"task/70","completion":"\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return ()"}
{"task_id":"task/70","completion":"\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return ()"}
{"task_id":"task/70","completion":"\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return ()"}
{"task_id":"task/70","completion":"\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return ()"}
{"task_id":"task/70","completion":"\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return ()"}
{"task_id":"task/71","completion":"\n  return {\n    type: ERROR,\n    payload: err\n  };\n};\n\nexport const useErrorActions = () => {\n  const dispatch = useDispatch();\n  return {\n    setError: (err: string) => dispatch(useError(err))\n  };\n};"}
{"task_id":"task/71","completion":"\n  console.log(err);\n  return true;\n};\n\nconst getData = async (address, month, year) => {\n  try {\n    const response = await fetch(\n      `https://www.nemlig.com/nemlig/api/v1/rest/mandel?address=${address}&month=${month}&year=${year}`\n    );\n    const result = await response."}
{"task_id":"task/71","completion":"\n  const [errorMessage, setErrorMessage] = useState(err);\n  const [errorStatus, setErrorStatus] = useState(null);\n\n  useEffect(() => {\n    if (err) {\n      setErrorMessage(err.message);\n      setErrorStatus(err.status);\n    }\n  }, [err]);\n\n  return { errorMessage, errorStatus };\n};\n\nexport default useError;"}
{"task_id":"task/71","completion":"\n  const [error, setError] = useState(err);\n  return [error, setError];\n};\n\nexport default useError;"}
{"task_id":"task/71","completion":"\n  const [error, setError] = useState<string>(err);\n  return [error, setError];\n};\n\nconst useLoading = () => {\n  const [loading, setLoading] = useState<boolean>(false);\n  return [loading, setLoading];\n};\n\nconst useLoadingSpinner = (loading: boolean) => {\n  const [showSpinner, setShowSpinner] = useState<bo"}
{"task_id":"task/72","completion":"\n  const [copied, setCopied] = useState(false);\n  const handleClick = () => {\n    setCopied(true);\n    copy(text);\n    setTimeout(() => setCopied(false), 1000);\n  };\n  return [copied, handleClick];\n};\n\nconst CopyLink = ({ text }) => {\n  const [copied, handleClick] = useCopyToClipboard("}
{"task_id":"task/72","completion":"\n  const [hasCopied, setHasCopied] = useState(false);\n\n  const copyToClipboard = useCallback(() => {\n    if (hasCopied) return;\n\n    navigator.clipboard.writeText(text);\n    setHasCopied(true);\n\n    setTimeout(() => {\n      setHasCopied(false);\n    }, 2000);\n  }, [text, hasCopied]);\n\n"}
{"task_id":"task/72","completion":"\n  const [isLoading, setIsLoading] = useState(false);\n  const [isCopied, setIsCopied] = useState(false);\n\n  const copyToClipboard = () => {\n    setIsLoading(true);\n    setIsCopied(true);\n    setTimeout(() => {\n      setIsCopied(false);\n      setIsLoading(false);\n    }, 1500);\n  };\n\n"}
{"task_id":"task/72","completion":"\n  const [hasCopied, setHasCopied] = useState(false);\n\n  const copyToClipboard = useCallback(() => {\n    if (hasCopied) return;\n\n    copy(text);\n    setHasCopied(true);\n\n    setTimeout(() => {\n      setHasCopied(false);\n    }, 2000);\n  }, [hasCopied, text]);\n\n  return [copyToClip"}
{"task_id":"task/72","completion":"\n\tconst [isCopied, setIsCopied] = useState(false);\n\n\tconst onCopy = () => {\n\t\tsetIsCopied(true);\n\t\tsetTimeout(() => setIsCopied(false), 2000);\n\t};\n\n\treturn [isCopied, onCopy, text];\n};\n\nexport default useCopyToClipboard;"}
{"task_id":"task/73","completion":"\n  const [map, setMap] = useState(initialValue);\n\n  const updateMap = (key, value) => {\n    setMap({\n      ...map,\n      [key]: value,\n    });\n  };\n\n  return [map, updateMap];\n};\n\nexport default useMap;"}
{"task_id":"task/73","completion":"\n  const [state, setState] = useState(initialValue);\n  const set = key => value => setState({ ...state, [key]: value });\n  return [state, set];\n};\n\nconst Person = ({ name, onChange, onRemove }) => {\n  const [nameState, setName] = useMap(name);\n  const [ageState, setAge] = useMap('');\n  const [gender"}
{"task_id":"task/73","completion":"\n  const [state, setState] = useState(initialValue);\n  const setMap = useCallback(newState => {\n    setState(newState);\n  }, []);\n  return [state, setMap];\n};\n\nexport default useMap;"}
{"task_id":"task/73","completion":"\n  const map = new Map(initialValue);\n  const get = index => {\n    return map.get(index);\n  };\n  const set = (index, value) => {\n    map.set(index, value);\n  };\n  const has = index => {\n    return map.has(index);\n  };\n  const remove = index => {\n    map.delete(index);\n  };\n  const keys"}
{"task_id":"task/73","completion":"\n    const [state, setState] = useState(initialValue);\n    const setData = data => {\n        setState(data);\n    };\n    return [state, setData];\n};\n\nexport default useMap;"}
{"task_id":"task/74","completion":"\n  const result = reactLinkify({\n    target: '_blank',\n    className: '',\n    componentDecorator: (decoratedHref, decoratedText, key) => (\n      <span key={key}>\n        <a href={decoratedHref}>{decoratedText}</a>\n      </span>\n    ),\n  })(text);\n\n  return <React.Fragment"}
{"task_id":"task/74","completion":"\n  return (\n    <>\n      <a href={text} className=\"underline text-blue-600 hover:text-blue-600 no-underline\">\n        {text}\n      </a>\n    </>\n  );\n};\n\nexport default AutoLink;"}
{"task_id":"task/74","completion":"\n  const autoLink = useAutoLink(text);\n  return <Text>{autoLink}</Text>;\n};\n\nexport default AutoLink;"}
{"task_id":"task/74","completion":"\n  const [isClicked, setIsClicked] = useState(false);\n  const [state, setState] = useState({\n    data: [],\n    isLoading: false,\n    isError: false,\n  });\n\n  const checkForUnclicked = () => {\n    if (isClicked) {\n      const array = state.data.filter((item) => item.text === text);\n      if"}
{"task_id":"task/74","completion":"\n  const link = 'https://github.com/nireo/generator-nextjs';\n  return (\n    <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-sm font-medium leading-5 bg-orange-200 text-orange-800\">\n      {text}\n      <span className=\"ml-1.5\">\n        <svg\n         "}
{"task_id":"task/75","completion":"\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n};\n\nexport default useDebounce;"}
{"task_id":"task/75","completion":"\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n};\n\nconst Search = ({ searchUsers, clearUsers, showClear"}
{"task_id":"task/75","completion":"\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n};\n\nexport default useDebounce;"}
{"task_id":"task/75","completion":"\n    const [debouncedValue, setDebouncedValue] = useState(value);\n\n    useEffect(() => {\n        const handler = setTimeout(() => {\n            setDebouncedValue(value);\n        }, delay);\n\n        return () => {\n            clearTimeout(handler);\n        };\n    }, [value, delay]);\n\n    return debouncedValue;\n};\n\nexport default useDebounce;"}
{"task_id":"task/75","completion":"\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n};\n\nexport default useDebounce;"}
{"task_id":"task/76","completion":"\n  const [response, setResponse] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true);\n      try {\n        const res = await fetch(url, options);\n        const json = await res.json();"}
{"task_id":"task/76","completion":"\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    setLoading(true);\n    setError(null);\n\n    fetch(url, options)\n      .then(res => {\n        if (!res.ok) {\n          throw new Error(res"}
{"task_id":"task/76","completion":"\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const res = await fetch(url, options);\n        const json = await res.json();\n        setData(json);\n        set"}
{"task_id":"task/76","completion":"\n  const [data, setData] = useState({})\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState(null)\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(url, options)\n        const data = await response.json()\n        setData(data)\n        setLoading"}
{"task_id":"task/76","completion":"\n    const [data, setData] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        setLoading(true);\n        fetch(url, options)\n            .then(res => res.json())\n            .then(json => {\n                setData(json);\n                setLoading("}
{"task_id":"task/77","completion":"\n  useEffect(() => {\n    window.addEventListener(type, callback, options);\n    return () => {\n      window.removeEventListener(type, callback, options);\n    };\n  }, [type, callback, options]);\n};\n\nexport default useOnGlobalEvent;"}
{"task_id":"task/77","completion":"\n  return eventEmitter.on(type, callback, options);\n};\n\nexport const useOnType = (type, options) => {\n  const [emitter] = useGlobalEvent(type);\n  const on = useCallback(() => {\n    emitter.on(type, () => options.callback(type));\n  }, [type, options]);\n  useEffect(() => {\n    on();\n  }, [on"}
{"task_id":"task/77","completion":"\n  const handleEvent = (event) => {\n    if (event.type === type) {\n      callback(event);\n    }\n  };\n\n  useEffect(() => {\n    if (options) {\n      window.addEventListener(type, handleEvent, options);\n    } else {\n      window.addEventListener(type, handleEvent);\n    }\n\n    return () => {\n      window.removeEventListener("}
{"task_id":"task/77","completion":"\n  const listener = useCallback(() => {\n    try {\n      callback();\n    } catch (error) {\n      console.error(error);\n    }\n  }, [callback]);\n\n  useEffect(() => {\n    document.addEventListener(type, listener, options);\n    return () => {\n      document.removeEventListener(type, listener, options);\n    };\n  }, [type, listener, options]);"}
{"task_id":"task/77","completion":"\n  if (typeof window.addEventListener === 'undefined') {\n    return;\n  }\n\n  const listener = (event) => {\n    if (event.type === type) {\n      callback(event);\n    }\n  };\n\n  window.addEventListener(type, listener, options);\n\n  return () => {\n    window.removeEventListener(type, listener);\n  };\n};\n\nexport default use"}
