{"task_id":"task/1","completion":"\n  useEffect(() => {\n    const handler = e => {\n      if (e.key === 'Escape') {\n        fn();\n      }\n    };\n    window.addEventListener('keydown"}
{"task_id":"task/1","completion":"\n  const unload = e => {\n    e.preventDefault();\n    e.returnValue = '',\n    fn();\n  };\n  window.addEventListener('beforeunload', unload);\n"}
{"task_id":"task/1","completion":"\n    const unloadHandler = (event) => {\n        event.preventDefault();\n        event.returnValue = 'Are you sure you want to leave this page?';\n        return 'Are you sure you want to"}
{"task_id":"task/1","completion":"\n  React.useEffect(() => {\n    window.addEventListener('beforeunload', fn);\n    return () => {\n      window.removeEventListener('beforeunload', fn);\n    };\n "}
{"task_id":"task/1","completion":"\n  const [, forceUpdate] = useState(null);\n  useEffect(() => {\n    window.addEventListener('beforeunload', fn);\n    return () => {\n      window.removeEventListener"}
{"task_id":"task/2","completion":"\n    useEffect(() => {\n        const handleClickOutside = (event) => {\n            if (ref.current && !ref.current.contains(event.target)) {\n                callback();\n            }\n"}
{"task_id":"task/2","completion":"\n  const handleClick = e => {\n    if (ref.current && !ref.current.contains(e.target)) {\n      callback()\n    }\n  }\n\n  useEffect(() => {\n"}
{"task_id":"task/2","completion":"\n  useEffect(() => {\n    const handler = event => {\n      if (!ref.current || ref.current.contains(event.target)) {\n        return;\n      }\n      callback();\n   "}
{"task_id":"task/2","completion":"\n  useEffect(() => {\n    const handleClickOutside = event => {\n      if (ref.current && !ref.current.contains(event.target)) {\n        callback();\n      }\n    };"}
{"task_id":"task/2","completion":"\n    const clickHandler = event => {\n        if (ref.current && !ref.current.contains(event.target)) {\n            callback();\n        }\n    };\n\n    useEffect(() => {\n"}
{"task_id":"task/3","completion":"\n  const [value, setValue] = useState(() => {\n    try {\n      const item = sessionStorage.getItem(keyName);\n      return item ? JSON.parse(item) : defaultValue;"}
{"task_id":"task/3","completion":"\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      const item = window.sessionStorage.getItem(keyName);\n      return item ? JSON.parse("}
{"task_id":"task/3","completion":"\n  const [value, setValue] = useState(() => {\n    const stored = sessionStorage.getItem(keyName);\n    return stored ? JSON.parse(stored) : defaultValue;\n  });"}
{"task_id":"task/3","completion":"\n  const value = sessionStorage.getItem(keyName);\n  if (value === null) {\n    sessionStorage.setItem(keyName, JSON.stringify(defaultValue));\n    return defaultValue;\n"}
{"task_id":"task/3","completion":"\n  const [value, setValue] = useState(() => {\n    const value = sessionStorage.getItem(keyName);\n    return value === null ? defaultValue : value;\n  });\n\n  const set"}
{"task_id":"task/4","completion":"\n  useEffect(() => {\n    document.title = title;\n  }, [title]);\n};\n\nconst useTheme = () => {\n  const [theme, setTheme] = useState(null);\n"}
{"task_id":"task/4","completion":"\n    useEffect(() => {\n        document.title = title;\n    }, [title]);\n};\n\nexport default useTitle;"}
{"task_id":"task/4","completion":"\n  useEffect(() => {\n    document.title = title;\n  }, [title]);\n};\n\nconst toggle = (toggled, click) => {\n  if (toggled) {\n   "}
{"task_id":"task/4","completion":"\n  useEffect(() => {\n    document.title = title;\n  }, [title]);\n};\n\nconst useFetch = (url, init) => {\n  const [response, setResponse] = use"}
{"task_id":"task/4","completion":"\n\tconst [pageTitle, setPageTitle] = useState(title);\n\tuseEffect(() => {\n\t\tdocument.title = `${pageTitle} | Echterhoff.dev`;\n\t},"}
{"task_id":"task/5","completion":"\n  const mounted = useRef(false);\n  useEffect(() => {\n    if (mounted.current) return;\n    mounted.current = true;\n    callback();\n  }, [when]);\n};\n"}
{"task_id":"task/5","completion":"\n    const didRun = useRef(false);\n\n    useEffect(() => {\n        if (didRun.current) return;\n        didRun.current = true;\n        return callback();\n    }, when);"}
{"task_id":"task/5","completion":"\n  useEffect(callback, [], when);\n};\n\nexport default useEffectOnce;"}
{"task_id":"task/5","completion":"\n  const active = useRef(true);\n\n  useEffect(() => {\n    if (active.current) {\n      when && callback();\n      active.current = false;\n    }\n  }, [when"}
{"task_id":"task/5","completion":"\n  useEffect(callback, [when]);\n};\n\nconst useMounted = () => {\n  const [mounted, setMounted] = useState(false);\n  useEffectOnce(() => {\n   "}
{"task_id":"task/6","completion":"\n  const iconClass = isCollapsed ? 'icon-plus' : 'icon-minus';\n  return (\n    <li>\n      <div onClick={handleClick} className={classNames({ 'accord"}
{"task_id":"task/6","completion":"\n  const itemClass = isCollapsed ? \"collapsed\" : \"\";\n  return (\n    <div className={`accordion-item ${itemClass}`}>\n      <button className=\"acc"}
{"task_id":"task/6","completion":"\n  const handleToggle = (event) => {\n    event.preventDefault();\n    handleClick(label);\n  };\n\n  return (\n    <>\n      <h4 className=\"accordion"}
{"task_id":"task/6","completion":"\n  const [isActive, setIsActive] = useState(false);\n\n  const toggle = () => {\n    setIsActive(!isActive);\n  };\n\n  return (\n    <AccordionItem"}
{"task_id":"task/6","completion":"\n  const buttonClass = isCollapsed ? 'button collapsed' : 'button';\n  return (\n    <div className=\"accordion-item\">\n      <button className={buttonClass} onClick={handle"}
{"task_id":"task/7","completion":" typeof window !== 'undefined' && (window as any).document ? React.useLayoutEffect : React.useEffect;\n\nconst createCtx = <T>(defaultValue: T): [T, React.Dispatch"}
{"task_id":"task/7","completion":" typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect\n\nconst PREFIX = 'inline-block'\n\nexport interface InlineBlockProps {\n  className?: string\n "}
{"task_id":"task/7","completion":" typeof window !== 'undefined' ? useEffect : useLayoutEffect;\n\nexport function useEvent(eventName: string, handler: EventHandler, options?: EventOptions): void {\n  useIsomorphicEffect(()"}
{"task_id":"task/7","completion":" typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect\n\nfunction getOuterSizes(node: HTMLElement) {\n  const size = {\n    width: node."}
{"task_id":"task/7","completion":" typeof window !== 'undefined' &&\n  typeof window.document !== 'undefined' &&\n  typeof window.document.createElement !== 'undefined'\n\n/**\n * Custom hook for reading"}
{"task_id":"task/8","completion":"\n  const [state, setState] = useState(initialState);\n\n  return [state, setState];\n};\n\nexport default useGetSet;"}
{"task_id":"task/8","completion":"\n  const [state, setState] = useState(initialState);\n  return [state, setState];\n};\n\nexport default useGetSet;"}
{"task_id":"task/8","completion":"\n  const [state, setState] = useState(initialState);\n\n  return [state, setState];\n};\n\nexport default useGetSet;"}
{"task_id":"task/8","completion":"\n  const [state, setState] = useState(initialState);\n\n  return [state, setState];\n};\n\nexport default useGetSet;"}
{"task_id":"task/8","completion":"\n  const [state, setState] = useState(initialState);\n\n  return [state, setState];\n};\n\nexport default useGetSet;"}
{"task_id":"task/9","completion":"\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n"}
{"task_id":"task/9","completion":"\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n"}
{"task_id":"task/9","completion":"\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n"}
{"task_id":"task/9","completion":"\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n"}
{"task_id":"task/9","completion":"\n    const savedCallback = useRef();\n\n    // Remember the latest callback.\n    useEffect(() => {\n        savedCallback.current = callback;\n    }, [callback]);\n\n    // Set up the interval.\n"}
{"task_id":"task/10","completion":"\n  return (\n    <View\n      style={{\n        alignItems: 'center',\n        justifyContent: 'center',\n        backgroundColor: 'rgba(0,0,0,0.8)',"}
{"task_id":"task/10","completion":"\n  return (\n    <div className=\"loader\">\n      <style jsx>{`\n        .loader {\n          margin: 0 auto;\n          width: ${size}px;\n          height: ${size"}
{"task_id":"task/10","completion":"\n  return (\n    <div className=\"loader-container\">\n      <svg\n        className=\"loader\"\n        width={size}\n        height={size}\n        viewBox=\"0 0 100 100\""}
{"task_id":"task/10","completion":"\n  return (\n    <div className={`w-6 h-6 border-2 border-white flex items-center justify-center bg-white ${size}`}>\n      <div className=\"animate"}
{"task_id":"task/10","completion":"\n  return (\n    <div className={`loader ${size}`}>\n      <div className=\"spinner\">\n        <div className=\"bounce1\" />\n        <div className=\"b"}
{"task_id":"task/11","completion":"\n  const close = (e) => {\n    if (e.target.className === 'modal') {\n      onClose();\n    }\n  };\n\n  return (\n    <div className={`"}
{"task_id":"task/11","completion":"\n  const classes = useStyles();\n  return (\n    <Dialog open={isVisible}>\n      <DialogTitle>{title}</DialogTitle>\n      <DialogContent>{content}</DialogContent"}
{"task_id":"task/11","completion":"\n  const closeModal = () => {\n    onClose && onClose();\n  };\n\n  return (\n    <ModalWrapper\n      style={{\n        display: isVisible ? \"flex\" :"}
{"task_id":"task/11","completion":"\n  const handleClose = useCallback(() => {\n    onClose()\n  }, [onClose])\n\n  return (\n    <ModalBlock\n      isVisible={isVisible}\n      onClose={"}
{"task_id":"task/11","completion":"\n  const handleClose = () => {\n    onClose();\n  };\n\n  return (\n    <ModalWrapper isVisible={isVisible}>\n      <ModalOverlay />\n      <Mod"}
{"task_id":"task/12","completion":"\n    const [entry, setEntry] = useState({});\n    const [intersectionRatio, setIntersectionRatio] = useState(0);\n    const [isIntersecting, setIsIntersecting"}
{"task_id":"task/12","completion":"\n  const [intersection, setIntersection] = useState(null);\n  const observer = useRef(null);\n\n  useEffect(() => {\n    if (ref.current) {\n      observer.current"}
{"task_id":"task/12","completion":"\n  const [entry, setEntry] = useState(null);\n  const [isIntersecting, setIsIntersecting] = useState(false);\n\n  useEffect(() => {\n    const observer ="}
{"task_id":"task/12","completion":"\n  const [isIntersecting, setIsIntersecting] = useState(false);\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(entries => {\n      entries.for"}
{"task_id":"task/12","completion":"\n  const callback = useCallback(\n    (entries) => {\n      entries.forEach((entry) => {\n        if (entry.isIntersecting) {\n          options.onIntersecting()\n"}
{"task_id":"task/13","completion":"name, label, value, onChange, min, max, step, id, error }) => {\n  return (\n    <div className=\"form-group\">\n      <label htmlFor={name}>{label}</"}
{"task_id":"task/13","completion":"style, ...props }) => {\n  const styles = {\n    ...style,\n    width: '100%',\n    height: '100%',\n    position: 'absolute',\n    top: 0,\n   "}
{"task_id":"task/13","completion":"label, onChange, value, options, type, className, ...rest }) => {\n  const [currentValue, setCurrentValue] = useState(value);\n  const [left, setLeft] = useState(value"}
{"task_id":"task/13","completion":"name, label, value, onChange, min, max, step }) => {\n  return (\n    <div className=\"slider\">\n      <div className=\"form-group\">\n        <label htmlFor={name"}
{"task_id":"task/13","completion":"children, ...props }) => {\n  return (\n    <div className={cx(styles.wrapper, 'slider')}>\n      <ReactSlick {...props}>{children}</Re"}
{"task_id":"task/14","completion":"\n  const [isVisible, setIsVisible] = useState(initialState);\n\n  const toggle = () => setIsVisible(!isVisible);\n\n  return { isVisible, toggle };\n};"}
{"task_id":"task/14","completion":"\n\tconst [state, setState] = useState(initialState);\n\n\tconst toggle = useCallback(() => {\n\t\tsetState(s => !s);\n\t}, []);\n\n\treturn [state,"}
{"task_id":"task/14","completion":"\n\tconst [state, setState] = useState(initialState);\n\n\tconst toggle = () => setState(!state);\n\n\treturn [state, toggle];\n};\n\nexport default useToggler;"}
{"task_id":"task/14","completion":"\n\tconst [state, setState] = useState(initialState);\n\n\tconst setTrue = () => setState(true);\n\tconst setFalse = () => setState(false);\n\n\treturn [state, set"}
{"task_id":"task/14","completion":"\n  const [toggler, setToggler] = useState(initialState);\n\n  const toggle = () => {\n    setToggler(!toggler);\n  };\n\n  return [togg"}
{"task_id":"task/15","completion":"\n  const [value, setValue] = useState(false);\n  const onMouseOver = () => setValue(true);\n  const onMouseOut = () => setValue(false);\n  return {\n   "}
{"task_id":"task/15","completion":"\n  const [state, setState] = useState({\n    isHovering: false,\n  });\n\n  const [hovered, setHovered] = useState(false);\n\n  const handleHover ="}
{"task_id":"task/15","completion":"\n    const [hover, setHover] = useState(false);\n    const onMouseEnter = () => setHover(true);\n    const onMouseLeave = () => setHover(false);\n    return"}
{"task_id":"task/15","completion":"\n    const [hover, setHover] = useState(false);\n    const toggleHover = useCallback(() => setHover(!hover), [hover]);\n    return { hover, toggleHover };\n"}
{"task_id":"task/15","completion":"\n  const [hovered, setHovered] = useState(false);\n\n  const handleHover = () => {\n    setHovered(!hovered);\n  };\n\n  return { hovered, handleH"}
{"task_id":"task/16","completion":"\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n};\n\nexport default usePrevious;"}
{"task_id":"task/16","completion":"\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n};\n\nconst useDate = (date) => {\n "}
{"task_id":"task/16","completion":"\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n};\n\nexport default usePrevious;"}
{"task_id":"task/16","completion":"\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n};\n\nexport default usePrevious;"}
{"task_id":"task/16","completion":"\n    const ref = useRef();\n    useEffect(() => {\n        ref.current = value;\n    });\n    return ref.current;\n};\n\nexport default usePrevious;"}
{"task_id":"task/17","completion":"\n  const matches = useMedia(query);\n  return matches ? whenTrue : whenFalse;\n};\n\nconst Container = styled.div`\n  position: relative;\n  width: 100%;\n  height: 100"}
{"task_id":"task/17","completion":"\n  return useContext(MediaQueryContext) === query ? whenTrue : whenFalse;\n};\n\nconst useKeyHandler = (callback, key, action) => {\n  useEffect(() => {\n    const handler"}
{"task_id":"task/17","completion":"\n  const breakpoint = window.matchMedia(query);\n  return breakpoint.matches ? whenTrue : whenFalse;\n};\n\nconst ResponsiveMenu = ({ className, ...props }) => {\n "}
{"task_id":"task/17","completion":"\n  const mediaQuery = window.matchMedia(query);\n  const [matches, setMatches] = useState(mediaQuery.matches);\n\n  useEffect(() => {\n    const handler = event =>"}
{"task_id":"task/17","completion":"\n  const mql = window.matchMedia(query);\n  return mql.matches ? whenTrue : whenFalse;\n};\n\nconst useWidth = () => {\n  const isLg = useMediaQuery"}
{"task_id":"task/18","completion":"\n    return initialState === undefined ? defaultState : initialState;\n};\n\nconst useMappedState = (state, mapFn) => {\n    return mapFn(state);\n};\n\nconst useMap"}
{"task_id":"task/18","completion":"\n  if (initialState === undefined) {\n    return defaultState;\n  }\n\n  return initialState;\n};\n\nexport default useDefault;"}
{"task_id":"task/18","completion":"\n  if (initialState === undefined) {\n    return defaultState;\n  }\n\n  return initialState;\n};\n\nexport const useList = (state = [], { type, payload } = {}) => {"}
{"task_id":"task/18","completion":"\n    if (initialState === undefined) {\n        return defaultState;\n    }\n    return initialState;\n};\n\nexport default useDefault;"}
{"task_id":"task/18","completion":"\n  if (typeof initialState === 'undefined') {\n    return defaultState;\n  }\n  return initialState;\n};\n\nconst useLocalStorage = (key, initialState) => {\n  const"}
{"task_id":"task/19","completion":"\n  const [tag, setTag] = useState('');\n  const [tagList, setTagList] = useState(tags);\n\n  const handleAddTag = (e) => {\n    e.pre"}
{"task_id":"task/19","completion":"\n  const [input, setInput] = useState('');\n  const [newTag, setNewTag] = useState([]);\n\n  const addTag = (tag) => {\n    setNewTag(("}
{"task_id":"task/19","completion":"\n  const [currentTag, setCurrentTag] = useState('');\n  const [tagsList, setTagsList] = useState(tags);\n\n  const addTag = (e) => {\n    e."}
{"task_id":"task/19","completion":"\n  const [input, setInput] = useState('');\n  const [selected, setSelected] = useState([]);\n\n  const onChange = (e) => {\n    setInput(e."}
{"task_id":"task/19","completion":"\n  const [newTag, setNewTag] = useState('');\n  const [editing, setEditing] = useState(false);\n  const [inputRef, setInputRef] = useState("}
{"task_id":"task/20","completion":"\n  const classes = useStyles();\n  const [checked, setChecked] = useState([]);\n\n  const handleToggle = value => () => {\n    const currentIndex = checked.indexOf(value"}
{"task_id":"task/20","completion":"\n  const { state, dispatch } = useOvermind();\n\n  const checked = state.selectedItems;\n\n  const handleChange = (event) => {\n    const { target } = event;\n    const selected = state"}
{"task_id":"task/20","completion":"\n  const [selected, setSelected] = useState([]);\n\n  const onSelect = (selectedValue) => {\n    if (selected.includes(selectedValue)) {\n      setSelected(selected.filter"}
{"task_id":"task/20","completion":"\n  const [selectedOptions, setSelectedOptions] = useState([]);\n\n  const onSelect = option => {\n    const index = selectedOptions.indexOf(option);\n    if (index >= 0) {"}
{"task_id":"task/20","completion":"\n    const [state, setState] = useState({});\n\n    const toggle = (key) => {\n        setState({\n            ...state,\n            [key]: !state[key]\n        });\n   "}
{"task_id":"task/21","completion":"\n  const buildData = (data, count = 0) => {\n    if (data) {\n      return data.map((item, i) => {\n        const list = buildData(item.children, count +"}
{"task_id":"task/21","completion":"\n  return (\n    <>\n      {isOrdered ? (\n        <ol>\n          {data.map((item, i) => (\n            <li key={i}>{item}</li>"}
{"task_id":"task/21","completion":"\n  const renderData = () => {\n    if (isOrdered) {\n      return data.map((item, i) => (\n        <OrderedItem key={i} data={item} />\n      ));"}
{"task_id":"task/21","completion":"\n  const [isOpen, setIsOpen] = useState(true);\n  const [isOrderedByDate, setIsOrderedByDate] = useState(isOrdered);\n\n  return (\n    <"}
{"task_id":"task/21","completion":"\n  const ordered = isOrdered ? 'ol' : 'ul';\n  return (\n    <>\n      <StyledHeader>\n        <span>Data</span>\n      </StyledHeader>\n     "}
{"task_id":"task/22","completion":"\n  const [index, setIndex] = useState(0);\n  const [translateValue, setTranslateValue] = useState(0);\n  const { width } = useWindowDimensions();\n\n  const"}
{"task_id":"task/22","completion":"\n  const [slideIndex, setSlideIndex] = useState(0);\n  const { isMobile } = useMobile();\n\n  const onClickLeft = () => {\n    if (slideIndex > 0"}
{"task_id":"task/22","completion":"\n  const isSlide = carouselItems.length > 1;\n  const [currentSlide, setCurrentSlide] = useState(0);\n  const [currentDirection, setCurrentDirection] = use"}
{"task_id":"task/22","completion":"\n  const {\n    carousel,\n    carouselImage,\n    carouselContent,\n    carouselTitle,\n    carouselContentContainer,\n    carouselContainer,\n    carouselButton,\n    car"}
{"task_id":"task/22","completion":"\n  const [active, setActive] = useState(0);\n  const [interval, setInterval] = useState(0);\n  const [direction, setDirection] = useState(false);\n\n"}
{"task_id":"task/23","completion":"\n  const [state, setState] = useState(initialState);\n\n  const update = (updater) => {\n    const newState = Object.assign({}, state, updater);\n    setState"}
{"task_id":"task/23","completion":"\n  const [state, setState] = useState(initialState);\n  const setMergeState = (obj = {}) => {\n    setState({ ...state, ...obj });\n  };\n  return ["}
{"task_id":"task/23","completion":"\n  const [state, setState] = useState(initialState);\n\n  return [\n    state,\n    (newState) => {\n      setState((prevState) => {\n        const updatedState = {"}
{"task_id":"task/23","completion":"\n  const [state, setState] = useState(initialState);\n\n  return [\n    state,\n    useCallback(\n      (newState) => {\n        setState({\n          ...state,\n         "}
{"task_id":"task/23","completion":"\n  const [state, setState] = useState(initialState);\n\n  const mergeState = (newState) => {\n    setState((oldState) => ({ ...oldState, ...newState }));\n "}
{"task_id":"task/24","completion":"\n  const [loading, setLoading] = useState(false);\n  const [value, setValue] = useState(undefined);\n  const [error, setError] = useState(undefined);\n\n "}
{"task_id":"task/24","completion":"\n  const hook = useCallback(async () => {\n    const task = fn();\n    if (task) {\n      hook.loading = true;\n      await task;\n      hook.loading = false;\n"}
{"task_id":"task/24","completion":"\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [result, setResult] = useState(null);\n\n  useEffect"}
{"task_id":"task/24","completion":"\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState("}
{"task_id":"task/24","completion":"\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [result, setResult] = useState(null);\n\n  const handle"}
{"task_id":"task/25","completion":"\n  const lockBodyScroll = useCallback(() => {\n    const currentTarget = event.currentTarget;\n    const { body } = document;\n    const { activeElement } = document;\n    if (activeElement"}
{"task_id":"task/25","completion":"\n  const [isScrollFreeze, setIsScrollFreeze] = useState(false);\n\n  useEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n    return () => {\n"}
{"task_id":"task/25","completion":"\n  const [state, setState] = useState(false);\n  const handleScroll = () => {\n    if (\n      window.scrollY === 0 ||\n      document.documentElement.scrollTop === 0 ||"}
{"task_id":"task/25","completion":"\n    const originalStyle = window.getComputedStyle(document.body).overflow;\n    document.body.style.overflow = 'hidden';\n    return () => {\n        document.body.style.over"}
{"task_id":"task/25","completion":"\n  const [isBodyOverflowHidden, setIsBodyOverflowHidden] = useState(false);\n\n  const hideBodyOverflow = () => {\n    if (!isBodyOverflowHidden) {\n      setIs"}
{"task_id":"task/26","completion":"\n  const [values, setValues] = useState(initialValues);\n\n  const handleChange = e => {\n    setValues({\n      ...values,\n      [e.target.name]: e.target.value"}
{"task_id":"task/26","completion":"\n    const [values, setValues] = useState(initialValues);\n\n    const onChange = e => {\n        setValues({\n            ...values,\n            [e.target.name]: e.target.value"}
{"task_id":"task/26","completion":"\n  const [values, setValues] = useState(initialValues);\n\n  const handleChange = event => {\n    setValues({\n      ...values,\n      [event.target.name]: event.target.value"}
{"task_id":"task/26","completion":"\n  const [values, setValues] = useState(initialValues);\n\n  const handleChange = e => {\n    setValues({\n      ...values,\n      [e.target.name]: e.target.value"}
{"task_id":"task/26","completion":"\n    const [values, setValues] = useState(initialValues);\n\n    const handleInputChange = event => {\n        event.persist();\n        setValues(values => ({\n            ...values,\n            ["}
{"task_id":"task/27","completion":"\n  const hasPortal = el.closest('.portal')\n  const portal = hasPortal ? hasPortal : document.createElement('div')\n  portal.classList.add('portal')"}
{"task_id":"task/27","completion":"\n  const documentFragment = document.createDocumentFragment();\n  const container = document.createElement('div');\n  const root = document.createElement('div');\n  root.classList.add('portal"}
{"task_id":"task/27","completion":"\n  if (!el) return null;\n  const elRef = useRef(null);\n  useEffect(() => {\n    const node = elRef.current;\n    if (node && el) {\n     "}
{"task_id":"task/27","completion":"\n  if (!el) return;\n  if (el.hasAttribute('data-portal')) return;\n  el.setAttribute('data-portal', 'true');\n  if (document.body.cont"}
{"task_id":"task/27","completion":"\n  if (!el) return;\n  if (el.nodeType === 1) {\n    el.removeAttribute('aria-hidden');\n    el.setAttribute('aria-modal', true);\n    el."}
{"task_id":"task/28","completion":"\n  return (\n    <a\n      href={`mailto:${email}?subject=${subject}&body=${body}`}\n      className=\"text-blue-400 hover:text-blue-"}
{"task_id":"task/28","completion":"\n  return (\n    <a\n      href={`mailto:${email}?subject=${subject}&body=${body}`}\n      rel=\"noopener noreferrer\"\n      target=\""}
{"task_id":"task/28","completion":"\n  const subjectAttr = (subject) ? `subject=${subject}` : '';\n  const bodyAttr = (body) ? `body=${body}` : '';\n  const mailtoString ="}
{"task_id":"task/28","completion":"\n  return (\n    <a\n      href={`mailto:${email}?subject=${subject}&body=${body}`}\n      target=\"_blank\"\n      rel=\"noopener nore"}
{"task_id":"task/28","completion":"\n  const subjectValue = subject.trim()\n  const bodyValue = body.trim()\n\n  const handleMailto = () => {\n    if (subjectValue) {\n      window.location.href = `"}
{"task_id":"task/29","completion":"\n  const isPressed = React.useRef(false);\n\n  const onKeyPress = React.useCallback(\n    e => {\n      if (e.key === targetKey) {\n        isPressed."}
{"task_id":"task/29","completion":"\n\tconst [keyPressed, setKeyPressed] = useState(false);\n\n\tconst onKeyDown = (event) => {\n\t\tif (event.key === targetKey) {\n\t\t\tset"}
{"task_id":"task/29","completion":"\n  const [keyPressed, setKeyPressed] = useState(false);\n\n  const keyPress = ({ key }) => {\n    if (key === targetKey) {\n      setKeyPressed(true);"}
{"task_id":"task/29","completion":"\n  const pressHandlers = useCallback(() => {\n    console.log(`Key pressed ${targetKey}`);\n  }, [targetKey]);\n\n  const upHandlers = useCallback(() => {\n"}
{"task_id":"task/29","completion":"\n  const [keyPressed, setKeyPressed] = useState(false);\n\n  const keyDownHandler = ({ key }) => {\n    if (key === targetKey) {\n      setKeyPressed(true"}
{"task_id":"task/30","completion":"\n  const [timeLeft, setTimeLeft] = useState(0);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setTimeLeft(initialTime => initialTime -"}
{"task_id":"task/30","completion":"\n  const time = {\n    hours,\n    minutes,\n    seconds,\n  };\n\n  return (\n    <>\n      <Row className=\"justify-content-center\">\n        <Col>\n"}
{"task_id":"task/30","completion":"\n  const formattedTime = `${formatNumber(hours)}:${formatNumber(minutes)}:${formatNumber(seconds)}`;\n  return (\n    <div className=\"countdown\">\n      <span class"}
{"task_id":"task/30","completion":"\n  const [time, setTime] = useState({ hours, minutes, seconds });\n  const getTimeUntil = () => {\n    const { hours, minutes, seconds } = time;\n    const timeRemaining ="}
{"task_id":"task/30","completion":"\n  const [timer, setTimer] = useState(0);\n  const [isCounting, setIsCounting] = useState(false);\n\n  useEffect(() => {\n    if (isCounting"}
{"task_id":"task/31","completion":"\n  const [show, setShow] = useState(isDefaultShown);\n  const onMouseEnter = () => setShow(true);\n  const onMouseLeave = () => setShow(false);\n\n  use"}
{"task_id":"task/31","completion":"\n  const [isShown, setIsShown] = useState(isDefaultShown);\n  const [isTimeoutShown, setIsTimeoutShown] = useState(false);\n\n  useEffect(()"}
{"task_id":"task/31","completion":"\n  const [isVisible, setIsVisible] = useState(isDefaultShown);\n  const [timeLeft, setTimeLeft] = useState(timeout);\n\n  useEffect(() => {\n   "}
{"task_id":"task/31","completion":"\n  const [state, setState] = useState({\n    show: isDefaultShown,\n    timeout: timeout,\n    type: type,\n    message: message,\n  });\n\n  useEffect(()"}
{"task_id":"task/31","completion":"\n  const [isShown, setIsShown] = useState(isDefaultShown);\n  const toggleIsShown = () => setIsShown(!isShown);\n\n  useEffect(() =>"}
{"task_id":"task/32","completion":"\n  const [hash, setHash] = useState(window.location.hash.substr(1));\n\n  useEffect(() => {\n    const handler = () => setHash(window.location.hash.sub"}
{"task_id":"task/32","completion":"\n  const [hash, setHash] = useState('');\n\n  useEffect(() => {\n    const { pathname, hash } = window.location;\n    const uri = `${pathname}${"}
{"task_id":"task/32","completion":"\n  const [hash, setHash] = useState<string | null>(null);\n\n  useEffect(() => {\n    setHash(window.location.hash);\n    window.addEventListener('hashchange',"}
{"task_id":"task/32","completion":"\n  const [hash, setHash] = useState('');\n  const [page, setPage] = useState(1);\n  const [isNextPage, setIsNextPage] = useState(true);"}
{"task_id":"task/32","completion":"\n  const history = useHistory();\n  const hash = useLocation().hash;\n  const hashMatch = hash.match(/^#\\/?(.+)/);\n  const hashLink = hashMatch ? hashMatch"}
{"task_id":"task/33","completion":"\n  const [state, setState] = useState(initialState);\n  const [show, setShow] = useState(condition);\n\n  const action = useCallback(() => {\n    setShow(true);"}
{"task_id":"task/33","completion":"\n  const [state, setState] = useState(initialState);\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      if (condition) {\n        setState(!state"}
{"task_id":"task/33","completion":"\n  const [value, setValue] = useState(initialState);\n  const [delayedValue, setDelayedValue] = useState(initialState);\n\n  useEffect(() => {\n    const timeout ="}
{"task_id":"task/33","completion":"\n  const [state, setState] = useState(initialState);\n  const isReady = useRef(false);\n\n  useEffect(() => {\n    if (!isReady.current && condition) {\n     "}
{"task_id":"task/33","completion":"\n  const [state, setState] = useState(initialState);\n  const [delayedState, setDelayedState] = useState(initialState);\n\n  useEffect(() => {\n    const timer ="}
{"task_id":"task/34","completion":"\n  const [searchParams, setSearchParams] = useState([]);\n  const [searchParam, setSearchParam] = useState(param);\n\n  useEffect(() => {\n    const { search"}
{"task_id":"task/34","completion":"\n    const {\n        location: { search },\n    } = window;\n    const params = new URLSearchParams(search);\n    return params.get(param);\n};\n\nconst useParams ="}
{"task_id":"task/34","completion":"\n    return useMemo(() => queryString.parse(param), [param]);\n};\n\nconst useSearchParamValue = param => {\n    const parsed = useSearchParam(param);\n    return useMemo"}
{"task_id":"task/34","completion":"\n  const url = window.location.href;\n  const searchParam = url.split(\"?\")[1];\n  if (searchParam) {\n    const params = searchParam.split(\"&\");\n    const result"}
{"task_id":"task/34","completion":"\n  const { location } = useReactRouter();\n  const searchParams = new URLSearchParams(location.search);\n  return searchParams.get(param);\n};\n\nconst useQuery"}
{"task_id":"task/35","completion":"\n  const [update, setUpdate] = useState(false);\n  const forceUpdate = useCallback(() => setUpdate(v => !v), []);\n  return [update, forceUpdate];\n};\n\n"}
{"task_id":"task/35","completion":"\n  const [createData, setCreateData] = useState(init.create);\n  const [updateData, setUpdateData] = useState(init.update);\n  const [deleteData, setDeleteData]"}
{"task_id":"task/35","completion":"\n  const [update, { loading }] = useMutation(UPDATE_DEVICE, {\n    refetchQueries: [{ query: GET_DEVICES }],\n    awaitRefetchQueries: true,\n"}
{"task_id":"task/35","completion":"\n  const [updating, setUpdating] = useState(false);\n  const set = useCallback(\n    (update: string) => {\n      setUpdating(true);\n      window.fetch("}
{"task_id":"task/35","completion":"\n  const [state, setState] = useState<ISetState>({\n    id: '',\n    content: '',\n    isUpdate: false,\n  });\n\n  const onChange = (e:"}
{"task_id":"task/36","completion":"\n  const handleChange = (value) => {\n    onValueChange(value);\n  };\n\n  return (\n    <SelectBase\n      {...rest}\n      name={rest.name}\n      value={"}
{"task_id":"task/36","completion":"\n  const handleChange = value => {\n    onValueChange(value);\n  };\n\n  return (\n    <SelectComp\n      {...rest}\n      values={values}\n      onChange={handleChange}"}
{"task_id":"task/36","completion":"\n  const [valuesArray, setValuesArray] = useState([]);\n\n  useEffect(() => {\n    if (Array.isArray(values)) {\n      setValuesArray(values);\n    }\n"}
{"task_id":"task/36","completion":"\n  const classes = useStyles()\n  const theme = useTheme()\n  const [open, setOpen] = useState(false)\n\n  const openMenu = () => {\n    setOpen(true)\n"}
{"task_id":"task/36","completion":"\n  const [isOpen, setIsOpen] = useState(false);\n  const ref = useRef();\n\n  const handleToggle = () => {\n    setIsOpen(!isOpen);\n  };\n\n"}
{"task_id":"task/37","completion":"\n  const [errors, setErrors] = useState([]);\n  const ref = useRef();\n\n  const onChange = (e) => {\n    const newValue = e.target.value;\n   "}
{"task_id":"task/37","completion":"\n  const [warning, setWarning] = useState(false);\n  const [text, setText] = useState(value);\n\n  const handleChange = (e) => {\n    const { value } = e"}
{"task_id":"task/37","completion":"\n  return (\n    <TextareaAutosize\n      value={value}\n      onChange={e => {\n        if (e.target.value.length > limit) {\n          e.target.value ="}
{"task_id":"task/37","completion":"\n  const [text, setText] = useState(value);\n  const [isOver, setIsOver] = useState(false);\n\n  const handleChange = (e) => {\n    setText(e"}
{"task_id":"task/37","completion":"\n  return (\n    <Fragment>\n      <ReactQuill\n        value={value}\n        readOnly\n        modules={{\n          toolbar: false,\n        }}\n        style={{\n          width"}
{"task_id":"task/38","completion":"\n\tconst [scrollTop, setScrollTop] = useState(0);\n\n\tuseEffect(() => {\n\t\tconst onScroll = () => {\n\t\t\tconst scrollHeight = document.documentElement.scroll"}
{"task_id":"task/38","completion":"\n  useEffect(() => {\n    const handleScroll = () => {\n      const inner = window.innerHeight;\n      const height = document.documentElement.scrollHeight;\n      const scrolled = (window."}
{"task_id":"task/38","completion":"\n  useEffect(() => {\n    const handleScroll = () => {\n      callback();\n    };\n    window.addEventListener('scroll', handleScroll);\n    return () => {\n      window.removeEvent"}
{"task_id":"task/38","completion":"\n  useEffect(() => {\n    const handleScroll = () => {\n      callback();\n    };\n    window.addEventListener('scroll', handleScroll);\n    return () => {\n      window.removeEvent"}
{"task_id":"task/38","completion":"\n  const handleScroll = () => {\n    const { scrollY } = window;\n    const isScrolledToBottom = scrollY >= window.innerHeight;\n    const isAtTop = scrollY === 0;\n"}
{"task_id":"task/39","completion":"\n  const handleClick = (e) => {\n    if (ref.current && !ref.current.contains(e.target)) {\n      callback();\n    }\n  };\n\n  useEffect(() =>"}
{"task_id":"task/39","completion":"\n    const handleClick = e => {\n        if (ref.current && !ref.current.contains(e.target)) {\n            callback();\n        }\n    };\n\n    useEffect(() => {\n"}
{"task_id":"task/39","completion":"\n  const handleClick = (e) => {\n    if (ref.current && !ref.current.contains(e.target)) {\n      callback();\n    }\n  };\n\n  useEffect(() =>"}
{"task_id":"task/39","completion":"\n  const handleClick = event => {\n    if (ref.current && !ref.current.contains(event.target)) {\n      callback();\n    }\n  };\n\n  useEffect(() => {\n"}
{"task_id":"task/39","completion":"\n    const handleClick = (e) => {\n        if (ref.current && !ref.current.contains(e.target)) {\n            callback()\n        }\n    }\n\n    useEffect(() =>"}
{"task_id":"task/40","completion":"\n  typeof window !== 'undefined' &&\n  window.document &&\n  window.document.createElement\n);\n\nconst USE_DOM = isDOMavailable && IS_BROWSER;\n\nconst shared"}
{"task_id":"task/40","completion":"\n  typeof window !== 'undefined' &&\n  window.document &&\n  window.document.createElement\n);\n\n/**\n * DESIGN NOTES\n *\n * The following is a description of the algorithm"}
{"task_id":"task/40","completion":"typeof window !== 'undefined' && window.document && window.document.createElement);\n\nconst ReactDOMServer = {\n  renderToString: (element: React.ReactElement<any>) => {\n"}
{"task_id":"task/40","completion":"\n  typeof window !== 'undefined' &&\n  window.document &&\n  window.document.createElement\n);\n\nconst dom = {\n  isReal: isDOMavailable,\n  isTest: false"}
{"task_id":"task/40","completion":"typeof window !== 'undefined' && window.document && window.document.createElement);\n\nmodule.exports = isDOMavailable;\n\n},{}],21:[function(require,module,exports){"}
{"task_id":"task/41","completion":"\n  const rowsArray = new Array(rows).fill('');\n  const rowsString = rowsArray.join('\\n');\n  const text = `${rowsString}${value}`;\n  const [line"}
{"task_id":"task/41","completion":"\n  const limitedValue = value.length > limit ? `${value.substring(0, limit)}...` : value;\n  return (\n    <textarea\n      className=\"limited-textarea\"\n     "}
{"task_id":"task/41","completion":"\n  const [count, setCount] = useState(value.length);\n  const [valueSaved, setValueSaved] = useState(value);\n\n  const handleChange = e => {\n    const text"}
{"task_id":"task/41","completion":"\n  const [isEmpty, setIsEmpty] = useState(true);\n  const [isOverflow, setIsOverflow] = useState(false);\n  const [isEmptyLimit, setIsEmptyLimit]"}
{"task_id":"task/41","completion":"\n  const [text, setText] = useState(value);\n  const [truncated, setTruncated] = useState(false);\n\n  const onChange = (e) => {\n    setText"}
{"task_id":"task/42","completion":"\n  const mounted = useRef(false);\n\n  useEffect(() => {\n    if (!mounted.current) {\n      mounted.current = true;\n    } else {\n      onMountHandler();\n    }"}
{"task_id":"task/42","completion":"\n  return (WrappedComponent) => {\n    return (props) => {\n      useEffect(() => {\n        onMountHandler(props);\n      }, []);\n      return <WrappedComponent {"}
{"task_id":"task/42","completion":"\n  const useOnMount = () => {\n    useEffect(() => {\n      onMountHandler();\n    }, []);\n  };\n\n  return useOnMount;\n};\n\nexport default useComponentDidMount"}
{"task_id":"task/42","completion":"\n  useEffect(() => {\n    if (onMountHandler) {\n      onMountHandler();\n    }\n  }, []);\n};\n\nexport default useComponentDidMount;"}
{"task_id":"task/42","completion":"\n  useEffect(() => {\n    onMountHandler()\n  }, [])\n}\n\nexport default useComponentDidMount"}
{"task_id":"task/43","completion":"\n  const { acceptedFiles, getRootProps, getInputProps } = useDropzone({\n    onDrop,\n    accept: \"image/*\",\n  });\n\n  return (\n    <div {...get"}
{"task_id":"task/43","completion":"\n  const drop = useRef(null);\n\n  const handleDrop = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    onDrop(e.dataTransfer.files"}
{"task_id":"task/43","completion":"\n  const onDropHandler = useCallback(\n    acceptedFiles => {\n      const file = acceptedFiles[0];\n      const reader = new FileReader();\n      reader.onabort = () => console.log('"}
{"task_id":"task/43","completion":"\n  const fileRef = useRef(null);\n\n  const onDragOver = (e) => {\n    e.preventDefault();\n  };\n\n  const onDropFile = (e) => {\n    e"}
{"task_id":"task/43","completion":"\n  const classes = useStyles();\n  const [file, setFile] = useState();\n  const [dragOver, setDragOver] = useState(false);\n\n  const handleDrop = (e)"}
{"task_id":"task/44","completion":" data, labelKey, onClick }) => {\n  const [{ isDragging }, drag] = useDrag({\n    item: { type: ItemTypes.CARD, data },\n    end: (item, monitor) =>"}
{"task_id":"task/44","completion":"\n  tree,\n  onNodeChange,\n  onNodeDelete,\n  onNodeCreate,\n  onNodeUp,\n  onNodeDown,\n  onNodeEdit,\n  onNodeDragStart,\n  on"}
{"task_id":"task/44","completion":" treeData, setTreeData, folder, setFolder }) => {\n  const { path, name } = folder;\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [isRen"}
{"task_id":"task/44","completion":" id, children, className, onChange, data, field, value, onToggle, onExpand }) => {\n  const [state, setState] = useState({ expandedKeys: [], selectedKeys: [] });\n"}
{"task_id":"task/44","completion":"\n  classes,\n  className,\n  children,\n  ...rest\n}: TreeViewProps): ReactElement => {\n  const cls = clsx(classes.root, className);\n  return (\n"}
{"task_id":"task/45","completion":"\n  const [state, setState] = useState(() => {\n    const persistState = JSON.parse(localStorage.getItem(name));\n    return persistState !== null ? persistState : defaultValue;"}
{"task_id":"task/45","completion":"\n  const [state, setState] = useState(() => {\n    const persistedState = localStorage.getItem(name);\n    return persistedState !== null ? JSON.parse(persistedState) : default"}
{"task_id":"task/45","completion":"\n  const [value, setValue] = useState(\n    JSON.parse(window.localStorage.getItem(name)) || defaultValue\n  );\n\n  const setValueToLocalStorage = useCallback(() =>"}
{"task_id":"task/45","completion":"\n  const [state, setState] = useState(() => {\n    try {\n      const storageValue = localStorage.getItem(name);\n      if (storageValue) {\n        return JSON.parse("}
{"task_id":"task/45","completion":"\n  const [state, setState] = useState(() => {\n    try {\n      const serializedState = localStorage.getItem(name);\n      if (serializedState === null) {\n        return"}
{"task_id":"task/46","completion":"\n  const [windowSize, setWindowSize] = useState({\n    width: undefined,\n    height: undefined,\n  });\n\n  useEffect(() => {\n    function handleResize() {\n      set"}
{"task_id":"task/46","completion":"\n  const [size, setSize] = useState(window.innerWidth);\n\n  useEffect(() => {\n    const handleResize = () => {\n      setSize(window.innerWidth);\n    };"}
{"task_id":"task/46","completion":"\n  const [windowSize, setWindowSize] = useState({\n    width: undefined,\n    height: undefined,\n  });\n\n  useEffect(() => {\n    function handleResize() {\n      set"}
{"task_id":"task/46","completion":"\n  const [size, setSize] = useState({\n    width: window.innerWidth,\n    height: window.innerHeight,\n  });\n\n  useEffect(() => {\n    const handleResize ="}
{"task_id":"task/46","completion":"\n  const [size, setSize] = useState({\n    width: window.innerWidth,\n    height: window.innerHeight,\n  });\n\n  useEffect(() => {\n    const onResize ="}
{"task_id":"task/47","completion":"\n  const onChange = useCallback(\n    (e) => {\n      onValueChange(e.target.value);\n    },\n    [onValueChange]\n  );\n\n  return <input value={value"}
{"task_id":"task/47","completion":"\n  const handleChange = e => {\n    onValueChange(e.target.value);\n  };\n\n  return <input value={value} onChange={handleChange} {...rest} />;\n};\n\n"}
{"task_id":"task/47","completion":"\n  const [internalValue, setInternalValue] = useState(value);\n\n  useEffect(() => {\n    setInternalValue(value);\n  }, [value]);\n\n  const onChange = event => {\n"}
{"task_id":"task/47","completion":"\n  const onChange = event => {\n    const { target: { value } } = event;\n    onValueChange(value);\n  };\n\n  return (\n    <input value={value} onChange={on"}
{"task_id":"task/47","completion":"\n  const [isFocused, setIsFocused] = useState(false);\n  const onBlur = () => setIsFocused(false);\n  const onFocus = () => setIsFocused(true"}
{"task_id":"task/48","completion":"\n  const [sorted, setSorted] = useState([])\n  const [searchQuery, setSearchQuery] = useState('')\n  const [checked, setChecked] = useState([])\n"}
{"task_id":"task/48","completion":"\n  const classes = useStyles();\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(5);\n\n  const handleChange"}
{"task_id":"task/48","completion":"\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Name',\n        accessor: 'name',\n      },\n      {\n        Header: 'Age',\n       "}
{"task_id":"task/48","completion":"\n  return (\n    <div className=\"data-table\">\n      <table>\n        <thead>\n          <tr>\n            <th>name</th>\n            <th>price</th>"}
{"task_id":"task/48","completion":"\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Date',\n        accessor: 'date',\n      },\n      {\n        Header: 'Stock',\n       "}
{"task_id":"task/49","completion":"\n  const componentWillUnmount = componentProps => {\n    // componentWillUnmount is called when unmounting. However, we have already ran componentWillUnmount\n    // from componentWillUnmount. So we can"}
{"task_id":"task/49","completion":"\n  const ref = useRef(null);\n  useEffect(() => {\n    ref.current = onUnmountHandler;\n    return () => {\n      ref.current();\n    };\n  }, []);"}
{"task_id":"task/49","completion":"\n  return useEffect(() => {\n    return () => {\n      onUnmountHandler();\n    };\n  }, []);\n};\n\nexport default useComponentWillUnmount;"}
{"task_id":"task/49","completion":"\n  const {\n    current: { onUnmount = () => {} }\n  } = React.useRef(onUnmountHandler);\n\n  React.useEffect(() => {\n    return () => {\n     "}
{"task_id":"task/49","completion":"\n  useEffect(() => {\n    return () => {\n      onUnmountHandler()\n    }\n  }, [])\n}\n\nexport default useComponentWillUnmount"}
{"task_id":"task/50","completion":"\n  const [activeIndex, setActiveIndex] = useState(defaultIndex);\n\n  const _onTabClick = index => {\n    setActiveIndex(index);\n    onTabClick && onTabClick(index);"}
{"task_id":"task/50","completion":"\n  const [currentIndex, setCurrentIndex] = useState(defaultIndex);\n\n  const getTabItems = () => {\n    return React.Children.map(children, (child, index) => {\n      return"}
{"task_id":"task/50","completion":"\n  const [activeIndex, setActiveIndex] = useState(defaultIndex);\n\n  const handleTabClick = index => {\n    setActiveIndex(index);\n    onTabClick && onTabClick(index);\n"}
{"task_id":"task/50","completion":"\n  const [active, setActive] = useState(defaultIndex);\n\n  const onClick = index => {\n    setActive(index);\n    onTabClick(index);\n  };\n\n  return (\n   "}
{"task_id":"task/50","completion":"\n  const [current, setCurrent] = useState(defaultIndex);\n\n  const handleTabClick = index => {\n    setCurrent(index);\n    onTabClick && onTabClick(index);\n  };\n\n"}
{"task_id":"task/51","completion":" {\n  return (dispatch: any) => {\n    dispatch(getOnLineStatusRequest());\n    // eslint-disable-next-line\n    setTimeout(() => {\n      dispatch(getOnLineStatus"}
{"task_id":"task/51","completion":" {\n  return async (dispatch: ThunkDispatch<{}, {}, any>) => {\n    const localInfo = await wx.getSystemInfo();\n    const status = localInfo.networkType === 'none' ?"}
{"task_id":"task/51","completion":" {\n  let onLine = false;\n  try {\n    if (typeof window !== 'undefined') {\n      onLine = navigator.onLine;\n    }\n  } catch (e) {\n"}
{"task_id":"task/51","completion":" {\n  let onlineStatus = document.body.getAttribute('online-status');\n  if (onlineStatus === 'on') {\n    return true;\n  }\n  return false;\n};\n\nexport default function Online"}
{"task_id":"task/51","completion":" {\n  return true;\n};\n\nexport const getData = (params: any) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const list = JSON."}
{"task_id":"task/52","completion":"\n  const [showPassword, setShowPassword] = useState(false);\n\n  const handleClick = () => {\n    setShowPassword(!showPassword);\n  };\n\n  return (\n    <div>\n"}
{"task_id":"task/52","completion":"\n  const [show, setShow] = useState(false);\n\n  return (\n    <div className=\"password-revealer\">\n      <input\n        type={show ? \"text\" : \"password\"}\n"}
{"task_id":"task/52","completion":"\n  const [reveal, setReveal] = useState(false);\n\n  return (\n    <div>\n      <TextField\n        id=\"standard-password-input\"\n        type={reveal ?"}
{"task_id":"task/52","completion":"\n  const [showPassword, setShowPassword] = useState(false);\n\n  const handleClick = (e) => {\n    e.preventDefault();\n    setShowPassword(!showPassword);\n  };"}
{"task_id":"task/52","completion":"\n    const [show, setShow] = useState(false);\n    const onClick = () => setShow(!show);\n\n    return (\n        <div className=\"password-revealer\">\n            <div"}
{"task_id":"task/53","completion":"\n  const className = `react-star-rating__star ${marked ? 'react-star-rating__star--active' : ''}`;\n  return (\n    <svg className={className} xml"}
{"task_id":"task/53","completion":"\n  const colors = ['#ffaf61', '#ffd08b', '#ffffbf', '#d9ef8b', '#a6d96a'];\n  const backgroundColor = colors[star"}
{"task_id":"task/53","completion":"\n  const classNames = marked ? 'star marked' : 'star';\n  return <div className={classNames}>{starId}</div>;\n};\n\nexport default Star;"}
{"task_id":"task/53","completion":"\n  const { onMarked, onUnmarked } = useMarkedCallback(starId);\n  const isMarked = marked;\n\n  return (\n    <div className=\"star\" onClick={isMarked"}
{"task_id":"task/53","completion":"\n  const starStyle = {\n    backgroundColor: marked ? \"#4ca984\" : \"#fff\",\n    border: marked ? \"1px solid transparent\" : \"1px solid #c1c1c1\","}
{"task_id":"task/54","completion":"\n  const didUpdate = useCallback(() => {\n    callback();\n  }, [callback]);\n\n  if (condition) {\n    useEffect(didUpdate, [condition]);\n  }\n};\n\nexport default"}
{"task_id":"task/54","completion":"\n  const didUpdate = useCallback(\n    (prevProps, prevState) => {\n      if (condition) {\n        callback(prevProps, prevState);\n      }\n    },\n    [callback"}
{"task_id":"task/54","completion":"\n  const result = useRef({\n    prevProps: null,\n    prevState: null,\n  });\n\n  if (condition) {\n    callback();\n  }\n\n  useEffect(() => {\n"}
{"task_id":"task/54","completion":"\n  const componentDidUpdate = (prevProps, prevState) => {\n    if (condition(prevProps, prevState)) {\n      callback(prevProps, prevState);\n    }\n  };\n\n"}
{"task_id":"task/54","completion":"\n  const prevProps = useRef(props);\n  const prevState = useRef(state);\n\n  useEffect(() => {\n    if (condition(prevProps.current, prevState.current))"}
{"task_id":"task/55","completion":"\n  const [isToggled, setIsToggled] = useState(defaultToggled);\n\n  const toggle = () => setIsToggled(!isToggled);\n\n  return (\n   "}
{"task_id":"task/55","completion":"\n  const [toggled, setToggled] = useState(defaultToggled);\n\n  const handleClick = () => {\n    setToggled(!toggled);\n  };\n\n  return"}
{"task_id":"task/55","completion":"\n  const [toggled, setToggled] = useState(defaultToggled);\n\n  const toggle = () => setToggled(!toggled);\n\n  return (\n    <Container onClick"}
{"task_id":"task/55","completion":"\n  const [toggled, setToggled] = useState(defaultToggled);\n\n  const handleClick = () => {\n    setToggled(!toggled);\n  };\n\n  return"}
{"task_id":"task/55","completion":"\n  const [isToggled, setIsToggled] = useState(defaultToggled);\n\n  const handleToggle = () => {\n    setIsToggled(!isToggled);\n"}
{"task_id":"task/56","completion":"\n  const mappedTableData = data.map(item => {\n    const mappedItem = {};\n    propertyNames.forEach(propertyName => {\n      mappedItem[propertyName] = item[propertyName];\n"}
{"task_id":"task/56","completion":"\n  const { getMappedData } = useBulkActions();\n  const mappedData = getMappedData(data, propertyNames);\n  return <BulkTable data={mappedData} />;\n};"}
{"task_id":"task/56","completion":"\n  const { data: mappedData, columns } = useTable(data, propertyNames);\n  return (\n    <table>\n      <thead>\n        <tr>\n          {columns.map((column"}
{"task_id":"task/56","completion":"\n  const mappedArray = data.map(row => {\n    return propertyNames.map(propertyName => {\n      return (\n        <tr key={propertyName}>\n          <td>{propertyName}</"}
{"task_id":"task/56","completion":"\n  return (\n    <TableWrapper>\n      <Table>\n        <thead>\n          <tr>\n            {propertyNames.map(propertyName => (\n              <TableHeader key={propertyName}"}
{"task_id":"task/57","completion":"\n  el.addEventListener(type, handler);\n  return () => el.removeEventListener(type, handler);\n};\n\nconst useEffect = (callback, dependencies) => {\n  useLayoutEffect(callback"}
{"task_id":"task/57","completion":"\n  const callback = event => handler(event);\n  useEffect(() => {\n    el.addEventListener(type, callback);\n    return () => {\n      el.removeEventListener(type, callback);"}
{"task_id":"task/57","completion":"\n    el.addEventListener(type, handler);\n    return () => el.removeEventListener(type, handler);\n};\n\nclass ProjectRow extends Component {\n    constructor(props) {\n        super("}
{"task_id":"task/57","completion":"\n  el.addEventListener(type, handler);\n  return () => el.removeEventListener(type, handler);\n};\n\nconst preventHtml5Dnd = (event) => {\n  event.pre"}
{"task_id":"task/57","completion":"\n  const listener = (event) => handler(event);\n  el.addEventListener(type, listener);\n  return () => el.removeEventListener(type, listener);\n};\n\nexport default useEventListener"}
{"task_id":"task/58","completion":"\n  return (\n    <ButtonBase\n      href={`tel:${phone}`}\n      onClick={(e) => {\n        e.preventDefault();\n        sendGAEvent('callto-button"}
{"task_id":"task/58","completion":"\n  return (\n    <a\n      href={`tel:${phone}`}\n      className=\"text-theme-7 text-lg leading-7 font-medium hover:text-theme-9\"\n"}
{"task_id":"task/58","completion":"\n  return (\n    <a href={`tel:${phone}`}>\n      <button className=\"button\">{children}</button>\n    </a>\n  );\n};\n\nexport default Call"}
{"task_id":"task/58","completion":"\n  return (\n    <Link href={`tel:${phone}`}>\n      <a className=\"callto\">{children}</a>\n    </Link>\n  );\n};\n\nexport default"}
{"task_id":"task/58","completion":"\n  return (\n    <a\n      href={`tel:${phone}`}\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n      className=\"callto\"\n   "}
{"task_id":"task/59","completion":"\n\tuseEffect(() => {\n\t\tconst handleResize = () => {\n\t\t\tcallback();\n\t\t};\n\t\twindow.addEventListener('resize', handleResize);\n\t\treturn"}
{"task_id":"task/59","completion":"\n  const windowResizeEvent = () => {\n    callback();\n  };\n\n  window.addEventListener('resize', windowResizeEvent);\n\n  return () => {\n    window.removeEventListener('res"}
{"task_id":"task/59","completion":"\n\tconst handleResize = () => {\n\t\tconst { innerWidth: width, innerHeight: height } = window;\n\t\tcallback({ width, height });\n\t};\n\n\tuseEffect(() => {\n"}
{"task_id":"task/59","completion":"\n\tconst eventName = 'resize';\n\tconst listener = () => {\n\t\tconst node = window;\n\t\tconst win = node.window;\n\t\tconst doc = node.document;\n\t\t"}
{"task_id":"task/59","completion":"\n  const resizeTimer = {};\n  const onResize = (window.innerWidth, window.innerHeight) => {\n    clearTimeout(resizeTimer.timer);\n    resizeTimer.timer = setTimeout("}
{"task_id":"task/60","completion":"\n  const [value, setValue] = useState(defaultValue);\n\n  const handleChange = e => {\n    setValue(e.target.value);\n    onValueChange(e.target.value);\n"}
{"task_id":"task/60","completion":"\n  const [value, setValue] = useState(defaultValue);\n\n  const onChange = (event) => {\n    setValue(event.target.value);\n    onValueChange(event.target.value"}
{"task_id":"task/60","completion":"\n  const [value, setValue] = useState(defaultValue);\n\n  const handleChange = (e) => {\n    const { value } = e.target;\n    setValue(value);\n    onValue"}
{"task_id":"task/60","completion":"\n  const [value, setValue] = useState(defaultValue);\n\n  const handleChange = e => {\n    setValue(e.target.value);\n    onValueChange(e.target.value);\n"}
{"task_id":"task/60","completion":"\n  const [value, setValue] = useState(defaultValue)\n\n  useEffect(() => {\n    if (value !== defaultValue) {\n      setValue(defaultValue)\n    }\n  },"}
{"task_id":"task/61","completion":"\n  name,\n  label,\n  onChange,\n  placeholder,\n  error,\n  value,\n  rows,\n  cols,\n  id,\n  style,\n  type,\n  valueType"}
{"task_id":"task/61","completion":" name, label, error, ...rest }) => {\n  return (\n    <div className=\"form-group\">\n      <label htmlFor={name}>{label}</label>\n      <textarea\n        {"}
{"task_id":"task/61","completion":" name, value, onChange, placeholder, error, rows }) => {\n  return (\n    <div className=\"form-group\">\n      <textarea\n        className=\"form-control\"\n        placeholder={placeholder"}
{"task_id":"task/61","completion":" name, label, error, ...rest }) => {\n  return (\n    <div className=\"form-group\">\n      <label htmlFor={name}>{label}</label>\n      <textarea\n        {"}
{"task_id":"task/61","completion":" name, label, error, ...rest }) => {\n  return (\n    <div className=\"form-group\">\n      <label htmlFor={name}>{label}</label>\n      <textarea\n        {"}
{"task_id":"task/62","completion":"\n  const [ready, setReady] = useState(false)\n  const [failed, setFailed] = useState(false)\n\n  useEffect(() => {\n    if (!ready && !failed) {"}
{"task_id":"task/62","completion":"\n  // We create a new script element.\n  const script = document.createElement('script');\n  script.async = true;\n  script.src = src;\n\n  // Then append it to the DOM."}
{"task_id":"task/62","completion":"\n  useEffect(() => {\n    const script = document.createElement('script');\n    script.src = src;\n    script.async = true;\n    document.body.appendChild(script);\n"}
{"task_id":"task/62","completion":"\n  useEffect(() => {\n    if (!document.getElementById(src)) {\n      const script = document.createElement('script');\n      script.id = src;\n      script.src = src;"}
{"task_id":"task/62","completion":"\n  useEffect(() => {\n    const s = document.createElement('script');\n    s.src = src;\n    s.async = true;\n    document.body.appendChild(s);\n"}
{"task_id":"task/63","completion":"\n  useEffect(() => {\n    const handle = requestAnimationFrame(callback);\n    return () => cancelAnimationFrame(handle);\n  }, [callback]);\n};\n\nconst PostDetails = ({ match }) => {"}
{"task_id":"task/63","completion":"\n    const handle = requestAnimationFrame(callback);\n    return () => cancelAnimationFrame(handle);\n};\n\nexport const toPercent = (min, max, value) => {\n    return ((value - min) /"}
{"task_id":"task/63","completion":"\n  useEffect(() => {\n    let requestId;\n    const animationFrame = () => {\n      requestId = requestAnimationFrame(animationFrame);\n      callback();\n    };\n    requestId = request"}
{"task_id":"task/63","completion":"\n  const requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;\n  const raf = requestAnimationFrame(callback);\n "}
{"task_id":"task/63","completion":"\n  let requestAnimationFrame;\n  let canceled = false;\n  let isCanceled = () => canceled;\n  const raf = (...args) => {\n    if (canceled) return;\n"}
{"task_id":"task/64","completion":"\n  const [value, setValue] = useState(initialValue);\n  return [value, setValue];\n};\n\nconst useToggle = initialValue => {\n  const [value, setValue] = use"}
{"task_id":"task/64","completion":"\n    const [state, setState] = useState(initialValue);\n    return [state, setState];\n};\n\nexport default useSet;"}
{"task_id":"task/64","completion":"\n  const [state, setState] = useState(initialValue);\n  return [state, setState];\n};\n\nexport default useSet;"}
{"task_id":"task/64","completion":"\n  const [data, setData] = useState(initialValue);\n  return [data, setData];\n};\n\nexport const useAuth = () => {\n  const [data, setData] = useState"}
{"task_id":"task/64","completion":"\n  const [state, setState] = useState(initialValue);\n  return [state, setState];\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {"}
{"task_id":"task/65","completion":"\n  const [value, setValue] = useState(\n    localStorage.getItem(keyName) || defaultValue\n  );\n\n  const setValueToLocalStorage = value => {\n    localStorage.setItem"}
{"task_id":"task/65","completion":"\n  const [value, setValue] = useState(defaultValue);\n\n  useEffect(() => {\n    const storageValue = localStorage.getItem(keyName);\n    if (storageValue) {\n     "}
{"task_id":"task/65","completion":"\n  const [value, setValue] = useState(() => {\n    try {\n      const item = window.localStorage.getItem(keyName);\n      return item ? JSON.parse(item) : default"}
{"task_id":"task/65","completion":"\n  if (typeof window === 'undefined') return defaultValue;\n  if (!localStorage.getItem(keyName)) {\n    localStorage.setItem(keyName, JSON.stringify(defaultValue));"}
{"task_id":"task/65","completion":"\n  const [value, setValue] = useState(() => {\n    try {\n      const storageValue = localStorage.getItem(keyName);\n      if (storageValue) {\n        return JSON.parse"}
{"task_id":"task/66","completion":"\n  const [height, setHeight] = useState(null);\n  const node = useRef();\n\n  useEffect(() => {\n    if (!collapsed) {\n      setHeight(node.current.scroll"}
{"task_id":"task/66","completion":"\n  const classes = useStyles();\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\n\n  const [open, setOpen] = useState"}
{"task_id":"task/66","completion":"\n  const [open, setOpen] = useState(false);\n\n  const handleClick = () => {\n    setOpen(!open);\n  };\n\n  return (\n    <>\n      <div\n       "}
{"task_id":"task/66","completion":"\n  const classes = useStyles();\n  const theme = useTheme();\n  const [open, setOpen] = React.useState(false);\n\n  const handleClick = () => {\n    setOpen(!"}
{"task_id":"task/66","completion":"\n  const collapseStyles = {\n    overflow: 'hidden',\n    height: '0px',\n    padding: '0',\n    transition: 'height .4s ease',\n  };\n\n  const expandedSty"}
{"task_id":"task/67","completion":"\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <div className={classes.content}>\n        <Button onClick={onClick}>{"}
{"task_id":"task/67","completion":"\n  const [hover, setHover] = useState(false);\n  const onMouseEnter = () => setHover(true);\n  const onMouseLeave = () => setHover(false);\n\n  return"}
{"task_id":"task/67","completion":"\n  const [, updateState] = useState();\n  const [startTransition] = useTransition(() => Date.now(), null, {\n    from: {\n      opacity: 0,\n      transform:"}
{"task_id":"task/67","completion":"\n  const [startRipple, setStartRipple] = useState(false);\n  const rippleRef = useRef(null);\n\n  const classes = classNames({\n    'whitespace-no-wrap text"}
{"task_id":"task/67","completion":"\n  const [isPressed, setIsPressed] = useState(false);\n\n  const onButtonPress = () => {\n    setIsPressed(true);\n    onClick();\n  };\n\n  const"}
{"task_id":"task/68","completion":"\n  container: HTMLElement,\n  callback: (event: MutationObserverInit) => void\n) => {\n  const mutationObserver = new MutationObserver(callback);\n  mutationObserver."}
{"task_id":"task/68","completion":"element: Element | null) => {\n  const observer = new MutationObserver(() => {\n    const array = Array.from(element?.children ?? []);\n    element?.children = array;\n "}
{"task_id":"task/68","completion":"): [boolean, Function] => {\n  const isSupported = typeof MutationObserver !== 'undefined';\n  const isMutated = false;\n\n  if (isSupported) {\n    const callback ="}
{"task_id":"task/68","completion":"ref: any) => {\n  const mutationObserver = new MutationObserver(() => {\n    if (ref.current) {\n      scrollToRef(ref)\n    }\n  })\n\n  return mutation"}
{"task_id":"task/68","completion":"element, callback) => {\n  const handleRefresh = () => {\n    callback(element);\n  };\n\n  useEffect(() => {\n    const observer = new MutationObserver(handleRefresh);\n"}
{"task_id":"task/69","completion":"\n  return (\n    <div className=\"tooltip\" {...rest}>\n      {children}\n      <span className=\"tooltiptext\">{text}</span>\n    </div>\n "}
{"task_id":"task/69","completion":"\n  return (\n    <div className=\"tooltip\" {...rest}>\n      {children}\n      <span className=\"tooltiptext\">{text}</span>\n    </div>\n "}
{"task_id":"task/69","completion":"\n  return (\n    <TooltipWrapper {...rest}>\n      {children}\n      <TooltipText>{text}</TooltipText>\n    </TooltipWrapper>\n  );\n};"}
{"task_id":"task/69","completion":"\n  return (\n    <Wrapper {...rest}>\n      {children}\n      <Text>{text}</Text>\n    </Wrapper>\n  );\n};\n\nexport default Tooltip;"}
{"task_id":"task/69","completion":"\n  return (\n    <TooltipWrapper {...rest}>\n      {children}\n      <TooltipText>{text}</TooltipText>\n    </TooltipWrapper>\n  );\n};"}
{"task_id":"task/70","completion":"\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n"}
{"task_id":"task/70","completion":"\n  const timer = setTimeout(callback, delay);\n  return () => clearTimeout(timer);\n};\n\nconst useFocus = (ref, onFocus) => {\n  const handleFocus = useCallback(() =>"}
{"task_id":"task/70","completion":"\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n"}
{"task_id":"task/70","completion":"\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n"}
{"task_id":"task/70","completion":"\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n"}
{"task_id":"task/71","completion":"\n  useEffect(() => {\n    console.log(err);\n  }, [err]);\n};\n\nexport default useError;"}
{"task_id":"task/71","completion":"\n\tif (typeof err === 'string') {\n\t\treturn {\n\t\t\tvalue: undefined,\n\t\t\thasError: true,\n\t\t\ttype: 'string',\n\t\t\tmessage:"}
{"task_id":"task/71","completion":"\n  const [error, setError] = useState(err);\n  return [error, setError];\n};\n\nconst useActiveUser = () => {\n  const [activeUser, setActiveUser] = use"}
{"task_id":"task/71","completion":"\n  const [state, setState] = useState({\n    status: \"\",\n    message: \"\",\n  });\n\n  useEffect(() => {\n    if (err) {\n      setState({\n"}
{"task_id":"task/71","completion":"\n  const [error, setError] = useState(err);\n  return [error, setError];\n};\n\nexport default useError;"}
{"task_id":"task/72","completion":"\n  const [copied, setCopied] = useState(false);\n  const handleClick = () => {\n    setCopied(true);\n    copy(text);\n    setTimeout(() => setCop"}
{"task_id":"task/72","completion":"\n\tconst [copied, setCopied] = useState(false);\n\n\tconst copyToClipboard = () => {\n\t\tconst textArea = document.createElement('textarea');\n\t\ttextArea"}
{"task_id":"task/72","completion":"\n  const [copied, setCopied] = useState(false);\n  const onCopy = () => {\n    setCopied(true);\n    setTimeout(() => setCopied(false), 2000);"}
{"task_id":"task/72","completion":"\n  const [isCopied, setIsCopied] = useState(false);\n\n  const handleCopy = () => {\n    navigator.clipboard.writeText(text);\n    setIsCopied(true"}
{"task_id":"task/72","completion":"\n  const [isCopied, setIsCopied] = useState(false);\n\n  const copyToClipboard = () => {\n    copy(text);\n    setIsCopied(true);\n    set"}
{"task_id":"task/73","completion":"\n  const store = useRef({\n    ...initialValue,\n    get: key => store.current[key],\n    set: (key, value) => (store.current[key] = value),\n    remove"}
{"task_id":"task/73","completion":"\n\tlet key = 0;\n\treturn {\n\t\tmap: new Map(),\n\t\tset: value => {\n\t\t\tconst nextKey = key++;\n\t\t\tconst nextValue = initialValue ? initial"}
{"task_id":"task/73","completion":"\n  const [map, setMap] = useState(initialValue);\n\n  const getMap = () => map;\n\n  const setMapValue = (key, value) => {\n    setMap({\n      ...map"}
{"task_id":"task/73","completion":"\n  const [state, setState] = useState(initialValue);\n  const set = key => value => {\n    setState({\n      ...state,\n      [key]: value,\n    });\n  };"}
{"task_id":"task/73","completion":"\n  const [results, setResults] = useState(initialValue);\n\n  const add = (...args) => {\n    const key = args[0];\n    if (key === undefined) {\n      throw new"}
{"task_id":"task/74","completion":"\n  const handleClick = useCallback(() => {\n    window.open(text);\n  }, [text]);\n\n  return (\n    <Button size=\"small\" variant=\"outlined\" onClick={handleClick}"}
{"task_id":"task/74","completion":"\n  return (\n    <a\n      href={`https://www.google.com/search?q=${text}`}\n      target=\"_blank\"\n      rel=\"noopener noreferrer\""}
{"task_id":"task/74","completion":"\n  const { email } = parse(text);\n  const isEmail = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2"}
{"task_id":"task/74","completion":"\n  const output = text.split(' ').map((word) => {\n    if (word.match(/^https?:\\/\\//)) {\n      return (\n        <a\n          key={word}"}
{"task_id":"task/74","completion":"\n  const Link = props => {\n    const match = props.match.match(/(?<=^|\\s|\\()([\\w\\.\\:\\/]+)/)\n    if (match && isValidURL"}
{"task_id":"task/75","completion":"\n    const [debouncedValue, setDebouncedValue] = useState(value);\n\n    useEffect(() => {\n        const handler = setTimeout(() => {\n            setDebouncedValue(value);\n       "}
{"task_id":"task/75","completion":"\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n   "}
{"task_id":"task/75","completion":"\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n   "}
{"task_id":"task/75","completion":"\n    const [debouncedValue, setDebouncedValue] = useState(value);\n\n    useEffect(() => {\n        const handler = setTimeout(() => {\n            setDebouncedValue(value);\n       "}
{"task_id":"task/75","completion":"\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n   "}
{"task_id":"task/76","completion":"\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  useEffect"}
{"task_id":"task/76","completion":"\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect"}
{"task_id":"task/76","completion":"\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  useEffect"}
{"task_id":"task/76","completion":"\n  const [response, setResponse] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n "}
{"task_id":"task/76","completion":"\n  const [response, setResponse] = useState({})\n  const [error, setError] = useState(null)\n  const [isLoading, setIsLoading] = useState(false)\n\n  use"}
{"task_id":"task/77","completion":"\n  const callbackRef = useRef();\n  useEffect(() => {\n    const el = document.body;\n    const handleEvent = () => {\n      callbackRef.current();\n    };\n    el."}
{"task_id":"task/77","completion":"\n  if (useGlobalEventListeners[type]) {\n    throw new Error(`The event ${type} is already being listened`);\n  }\n\n  const { once } = options || {};\n\n  useEffect"}
{"task_id":"task/77","completion":"\n  const handler = (e) => {\n    if (e.type === type) {\n      callback(e);\n    }\n  };\n\n  window.addEventListener(type, handler, options);\n\n "}
{"task_id":"task/77","completion":"\n  const { capture = false, once = false } = options || {}\n  const handle = (event) => {\n    if (event.type === type) {\n      callback(event)\n      if (once)"}
{"task_id":"task/77","completion":"\n  const event = typeof type === 'string' ? new CustomEvent(type, options) : type\n  document.addEventListener(event.type, callback)\n  return () => document.removeEventListener(event"}
