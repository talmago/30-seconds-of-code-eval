{"task_id":"task/1","completion":"\n    return [i for i, x in enumerate(lst) if x == value]\n\nif __name__ == '__main__':\n    main()"}
{"task_id":"task/1","completion":"\n    return [i for i, v in enumerate(lst) if v == value]\n\n\ndef make_simulated_path(size, *args):\n    \"\"\"\n    make_simulated_path(size,"}
{"task_id":"task/1","completion":"\n    \"\"\"Returns a list of indexes in which value can be found in lst.\n\n    >>> index_of_all([2, 3, 5, 3], 3)\n    [1, 3]\n    \"\"\"\n    indexes"}
{"task_id":"task/1","completion":"\n    '''Finds the indexes of all occurences of value in lst'''\n    return [i for i, x in enumerate(lst) if x == value]\n\ndef read_seq(filename):"}
{"task_id":"task/1","completion":"\n    res = []\n    for i, x in enumerate(lst):\n        if x == value:\n            res.append(i)\n    return res\n\ndef find_sub_list(sl,l):"}
{"task_id":"task/2","completion":"\n    return lst[0]\n\ndef tail(lst):\n    return lst[1:]\n\ndef transpose(lst):\n    return list(map(list, zip(*lst)))\n\ndef"}
{"task_id":"task/2","completion":"\n    return lst[0]\n\ndef tail(lst):\n    return lst[1:]\n\ndef empty(lst):\n    return lst == []\n\ndef sum_list(lst):\n"}
{"task_id":"task/2","completion":"\n    \"\"\"Returns the first element of a list.\"\"\"\n    return lst[0]\n\n\ndef tail(lst):\n    \"\"\"Returns the last element of a list.\"\"\"\n    return lst[-1]\n\n"}
{"task_id":"task/2","completion":"\n    return lst[0]\n\ndef tail(lst):\n    return lst[1:]\n\ndef init(lst):\n    return lst[:-1]\n\ndef last(lst):\n"}
{"task_id":"task/2","completion":"\n    return lst[0]\n\ndef tail(lst):\n    return lst[1:]\n\ndef is_empty(lst):\n    return not lst\n\ndef length(lst):\n   "}
{"task_id":"task/3","completion":"\n    \"\"\"Returns the n maximum elements from the provided list. \n    If n is greater than or equal to the provided list's length, \n    then return the original list (sorted in descending order).\n    \"\"\"\n   "}
{"task_id":"task/3","completion":"\n    '''\n    return the n max elements in a list\n    Parameters:\n        lst: list\n            list of numerical values\n        n: int\n            number of max elements to return\n    '''\n    return"}
{"task_id":"task/3","completion":"\n    \"\"\"Returns the n maximum elements from the provided list. \n\n    Keyword arguments:\n    lst -- the list to check\n    n -- the number of elements to return (default 1)\n    \"\"\"\n    return heap"}
{"task_id":"task/3","completion":"\n    \"\"\"\n    >>> max_n([1,2,3,4,5])\n    5\n    >>> max_n([1,2,3,4,5], 2)\n    5\n    >>> max_"}
{"task_id":"task/3","completion":"\n    max_n = []\n    for i in range(0, n):\n        max_n.append(max(lst))\n        lst.remove(max(lst))\n    return max_n\n"}
{"task_id":"task/4","completion":"\n    return datetime.strftime(d, \"%Y-%m-%d\")\n\ndef get_soup(url):\n    # Fetch url\n    print(f\"Fetching: {url}\")"}
{"task_id":"task/4","completion":"\n    \"\"\"Convert the given date to the ISO 8601 format, unless it is None, in\n    which case None is returned.\"\"\"\n    if d is None:\n        return None\n    else:\n        return d."}
{"task_id":"task/4","completion":"\n    return datetime.strftime(d, \"%Y-%m-%d\")\n\ndef get_link(link):\n    return link.split('\"')[1]\n\ndef get_content(link):"}
{"task_id":"task/4","completion":"\n    return d.strftime('%Y-%m-%d')\n\ndef from_iso_date(s):\n    return datetime.strptime(s, '%Y-%m-%d')"}
{"task_id":"task/4","completion":"\n    if not d:\n        return None\n    if d == 'None':\n        return None\n    try:\n        return datetime.strptime(d, '%Y-%m-%d').date()"}
{"task_id":"task/5","completion":"\n    list = sorted(list)\n    if len(list)%2 == 0:\n        return (list[len(list)/2]+list[len(list)/2-1])/2.0\n    else:"}
{"task_id":"task/5","completion":"\n    sortedList = sorted(list)\n    listLen = len(list)\n    index = (listLen - 1) // 2\n\n    if (listLen % 2):\n        return sortedList[index]\n    else"}
{"task_id":"task/5","completion":"\n    \"\"\"\n    Args: list (list): list of numbers.\n    Returns: median value (float)\n    \"\"\"\n    # sort the list\n    list.sort()\n    # check for even list length and calculate"}
{"task_id":"task/5","completion":"\n    median = 0\n    length = len(list)\n    if (length % 2 == 0):\n        index_odd = length / 2\n        index_even = index_odd - 1\n        median = (list["}
{"task_id":"task/5","completion":"\n    list.sort()\n    if len(list) % 2 == 0:\n        return (list[len(list)//2] + list[len(list)//2 - 1]) / 2\n    else:\n"}
{"task_id":"task/6","completion":"\n    longest = 0\n    for i in args:\n        if len(i) > longest:\n            longest = len(i)\n    return longest\n\ndef longest_item_re(*args):\n    return max("}
{"task_id":"task/6","completion":"\n    longest = \"\"\n    for i in args:\n        if len(i) > len(longest):\n            longest = i\n    return longest\n\nprint(longest_item(\"one\", \"two\", \"three"}
{"task_id":"task/6","completion":"\n    res = []\n    for arg in args:\n        res.append(len(arg))\n    return res\n\n# >>> longest_item(\"one\", \"two\", \"three\")\n# [3, 3, 5"}
{"task_id":"task/6","completion":"\n    \"\"\"\n    :param args:\n    :return:\n    \"\"\"\n    return max(args, key=len)\n\n\ndef get_common_part(a, b):\n    \"\"\"\n    :param a:"}
{"task_id":"task/6","completion":"\n    print(max(args, key=len))\nlongest_item('this', 'is', 'a', 'test', 'case')\n# another solution\ndef longest_item(*args):\n    return max(args"}
{"task_id":"task/7","completion":"\n    s = list(iterable)\n    return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))\n\na = input().split()\nb = list("}
{"task_id":"task/7","completion":"\n    \"powerset([1,2,3]) --> () (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)\"\n    s = list"}
{"task_id":"task/7","completion":"\n    s = list(iterable)\n    return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))\n\n#print(list(powerset(['a','"}
{"task_id":"task/7","completion":"\n    s = list(iterable)\n    return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))\n\ndef main():\n    N = input()\n   "}
{"task_id":"task/7","completion":"\n    s = list(iterable)\n    return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))\n\ndef select_from_list(l, n):"}
{"task_id":"task/8","completion":"\n    \"\"\"Finds the indices of all elements in lst where fn is True.\"\"\"\n    indices = []\n    for i, elem in enumerate(lst):\n        if fn(elem):\n            indices."}
{"task_id":"task/8","completion":"\n    \"\"\"Return the indices of all items in lst where fn(item) is True.\"\"\"\n    return [i for i, x in enumerate(lst) if fn(x)]\n\n\ndef find_index_of"}
{"task_id":"task/8","completion":"\n    \"\"\"\n    Find the index of all items in the list\n    that satisfies the given predicate.\n    \"\"\"\n    return [i for i, e in enumerate(lst) if fn(e)]\n\n\ndef all"}
{"task_id":"task/8","completion":"\n    \"\"\"Finds all indices in a list where a predicate is true.\n\n    Args:\n        lst: A list.\n        fn: A function taking an element and returning a bool.\n\n    Returns:\n        A"}
{"task_id":"task/8","completion":"\n    idx = []\n    for i, x in enumerate(lst):\n        if fn(x):\n            idx.append(i)\n    return idx\n\ndef iif(condition, true_"}
{"task_id":"task/9","completion":"\n    return list(islice(itr, n))\n\ndef take_nth(itr, n = 1):\n    return list(islice(itr, 0, None, n))\n\ndef tabulate"}
{"task_id":"task/9","completion":"\n    \"\"\"\n    This function returns the first n elements of an iterator as a list.\n    :param itr: The iterator.\n    :param n: The number of elements to return.\n    :return: The first n"}
{"task_id":"task/9","completion":"\n    return itr[0:n]\n\ndef read_int(file):\n    return int(file.readline())\n\ndef read_int_array(file, sep = ' '):\n    return [int"}
{"task_id":"task/9","completion":"\n    if n < 0:\n        raise ValueError('Cannot take a negative number of elements from the iterable')\n    return itr[:n]\n\ndef take_nth(itr, n = 1):"}
{"task_id":"task/9","completion":"\n    for i in range(n):\n        yield next(itr)\n\ndef get(itr, k = 0):\n    return next(take(itr, k))\n\ndef nth(itr,"}
{"task_id":"task/10","completion":"\n    return lst[-1]\n\n\ndef subsets(lst):\n    return [[]] if len(lst) == 0 else (\n        [lst] + [lst[:k] + lst"}
{"task_id":"task/10","completion":"\n    if lst:\n        return lst[-1]\n    else:\n        return None\n\ndef merge(result, op):\n    def insert(key, value):\n        if not result.has_key"}
{"task_id":"task/10","completion":"\n    if lst == []:\n        return None\n    else:\n        return lst[-1]\n\ndef assign(x, y):\n    globals()[x] = y\n\ndef isa("}
{"task_id":"task/10","completion":"\n    return lst[-1]\n\ndef second(lst):\n    return lst[1]\n\ndef key(lst):\n    return last(lst)\n\ndef is_number(x):"}
{"task_id":"task/10","completion":"\n    \"\"\"Returns the last element of a list\"\"\"\n    return lst[-1]\n\n\ndef before_last(lst):\n    \"\"\"Returns the element before the last of a list\"\"\"\n    return lst[-"}
{"task_id":"task/11","completion":"\n    t = Thread(target=fn, args=args)\n    t.start()\n    sleep(ms/1000)\n    return t\n\ndef _get_device_by_port(port):\n    for d"}
{"task_id":"task/11","completion":"\n    \"\"\"\n    This function allows you to delay the execution of a function.\n\n    :param fn: The function to be delayed.\n    :param ms: The number of milliseconds to delay the function by.\n    :param args"}
{"task_id":"task/11","completion":"\n    def wrapper():\n        sleep(ms/1000)\n        return fn(*args)\n    return wrapper\n\n@delay\ndef hello(name):\n    print(\"Hello, {}!\".format(name))\n\n# hello"}
{"task_id":"task/11","completion":"\n    def wrap(*args):\n        sleep(ms/1000)\n        return fn(*args)\n    return wrap\n\ndef my_decorator(func):\n    def wrapper():\n        print(\"Something is happening before"}
{"task_id":"task/11","completion":"\n    sleep(ms / 1000)\n    return fn(*args)\n\ndef get_key_value(item):\n    return item[1]\n\ndef sort_dict(d):\n    return sorted(d.items"}
{"task_id":"task/12","completion":"\n    def _fn(*_args):\n        return fn(*(args + _args))\n    return _fn\n\nclass Tee:\n    def __init__(self, file):\n        self.file = file\n   "}
{"task_id":"task/12","completion":"\n    return partial(fn, *args)\n\n\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def __repr__("}
{"task_id":"task/12","completion":"\n    def curried(*more_args):\n        return fn(*(args + more_args))\n    return curried\n\ndef uppercase(s):\n    return s.upper()\n\ndef test():\n   "}
{"task_id":"task/12","completion":"\n    def curried(*more_args):\n        return fn(*(args + more_args))\n    return curried\n\n# curry = lambda fn, *args: lambda *more_args: fn(*(args + more"}
{"task_id":"task/12","completion":"\n    \"\"\"\n    Return a curried version of the given function,\n    in the style of `functools.partial`\n\n    Example\n    -------\n    def add(x, y):\n        return x + y\n\n"}
{"task_id":"task/13","completion":"\n    for l in lst:\n        if fn(l):\n            return l\n    return None\n\ndef get_thread_id(i3con):\n    tree = i3con.get_tree()\n   "}
{"task_id":"task/13","completion":"\n    \"\"\"\n    Return the first item in lst that returns True in fn.\n    \"\"\"\n    for item in lst:\n        if fn(item):\n            return item\n    return None\n\ndef rev(l"}
{"task_id":"task/13","completion":"\n    for item in lst:\n        if fn(item):\n            return item\n    return None\n\ndef main():\n    results = []\n    for case in xrange(input()):\n        C, D,"}
{"task_id":"task/13","completion":"\n    for l in lst:\n        if fn(l):\n            return l\n    return None\n\ndef isValid(p):\n    if p.parachute:\n        return True\n    elif p."}
{"task_id":"task/13","completion":"\n    for el in lst:\n        if fn(el):\n            return el\n    return None\n\ndef find_index(lst, fn):\n    for i, el in enumerate(lst):\n       "}
{"task_id":"task/14","completion":"\n    return ' '.join([word.capitalize() for word in s.split(' ')])\n\ndef levenshtein(s1, s2):\n    if len(s1) < len(s2):"}
{"task_id":"task/14","completion":"\n    return ' '.join([x.capitalize() for x in s.split(' ')])\n\nclass Command(BaseCommand):\n    help = 'Imports a text file of RepoCommits into the database'\n\n"}
{"task_id":"task/14","completion":"\n    s = s.split(' ')\n    s = map(lambda x: x.capitalize(), s)\n    return ' '.join(s)\n\nclass User(object):\n    def __init__(self"}
{"task_id":"task/14","completion":"\n    return ' '.join([w.capitalize() for w in s.split(' ')])\n\n\ndef capitalize_initial_letters(s):\n    return ' '.join([w[0].upper() + w[1"}
{"task_id":"task/14","completion":"\n    return ' '.join([w.capitalize() for w in s.split(' ')])\n\ndef is_same_full_name(name1, name2):\n    return normalize_full_name(name"}
{"task_id":"task/15","completion":"\n    for i in range(2, int(sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef get_primes(max_number):\n   "}
{"task_id":"task/15","completion":"\n    if n % 2 == 0 and n > 2: \n        return False\n    for i in range(3, int(sqrt(n)) + 1, 2):\n        if n % i == 0:\n           "}
{"task_id":"task/15","completion":"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    limit = int(sqrt(n))\n    i = 2\n    while i <= limit:\n        if n %"}
{"task_id":"task/15","completion":"\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef find_prime_factors(n):\n   "}
{"task_id":"task/15","completion":"\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nprint"}
{"task_id":"task/16","completion":"\n    for value in values:\n        if value not in lst:\n            return False\n    return True\n\n\n@register.filter\ndef append_to_list(lst, value):\n    if value not in l"}
{"task_id":"task/16","completion":"\n    for value in values:\n        if value not in lst:\n            return False\n    return True\n\n\ndef plot_gene_means(data, gene, bins=50, ax=None, plot_mean"}
{"task_id":"task/16","completion":"\n    \"\"\"Returns true if all of the strings in values are in lst.\"\"\"\n    for v in values:\n        if v not in lst:\n            return False\n    return True\n\n\ndef includes_any(l"}
{"task_id":"task/16","completion":"\n    \"\"\"Check that the list contains all the values.\"\"\"\n    for value in values:\n        if value not in lst:\n            return False\n    return True\n\n\ndef validate_args(args):\n    \"\"\"Check"}
{"task_id":"task/16","completion":"\n    return all(item in lst for item in values)\n\n\ndef get_version():\n    from .__init__ import __version__\n    return __version__\n\n\ndef get_name():\n    from .__"}
{"task_id":"task/17","completion":"\n    if d.weekday() == 5 or d.weekday() == 6:\n        return True\n    else:\n        return False\n\ndef get_last_date(filename):\n    df = pd.read"}
{"task_id":"task/17","completion":"\n    if d.weekday() == 5 or d.weekday() == 6:\n        return True\n    else:\n        return False\n\ndef is_workday(d = datetime.today()):\n    if"}
{"task_id":"task/17","completion":"\n    return d.weekday() in [5, 6]\n\ndef is_weekday(d = datetime.today()):\n    return d.weekday() in [0, 1, 2, 3, 4]"}
{"task_id":"task/17","completion":"\n    if d.weekday() == 5 or d.weekday() == 6:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    print(is_week"}
{"task_id":"task/17","completion":"\n    if d.weekday() == 5 or d.weekday() == 6:\n        return True\n    else:\n        return False\n\ndef is_leap(year):\n    if (year % 4 == 0"}
{"task_id":"task/18","completion":"\n    return 'spread({})'.format(arg)\n\n\ndef cached_item(arg):\n    return 'cached_item({})'.format(arg)\n\n\ndef cached_item_call(arg):\n    return"}
{"task_id":"task/18","completion":"\n    return abs(min(arg)) + max(arg)\n\ndef flatten(lst):\n    return [item for sublist in lst for item in sublist]\n\ndef args_to_lists(args"}
{"task_id":"task/18","completion":"\n    \"\"\"spread(iterable) -> iterator\n\n    Runs the iterable and executes every returned value as a function argument\n    in the same way.\n\n    :param iterable: Input iterable\n    :return: The iterable"}
{"task_id":"task/18","completion":"\n    \"\"\"\n    Given a string of a Gimp color palette file, it will return a list\n    of the colors in that file.\n\n    Gimp color palette files are RGB color definitions of the form:\n\n    # Comments\n"}
{"task_id":"task/18","completion":"\n    '''\n    Return the aggregation by spreading values of the given sequence.\n    '''\n    _args = []\n    prev = None\n    for i in arg:\n        if prev is None:\n            prev ="}
{"task_id":"task/19","completion":"\n    return int(str(n)[::-1])\n\ndef is_palindrome(n):\n    return n == reverse_number(n)\n\ndef is_lychrel(n):\n    for i"}
{"task_id":"task/19","completion":"\n    return int(str(n)[::-1])\n\ndef is_palindrome(n):\n    return n == reverse_number(n)\n\ndef is_lychrel(n):\n    for i"}
{"task_id":"task/19","completion":"\n    return int(str(n)[::-1])\n\ndef is_lychrel(n):\n    for i in range(0, 50):\n        n += reverse_number(n)\n        if n =="}
{"task_id":"task/19","completion":"\n    return int(str(n)[::-1])\n\ndef is_palindrome(n):\n    if reverse_number(n) == n:\n        return True\n    else:\n        return False\n\n"}
{"task_id":"task/19","completion":"\n    return int(str(n)[::-1])\n\ndef reverse_signed_number(n):\n    return copysign(reverse_number(abs(n)), n)\n\ndef test_reverse_number():"}
{"task_id":"task/20","completion":"\n    for word in re.findall(pattern, s):\n        yield word\n\ndef lines(s, pattern = '\\n'):\n    for line in re.findall(pattern, s):\n        yield line"}
{"task_id":"task/20","completion":"\n    return re.findall(pattern, s)\n\ndef phone_number(s):\n    number = re.findall('[0-9]+', s)\n    return (number[0], number[1])"}
{"task_id":"task/20","completion":"\n    return re.findall(pattern, s)\n\ndef phone_number(s):\n    phone_pattern = re.compile(r'\\d{3}-\\d{3}-\\d{4"}
{"task_id":"task/20","completion":"\n    return re.findall(pattern, s)\n\ndef phone_number(s):\n    pattern = '^\\s*(?:\\+?(\\d{1,3}))?[-. (]*(\\"}
{"task_id":"task/20","completion":"\n    for word in re.findall(pattern, s):\n        yield word.lower()\n\ndef articles(s, pattern = '\\s+([a-zA-Z]+\\s*){1,3}"}
{"task_id":"task/21","completion":"\n    return choice(lst)\n\ndef get_index(lst, word):\n    return lst.index(word)\n\ndef get_index_sequence(lst, word_list):\n    index_"}
{"task_id":"task/21","completion":"\n    return choice(lst)\n\ndef generate_model(cfdist, word, num=15):\n    for i in range(num):\n        print(word, end=' ')\n        word = sample(cf"}
{"task_id":"task/21","completion":"\n    \"\"\"\n    Sample one element from the list.\n    \"\"\"\n    return choice(lst)\n\n\ndef gen_sentence(word1, word2, max_len):\n    \"\"\"\n    Generate a sentence"}
{"task_id":"task/21","completion":"\n    return choice(lst)\n\ndef calculate_frequency(list, word):\n    return list.count(word)\n\ndef calculate_degree(list):\n    return (len(list) - 1)\n\n"}
{"task_id":"task/21","completion":"\n    return choice(lst)\n\ndef shuffle(lst):\n    new_lst = []\n    for n in range(len(lst)):\n        new_lst.append(sample(lst"}
{"task_id":"task/22","completion":"\n    return date.today() - timedelta(days=n)\n\nclass Command(BaseCommand):\n    help = 'Closes the specified poll for voting'\n\n    def add_arguments(self, parser):\n       "}
{"task_id":"task/22","completion":"\n    return date.today() - timedelta(days=n)\n\n# default\ndefault_args = {\n    'owner': 'airflow',\n    'depends_on_past': False,\n    'start"}
{"task_id":"task/22","completion":"\n    return date.today() - timedelta(days=n)\n\nprint(days_ago(5))\n#2018-11-29\n\n\"\"\"\n\u53ef\u89c1\uff0c\u5982\u679c"}
{"task_id":"task/22","completion":"\n    return date.today() - timedelta(days=n)\n\ndef argparse_date(date_string):\n    \"\"\" Convert datetime string to datetime object.\n\n    Arguments:\n        date_string {"}
{"task_id":"task/22","completion":"\n    return date.today() - timedelta(days=n)\n\ndef build_query(lst):\n    return (lst)\n\ndef assign_trending(post):\n    from django.db"}
{"task_id":"task/23","completion":"\n    return key in d.keys()\n\n\ndef has_same_shape(d, dicts):\n    for dict in dicts:\n        for key in d.keys():\n            if key not in dict.keys():"}
{"task_id":"task/23","completion":"\n    return key in d and d[key] is not None\n\n\ndef check_to_insert(cur, tid, user_name, movie_id, rating, timestamp):\n    cur.execute(\n        \"SELECT *"}
{"task_id":"task/23","completion":"\n    \"\"\"\n    Check if key is in dict, but do not raise error\n    \"\"\"\n    if key in d:\n        return True\n    else:\n        return False\n\n\ndef read_dict_data(path):"}
{"task_id":"task/23","completion":"\n    if key in d:\n        return True\n    else:\n        return False\n    \ndef dict_to_list(d):\n    l = []\n    for item in d:\n        l.append(item"}
{"task_id":"task/23","completion":"\n    return key in d and d[key] is not None\n\n\ndef is_running_on_server():\n    return key_in_dict(os.environ, 'SERVER_SOFTWARE') and not os."}
{"task_id":"task/24","completion":"\n    if num == 0:\n        return 1\n    else:\n        return num * factorial(num - 1)\n\nif __name__ == '__main__':\n    num = int(input(\"Enter a number"}
{"task_id":"task/24","completion":"\n    return 1 if num == 1 else num * factorial(num - 1)\n\n\nn = int(input())\nprint(factorial(n))"}
{"task_id":"task/24","completion":"\n    if num == 1:\n        return 1\n    else:\n        return num * factorial(num - 1)\n\nprint(factorial(5))"}
{"task_id":"task/24","completion":"\n    if num == 0:\n        return 1\n    else:\n        return num * factorial(num - 1)\n\nuser_input = int(input(\"Enter a number: \"))\nprint(factorial(user"}
{"task_id":"task/24","completion":"\n    if num == 1:\n        return 1\n    else:\n        return num * factorial(num - 1)\n\ndef countPaths(m, n):\n    return factorial(m + n) / ("}
{"task_id":"task/25","completion":"\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            lst[i][j] = random.randint(0, 1)\n    return"}
{"task_id":"task/25","completion":"\n    for i in range(0,len(lst)):\n        lst[i] = \" \"\n    return lst\n\ndef clear_screen():\n    os.system('cls' if os.name"}
{"task_id":"task/25","completion":"\n    for i in range(len(lst)):\n        lst[i] = 0\n        \ndef add_vectors(u, v):\n    \"\"\"\n    >>> add_vectors([1, 0],"}
{"task_id":"task/25","completion":"\n    \"\"\"\n    Returns the initial of a string.\n    \"\"\"\n    lst[-1] = lst[-1].replace('.', '')\n    return lst[-1][0].upper()\n\n"}
{"task_id":"task/25","completion":"\n    for i in range(1, len(lst)):\n        temp = lst[i]\n        j = i - 1\n        while j >= 0 and temp < lst[j]:\n            lst["}
{"task_id":"task/26","completion":"\n    return s + (char * (length - len(s)))\n\ndef main():\n    \"\"\"\n    Cracking the Safe\n    There is a box protected by a password. The password is n digits, where each letter can"}
{"task_id":"task/26","completion":"\n    assert(length >= len(s))\n    r = length - len(s)\n    return s + (char * r)\n\ndef strip_pad(s, length, char = ' '):\n    assert("}
{"task_id":"task/26","completion":"\n    if length <= len(s):\n        return s\n    return s + (char * (length - len(s)))\n\ndef align(s, length, alignment = 'left'):\n    if alignment == 'left"}
{"task_id":"task/26","completion":"\n\twhile len(s) < length:\n\t\ts = s + char\n\treturn s\n\ndef hex_dump(data, length = 16):\n\t'''\n\tDump data in hex format.\n\n\t"}
{"task_id":"task/26","completion":"\n\tif len(s) < length:\n\t\treturn s + (char * (length - len(s)))\n\telse:\n\t\treturn s\n\ndef bar(value, length = 10, min = 0,"}
{"task_id":"task/27","completion":"\n    return deg*pi/180\n\ndef polygon_area(n, side_length):\n    return ((n*side_length**2)/(4*tan(pi/n)))\n\nn = int(input"}
{"task_id":"task/27","completion":"\n    return deg * pi / 180\n\ndef log(msg):\n    print(\"\\n\" + msg)\n\ndef build_distance_matrix(locations):\n    \"\"\"\n    This method calculates the great circle distance"}
{"task_id":"task/27","completion":"\n    return deg*pi/180\n\ndef distance(lat1, lat2, lon1, lon2):\n    '''\n    https://stackoverflow.com/questions/19412462/getting-"}
{"task_id":"task/27","completion":"\n    return deg*pi/180\n\ndef rads_to_degrees(rads):\n    return rads*180/pi\n\ndef get_ref_ellipsoid_vector():\n    return (6"}
{"task_id":"task/27","completion":"\n    return deg * pi / 180\n\ndef main():\n    degrees = float(input(\"Enter degrees: \"))\n    rads = degrees_to_rads(degrees)\n    print(\"{} degrees is {}"}
{"task_id":"task/28","completion":"\n    return reduce(lambda x, y: (x*y)//gcd(x,y), numbers, 1)\n\ndef answer(dimensions, captain_position, badguy_position, distance):\n    w,"}
{"task_id":"task/28","completion":"\n    return reduce(lambda x, y: (x*y)//gcd(x,y), numbers, 1)\n\ndef gcd_list(L):\n    v = L[0]\n\n    for i in"}
{"task_id":"task/28","completion":"\n    return reduce(lambda x, y: (x*y)//gcd(x,y), numbers, 1)\n\nprint(lcm([3, 6, 8]))"}
{"task_id":"task/28","completion":"\n    return reduce(lambda x, y: (x*y)//gcd(x,y), numbers, 1)\n\ndef find_in_grid(grid, pattern):\n    size = len(pattern)\n   "}
{"task_id":"task/28","completion":"\n    return reduce(lambda x, y: (x*y)//gcd(x,y), numbers, 1)\n\ndef lcm_for_range(start, end):\n    return lcm(range(start"}
{"task_id":"task/29","completion":"\n    return max(set(lst), key=lst.count)\n    \n    \ndef random_subset(lst,m):\n    return random.sample(lst,m)\n\ndef random_"}
{"task_id":"task/29","completion":"\n    \"\"\"\n    Returns the element of the list that is the most frequent.\n    \"\"\"\n    return max(set(lst), key=lst.count)\n\n\ndef main():\n    \"\"\"\n    Main program."}
{"task_id":"task/29","completion":"\n    return max(set(lst), key=lst.count)\n\ndef get_center(area):\n    return np.array([area[0] + (area[2] - area[0]) / 2"}
{"task_id":"task/29","completion":"\n    \"\"\"\n    Find the most frequent element in a list.\n    \"\"\"\n    return max(set(lst), key=lst.count)\n    \n    \ndef get_q_table(mdp, states"}
{"task_id":"task/29","completion":"\n    \"\"\"\n    :param lst: list of integers\n    :return: integer - the most frequent number in the list\n    \"\"\"\n    return max(set(lst), key=lst.count)\n\n\ndef"}
{"task_id":"task/30","completion":"\n    return rad*180/pi\n\ndef main():\n    degree = rads_to_degrees(pi/2)\n    print(degree)\n\nif __name__ == \"__main__\":\n    main"}
{"task_id":"task/30","completion":"\n    return (rad * 180) / pi\n\ndef degrees_to_rads(deg):\n    return (deg * pi) / 180\n\nclass Vechicle():\n    def __init__(self, x,"}
{"task_id":"task/30","completion":"\n    return rad * 180.0 / pi\n\ndef degrees_to_rads(deg):\n    return deg * pi / 180.0\n\nclass Vector:\n    def __init__(self, x=0,"}
{"task_id":"task/30","completion":"\n    return rad * 180.0 / pi\n\ndef degrees_to_rads(deg):\n    return deg * pi / 180.0\n\ndef get_sim_time_seconds(s):\n    return s."}
{"task_id":"task/30","completion":"\n    return rad * 180 / pi\n\ndef degrees_to_rads(deg):\n    return deg * pi / 180\n\ndef tuple_to_list(points):\n    return [[i[0], i[1"}
{"task_id":"task/31","completion":"\n    s_n = s * n\n    return s_n\n\nprint(n_times_string('123', 4))"}
{"task_id":"task/31","completion":"\n    return s * n\n\nprint(n_times_string('ja', 2))\nprint(n_times_string('ja', 0))\n\n# Optional arguments\n# \n# Arguments can be made optional by"}
{"task_id":"task/31","completion":"\n    return s * n\n\nprint(n_times_string('abc', 3))\n\n# See the second argument to the function call?\n# We can give `n_times_string` a different argument name (like"}
{"task_id":"task/31","completion":"\n    return s * n\n\ndef print_string(s):\n    print(s)\n\ndef print_sum(a, b):\n    print(a + b)\n\ndef repeat_string(s, n"}
{"task_id":"task/31","completion":"\n    return n * s\n\n# # 3.2\ndef list_length(l):\n    length = 0\n    for i in l:\n        length += 1\n    return length\n\n# # 3.3\n"}
{"task_id":"task/32","completion":"\n    for key, value in obj.items():\n        obj[key] = fn(value)\n    return obj\n\n\ndef get_path_class(path):\n    if path in ALL_CLASSES:\n        return"}
{"task_id":"task/32","completion":"\n    \"\"\"Map values of an object to new values using a function.\n\n    Args:\n        obj (dict):\n        fn (function): Function to map with.\n\n    Returns:\n        obj (dict):\n    \"\"\""}
{"task_id":"task/32","completion":"\n    if isinstance(obj, dict):\n        return {key: map_values(value, fn) for key, value in obj.items()}\n    if isinstance(obj, list):\n        return [map_"}
{"task_id":"task/32","completion":"\n    \"\"\"\n    Maps all values in a collection using a given function\n    \"\"\"\n    if type(obj) is dict:\n        return {key: fn(val) for key, val in obj.items()}\n   "}
{"task_id":"task/32","completion":"\n    \"\"\"\n    Apply a function to every element in an object\n\n    The function must take one argument and return one value. The object can be any\n    type that can be indexed with a number, string, or tuple of numbers or"}
{"task_id":"task/33","completion":"\n    return [int(hex[i:i+2], 16) for i in range(1,6,2)]\n\ndef rgb_to_hex(rgb):\n    return \"#\"+\"\".join([\""}
{"task_id":"task/33","completion":"\n    return tuple(int(hex[i:i+2], 16) for i in (0, 2, 4))\n\ndef get_dominant_color(image):\n    image = image.convert('RGBA"}
{"task_id":"task/33","completion":"\n    hex = hex.lstrip('#')\n    hlen = len(hex)\n    return tuple(int(hex[i:i+hlen//3], 16) for i in range(0, hlen,"}
{"task_id":"task/33","completion":"\n    h = hex.lstrip('#')\n    return tuple(int(h[i:i+2], 16) for i in (0, 2, 4))\n\ndef rgb_to_hex(rgb):"}
{"task_id":"task/33","completion":"\n    hex = hex.lstrip('#')\n    hlen = len(hex)\n    return tuple(int(hex[i:i+hlen//3], 16) for i in range(0, hlen,"}
{"task_id":"task/34","completion":"\n    for i in range(len(lst)):\n        r = randint(0, i)\n        tmp = lst[i]\n        lst[i] = lst[r]\n        lst"}
{"task_id":"task/34","completion":"\n    \"\"\"Returns a copy of lst that has been shuffled.\n    shuffle(list) -> list\n    \"\"\"\n    if not lst:\n        return []\n    else:\n        lst = deepcopy(l"}
{"task_id":"task/34","completion":"\n    \"\"\"\n    Shuffles a list in random order\n    \"\"\"\n    lst = deepcopy(lst)\n    shuffled = []\n    while len(lst) > 0:\n        index = randint"}
{"task_id":"task/34","completion":"\n    \"\"\"\n    Returns a randomly shuffled copy of a list.\n    \"\"\"\n    shf = deepcopy(lst)\n    n = len(shf)\n    for i in range(n):\n        j"}
{"task_id":"task/34","completion":"\n    new_lst = deepcopy(lst)\n    for i in range(0, len(new_lst)):\n        while new_lst[i] != i + 1:\n            new_l"}
{"task_id":"task/35","completion":"\n    for i, e in enumerate(lst):\n        if fn(e):\n            return i\n    return None\n\nclass Dictionary:\n    def __init__(self, words):\n        self.by_"}
{"task_id":"task/35","completion":"\n    for i, e in enumerate(lst):\n        if fn(e):\n            return i\n    return None\n\ndef load_images():\n    res = {}\n    for path in glob.glob("}
{"task_id":"task/35","completion":"\n    for i, value in enumerate(lst):\n        if fn(value):\n            return i\n    return None\n\ndef first_true(lst, pred):\n    for value in lst:\n       "}
{"task_id":"task/35","completion":"\n    for i, value in enumerate(lst):\n        if fn(value):\n            return i\n    return None\n\ndef find_index_left(lst, fn):\n    for i, value in enumer"}
{"task_id":"task/35","completion":"\n    for i, value in enumerate(lst):\n        if fn(value):\n            return i\n    return None\n\ndef load_data(file_name):\n    with open(file_name, 'r"}
{"task_id":"task/36","completion":"\n    return (num - inMin) * (outMax - outMin) / (inMax - inMin) + outMin\n\ndef _handle_led_all(option):\n    global LED_COUNT\n    if"}
{"task_id":"task/36","completion":"\n    \"\"\"\n    Convert a number from one range to another.\n    See: http://arduino.cc/en/Reference/Map\n    \"\"\"\n    return (num - inMin) * (outMax - outMin"}
{"task_id":"task/36","completion":"\n    return (num - inMin) * (outMax - outMin) / (inMax - inMin) + outMin\n\ndef map_range(value, from_min, from_max, to_min, to"}
{"task_id":"task/36","completion":"\n    return (num - inMin) * (outMax - outMin) / (inMax - inMin) + outMin;\n\ndef clamp(num, min, max):\n    if num < min:\n        return"}
{"task_id":"task/36","completion":"\n    return (num - inMin) * (outMax - outMin) / (inMax - inMin) + outMin\n\n# def read_temp_raw():\n#     f = open(device_file, '"}
{"task_id":"task/37","completion":"\n    return [list(x) for x in zip(*lst)]\n\ndef main():\n    tests = [\n        [[1,2,3],[4,5,6],[7,8,9]],\n       "}
{"task_id":"task/37","completion":"\n    \"\"\"Swap the rows and columns in a list of lists representing a 2D matrix.\n\n    Args:\n        lst: list of lists representing a 2D matrix\n\n    Returns:\n        transposed list of lists\n"}
{"task_id":"task/37","completion":"\n    for i in range(len(lst)):\n        for j in range(i):\n            if len(lst[i]) <= len(lst[j]):\n                break\n            else:\n               "}
{"task_id":"task/37","completion":"\n    lst = list(lst)\n    lst = [[lst[j][i] for j in range(len(lst))] for i in range(len(lst[0]))]\n   "}
{"task_id":"task/37","completion":"\n    return list(map(list, zip(*lst)))\n\ndef multiple_matrix_multiply(matrix_lst):\n    lst = transpose(matrix_lst)\n    return list"}
{"task_id":"task/38","completion":"\n    if num % 2 == 0:\n        return True\n    else:\n        return False\n\nif __name__ == \"__main__\":\n    number = int(input(\"Enter a number to check if it is even"}
{"task_id":"task/38","completion":"\n    return num % 2 == 0\n#filter will pass only the values that returns true from the function.\nnums = [3,2,6,8,4,6,2,9]\nevens = list("}
{"task_id":"task/38","completion":"\n    return num % 2 == 0\n\ndef print_string(txt):\n    print(txt)\n\ndef return_true():\n    return True\n\nprint(is_even(5))\nprint(is_even"}
{"task_id":"task/38","completion":"\n    if num % 2 == 0:\n        return True\n    else:\n        return False\ndef is_odd(num):\n    if num % 2 == 1:\n        return True\n    else:\n        return False"}
{"task_id":"task/38","completion":"\n    if num % 2 == 0:\n        return True\n    else:\n        return False\n\n# 2. Write a function that accepts a number as an argument and returns a Boolean indicating whether the number is odd.\ndef is"}
{"task_id":"task/39","completion":"\n    max_val = arr[0]\n    max_idx = 0\n    for i in range(1, len(arr)):\n        if arr[i] > max_val:\n            max_val ="}
{"task_id":"task/39","completion":"\n    if len(arr) == 0:\n        return None\n    current_max = arr[0]\n    current_max_index = 0\n    for i in range(1, len(arr)):\n        if"}
{"task_id":"task/39","completion":"\n    max_element = arr[0]\n    max_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] > max_element:\n            max_element = arr"}
{"task_id":"task/39","completion":"\n    max_index = 0\n    max_value = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max_value:\n            max_value = arr"}
{"task_id":"task/39","completion":"\n    max_element = arr[0]\n    max_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] > max_element:\n            max_element = arr"}
{"task_id":"task/40","completion":"\n    lst = list(set(lst))\n    lst.sort()\n    return lst[:n]\n\ndef max_n(lst, n = 1):\n    lst = list(set"}
{"task_id":"task/40","completion":"\n    min = lst[0]\n    for x in range(1, n):\n        if min > lst[x]:\n            min = lst[x]\n    return min\n\ndef max_n("}
{"task_id":"task/40","completion":"\n    if len(lst) < n:\n        return lst\n    lst.sort()\n    return lst[:n]\n\ndef med_n(lst, n = 1):\n    if len"}
{"task_id":"task/40","completion":"\n    return heapq.nsmallest(n, lst)\n\ndef max_n(lst, n = 1):\n    return heapq.nlargest(n, lst)\n\ndef add_to_"}
{"task_id":"task/40","completion":"\n    if lst == []:\n        return None\n    for i in range(n):\n        min_val = lst[0]\n        for j in range(len(lst)):\n            if lst"}
{"task_id":"task/41","completion":"\n    \"\"\" \n    Return the last n elements of an iterator. \n    \"\"\"\n    return itr[-n:]\n\ndef take_left(itr, n = 1):\n    \"\"\" \n    Return the"}
{"task_id":"task/41","completion":"\n    '''returns the last n elements from the iterable'''\n    #TODO: use itertools.islice\n    assert n >= 0\n    itr = iter(itr)\n    for _"}
{"task_id":"task/41","completion":"\n    '''\n    itr : iterator to take right\n    n : number of elements to take\n    '''\n    for _ in range(n):\n        itr, _ = itertools.tee(it"}
{"task_id":"task/41","completion":"\n    if n < 1:\n        raise ValueError(\"The number of elements to return must be > 0\")\n    return itr[-n:]\n\ndef take_left(itr, n = 1):\n    if"}
{"task_id":"task/41","completion":"\n    \"\"\"\n    This function takes the right side of an iterable and returns\n    it as a new iterable.\n    \"\"\"\n    return itr[-n:]\n\n\n# -----------------------------------------------------------------------------\n# TESTING\n# ----------------------------------------------------------------"}
{"task_id":"task/42","completion":"\n    return [l for l, _ in Counter(lst).most_common()]\n\nclass Controller:\n    def __init__(self, interfaces):\n        self.interfaces = interfaces\n        self.datap"}
{"task_id":"task/42","completion":"\n    seen = set()\n    seen_add = seen.add\n    return [x for x in lst if not (x in seen or seen_add(x))]\n\ndef load_vocab(vocab_"}
{"task_id":"task/42","completion":"\n    \"\"\"\n    filter out non-unique elements in the list, order of elements should not change\n    :param lst: List[Int]\n    :return: List[Int]\n    \"\"\"\n    return [x for"}
{"task_id":"task/42","completion":"\n    return [item for item, count in Counter(lst).items() if count == 1]\n\ndef filter_non_unique(lst):\n    return [item for item, count in Counter(lst).items"}
{"task_id":"task/42","completion":"\n    counts = Counter(lst)\n    return [x for x in lst if counts[x] == 1]\n\ndef calculate_table(lst):\n    lst.sort()\n    return lst["}
{"task_id":"task/43","completion":"\n    if n == 1:\n        return lim\n    return lim + (n - 1) * lim\n\ndef get_nth_triangular_number(n):\n    return arithmetic_progression(n, 1)"}
{"task_id":"task/43","completion":"\n    last = 0\n    cur = 1\n    yield 0\n    while last + cur < lim:\n        yield last + cur\n        last, cur = cur, last + cur\n    yield lim\n\n\ndef pentagonal_"}
{"task_id":"task/43","completion":"\n    for i in range(1, lim+1):\n        if n % i == 0:\n            print(i)\n\narithmetic_progression(n, lim)"}
{"task_id":"task/43","completion":"\n    # \u516c\u5dee\n    d = (lim - n) / (n - 1)\n    # \u7b49\u5dee\u6570\u5217\n    a = n - 1\n    return a, d\n\n\n"}
{"task_id":"task/43","completion":"\n    ls = []\n    start = 1\n    while start <= lim:\n        ls.append(start)\n        start += n\n    return ls\n\n\ndef geometric_progression(n, lim):\n    ls ="}
{"task_id":"task/44","completion":"\n    \"\"\"\n    Return a new dictionary that contains all the keys and values of the\n    dictionaries passed as arguments. In case of conflicts, values\n    from dictionaries to the right have precedence over those to the\n    left."}
{"task_id":"task/44","completion":"\n    '''\n    Merge the input dictionaries.\n    Only the first layer will be merged and the deep copy will be returned.\n    '''\n    result = {}\n    for d in dicts:\n        result."}
{"task_id":"task/44","completion":"\n    \"\"\"Merge dictionaries into a new dictionary\"\"\"\n    merged = {}\n    for dict in dicts:\n        merged.update(dict)\n    return merged\n\n\ndef generate_password(password_length=20):"}
{"task_id":"task/44","completion":"\n    return dict(chain(*[d.iteritems() for d in dicts]))\n\n\ndef finalize_evaluation(evaluation, do_print=True):\n    evaluation.update({\n        'model': {"}
{"task_id":"task/44","completion":"\n    \"\"\"\n    Merges dictionaries in *dicts argument into one\n    \"\"\"\n    result = {}\n    for dictionary in dicts:\n        result.update(dictionary)\n    return result\n\n\ndef random_"}
{"task_id":"task/45","completion":"\n    indexes_map = {idx: i for i, idx in enumerate(indexes)}\n    return sorted(lst, key=lambda x: indexes_map[x], reverse=reverse)\n\n\ndef chunks"}
{"task_id":"task/45","completion":"\n    return [lst[i] for i in indexes]\n\ndef sort_lists_by_first_list(lists, reverse=False):\n    sorted_lists = []\n    ordered_indexes = sorted(range"}
{"task_id":"task/45","completion":"\n    return [lst[i] for i in indexes]\n\n\ndef sort_by_scores(lst, scores, reverse=False):\n    return sort_by_indexes(lst,\n                           ["}
{"task_id":"task/45","completion":"\n    '''\n    Sort the list `lst` by indexes in the list `indexes`\n    '''\n    pairs = [(lst[i], i) for i in indexes]\n    pairs.sort(reverse"}
{"task_id":"task/45","completion":"\n    return [x for _, x in sorted(zip(indexes, lst), reverse=reverse)]\n\n\ndef convert_to_js_timestamp(timestamp):\n    return int(timestamp * 1000)\n\n"}
{"task_id":"task/46","completion":"\n    if not isinstance(selectors, list):\n        selectors = [selectors]\n    return reduce(getitem, selectors, d)\n\ndef set(d, selectors, value):\n    get("}
{"task_id":"task/46","completion":"\n    return reduce(getitem, selectors, d)\n\ndef set(d, selectors, value):\n    get(d, selectors[:-1])[selectors[-1]] = value\n\ndef load"}
{"task_id":"task/46","completion":"\n    return reduce(getitem, selectors, d)\n\ndef set(d, selectors, value):\n    get(d, selectors[:-1])[selectors[-1]] = value\n\ndef main"}
{"task_id":"task/46","completion":"\n    \"\"\"\n    >>> d = {1: {2: {3: {4: {5: 6}}}}}\n    >>> get(d, [1, 2, 3, 4, 5])\n    6\n    \"\"\""}
{"task_id":"task/46","completion":"\n    \"\"\"\n    Return a value from a nested dict.\n\n    This function is an alternative to the dict method `get`.\n    `get` returns a default value if a key is not found.\n\n    Parameters\n    ----------"}
{"task_id":"task/47","completion":"\n    return [\n        [x for x in lst if fn(x)],\n        [x for x in lst if not fn(x)]\n    ]\n\n\ndef bifurcate(lst, fn"}
{"task_id":"task/47","completion":"\n    return [\n        [x for x in lst if fn(x)],\n        [x for x in lst if not fn(x)]\n    ]\n\ndef flatten(l):\n    return [item"}
{"task_id":"task/47","completion":"\n    return [\n        [x for x in lst if fn(x)],\n        [x for x in lst if not fn(x)]\n    ]\n\ndef partition_by(lst, fn):\n"}
{"task_id":"task/47","completion":"\n    return [\n        [x for x in lst if fn(x)],\n        [x for x in lst if not fn(x)]\n    ]\n\n# ------------------------------------------------------------------------------\n# Working with files\n# ----------------------------------------------------------------"}
{"task_id":"task/47","completion":"\n    return [\n        [x for x in lst if fn(x)],\n        [x for x in lst if not fn(x)]\n    ]\n\n# A representation of a single Node in the network."}
{"task_id":"task/48","completion":"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\nprint"}
{"task_id":"task/48","completion":"\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\ndef ejercicio_7():\n    n = int"}
{"task_id":"task/48","completion":"\n    \"\"\"Fibonacci series.\"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fib"}
{"task_id":"task/48","completion":"\n    a = 0\n    b = 1\n    for i in range(n):\n        temp = a\n        a = b\n        b = temp + b\n    return a\n\n# Driver Program\n\nprint(f"}
{"task_id":"task/48","completion":"\n    a, b = 0, 1\n    while a < n:\n        print(a, end=' ')\n        a, b = b, a+b\n    print()\n\nfibonacci(2000)"}
{"task_id":"task/49","completion":"\n    out = {}\n    for k, v in obj.items():\n        out[v] = k\n    return out\n\n\ndef string_to_array(string):\n    return np.array(string.split('"}
{"task_id":"task/49","completion":"\n    \"\"\"\n    Inverts a dictionary that maps keys to sets.\n\n    `obj` must map each key to a set of keys. The returned\n    dictionary maps each key in the sets to a set of keys from\n    the"}
{"task_id":"task/49","completion":"\n    \"\"\"\n    Inverts a dictionary object.\n\n    :param obj: Dictionary to invert.\n    :return: Dictionary with the keys and values swapped.\n    \"\"\"\n    return {v: k for k, v in"}
{"task_id":"task/49","completion":"\n    \"\"\"\n    Inverts a dictionary.\n\n    :param obj: Dictionary to invert.\n    :return: Reversed dictionary.\n    \"\"\"\n    return {v: k for k, v in obj.items()"}
{"task_id":"task/49","completion":"\n    \"\"\"\n    Inverts a dictionary.\n\n    Parameters\n    ----------\n    obj : dict\n        Dictionary to invert.\n\n    Returns\n    -------\n    dict\n        Inverted dictionary.\n    \"\"\"\n    return"}
{"task_id":"task/50","completion":"\n    a = sub('(.)([A-Z][a-z]+)', r'\\1 \\2', s)\n    return sub('([a-z0-9])([A-Z])', r'"}
{"task_id":"task/50","completion":"\n    return sub(r'(?:^|_)(.)', lambda m: m.group(1).upper(), s)\n\ndef dasherize(s):\n    return sub(r'([A-Z])',"}
{"task_id":"task/50","completion":"\n    # Replace dash with space and then capitalize the first letter of each word.\n    # If the first letter is a number capitalize that as well.\n    # Remove dashes and slashes.\n    # This function is used to"}
{"task_id":"task/50","completion":"\n    '''\n    Convert string to camelCase\n    s: string\n    '''\n    return sub(r'\\s', '', sub(r'\\W+', '', s)).lower()"}
{"task_id":"task/50","completion":"\n    return sub(r'([^A-Z])([A-Z])', r'\\1_\\2', s).lower()\n\ndef setup(app):\n    app.connect('autodoc-process"}
{"task_id":"task/51","completion":"\n    v = list(d.values())\n    k = list(d.keys())\n    return k[v.index(min(v))]\n\n# \u8bfb\u53d6\u6587\u4ef6\ndef readfile"}
{"task_id":"task/51","completion":"\n    \"\"\"\n    Returns the key of the minimum value of a dictionary\n\n    Parameters\n    ----------\n    d : dict\n        Dictionary of numerical values\n\n    Returns\n    -------\n    key : hashable\n        The key of"}
{"task_id":"task/51","completion":"\n    d_copy = d.copy()\n    m = min(d_copy.values())\n    for k in d_copy:\n        if d_copy[k] == m:\n            return k\n\ndef"}
{"task_id":"task/51","completion":"\n    v = list(d.values())\n    k = list(d.keys())\n    return k[v.index(min(v))]\n\n#Function to find the key of max dict value\ndef key_"}
{"task_id":"task/51","completion":"\n    \"\"\"Return key of a dict d that corresponds to its minimum value.\n    Assumes that d has at least one value.\n    \"\"\"\n    min_key = None\n    min_val = None\n    for key,"}
{"task_id":"task/52","completion":"\n    \"\"\"Capitalize a string, optionally leaving the rest of the string alone\"\"\"\n    return s[:1].upper() + (s[1:].lower() if lower_rest else s[1:])\n\ndef clean"}
{"task_id":"task/52","completion":"\n    return s[:1].upper() + (s[1:].lower() if lower_rest else s[1:])\n\ndef full_folder_path(local_path):\n    return os.path.join"}
{"task_id":"task/52","completion":"\n    return s[:1].upper() + (s[1:].lower() if lower_rest else s[1:])\n\ndef check_isinstance(obj, cls):\n    \"\"\"Checks that obj is"}
{"task_id":"task/52","completion":"\n    return s[:1].upper() + (s[1:].lower() if lower_rest else s[1:])\n\ndef get_readme_dev_changed_files():\n    changed_files = sub"}
{"task_id":"task/52","completion":"\n    return s[:1].upper() + (s[1:].lower() if lower_rest else s[1:])\n\ndef get_class( kls ):\n    parts = kls.split('.')"}
{"task_id":"task/53","completion":"\n    \"\"\"Convert celsius to fahrenheit.\"\"\"\n    return degrees * 9.0 / 5 + 32\n\n\nclass Thermostat(object):\n    \"\"\"Class to represent a thermostat.\"\"\"\n\n    def __"}
{"task_id":"task/53","completion":"\n    return degrees * 1.8 + 32\n\nif __name__ == '__main__':\n    print(\"Testing function celsius_to_fahrenheit()...\")\n    test(celsius_to_f"}
{"task_id":"task/53","completion":"\n    return degrees * 9 / 5 + 32\n\n# converts fahrenheit to celsius\ndef fahrenheit_to_celsius(degrees):\n    return (degrees - 32) * 5 / 9"}
{"task_id":"task/53","completion":"\n    return degrees * 1.8 + 32\n\n\ndef fahrenheit_to_celsius(degrees):\n    return (degrees - 32) / 1.8\n\n\ndef main():\n    user_input ="}
{"task_id":"task/53","completion":"\n    '''Returns the input temperature in degrees Fahrenheit\n\n    Takes a temperature in degrees Celsius, converts it to degrees Fahrenheit,\n    and returns the result.\n    '''\n    return degrees * 1.8 + 32.0\n\n"}
{"task_id":"task/54","completion":"\n    return [lst[i] for i in range(0, len(lst), nth)]\n\ndef make_sublattice_z(atom_type, atom_x, atom_y, data_"}
{"task_id":"task/54","completion":"\n    return lst[::nth]\nevery_nth([1,2,3,4,5,6,7,8,9], 2)\ndef every_nth(lst, nth):\n"}
{"task_id":"task/54","completion":"\n    \"\"\"Return every nth item in list\"\"\"\n    return lst[::nth]\n\n\ndef every_second(lst):\n    \"\"\"Return every second item in list\"\"\"\n    return lst[::2]"}
{"task_id":"task/54","completion":"\n    out = []\n    i = 0\n    while i < len(lst):\n        out.append(lst[i])\n        i += nth\n    return out\n\n# Slicing\n# "}
{"task_id":"task/54","completion":"\n    \"\"\"\n    >>> lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    >>> every_nth(lst, 3)\n    [3, 6,"}
{"task_id":"task/55","completion":"\n    \"\"\" return the union of two lists \"\"\"\n    return list(set(a) | set(b))\n\ndef get_file_name_from_dates(date_from, date_to, publisher=None, extension"}
{"task_id":"task/55","completion":"\n    return max(a[0], b[0]), min(a[1], b[1])\n\n\ndef intersect(a, b):\n    return min(a[0], b[0]), max(a[1"}
{"task_id":"task/55","completion":"\n    return [e for e in a] + [e for e in b if e not in a]\n\n# To do a union we just need to use the function union that we defined above.\nunion(first, second)"}
{"task_id":"task/55","completion":"\n    a = np.asarray(a)\n    b = np.asarray(b)\n    c = np.unique(np.concatenate((a, b)))\n    return c\n\n\ndef intersection("}
{"task_id":"task/55","completion":"\n    return a | b\n\n\ndef intersection(a, b):\n    return a & b\n\n\ndef difference(a, b):\n    return a - b\n\n\ndef symmetric_difference(a, b):\n"}
{"task_id":"task/56","completion":"\n    return a[n:]\n\ndef bind(f, *args):\n    return lambda x: f(x, *args)\n\ndef compose(f, g):\n    return lambda x: f(g(x"}
{"task_id":"task/56","completion":"\n    return a[n:]\n\ndef cut(a, n = 1):\n    return a[:-n]\n\ndef rev(a):\n    return a[::-1]\n\ndef lwr(a):"}
{"task_id":"task/56","completion":"\n    for _ in range(n):\n        a.pop()\n    return a\n\ndef roll(a, n = 1):\n    for _ in range(n):\n        b = a.pop()\n        a"}
{"task_id":"task/56","completion":"\n    \"\"\"Return the rest of the elements of a sequence when n elements are removed.\"\"\"\n    for i in range(n):\n        a.pop(0)\n    return a\n\ndef drop_right(a, n"}
{"task_id":"task/56","completion":"\n    a = list(a)\n    return a[n:] + a[:n]\n\ndef mod(a, b):\n    return a % b\n\ndef gcd(a, b):\n    while b"}
{"task_id":"task/57","completion":"\n    freq = defaultdict(int)\n    for v in lst:\n        freq[v] += 1\n    return freq\n\ndef combinadic(n):\n    return [(x,y) for"}
{"task_id":"task/57","completion":"\n    d = defaultdict(int)\n    for el in lst:\n        d[el] += 1\n    return d\n\n\ndef main():\n    input_file = sys.argv[1]\n    output"}
{"task_id":"task/57","completion":"\n    freq = defaultdict(int)\n    for elem in lst:\n        freq[elem] += 1\n    return freq\n\ndef most_frequent(lst):\n    freq ="}
{"task_id":"task/57","completion":"\n    d = defaultdict(int)\n    for x in lst:\n        d[x] += 1\n    return d\n\ndef main():\n    parser = argparse.ArgumentParser()\n    parser.add"}
{"task_id":"task/57","completion":"\n    freq = defaultdict(int)\n    for l in lst:\n        freq[l] += 1\n    return freq\n\nclass Tree:\n    def __init__(self, freq, left"}
{"task_id":"task/58","completion":"\n    \"\"\"Return a list that has the value of start and goes up to the number\n    before end in increments of step.\"\"\"\n    l = []\n    while start < end:\n        l.append(start)\n       "}
{"task_id":"task/58","completion":"\n    \"\"\"\n    Initialize a list with a given range\n\n    :param end:\n    :param start:\n    :param step:\n    :return:\n    \"\"\"\n    my_list = []\n    while start"}
{"task_id":"task/58","completion":"\n    \"\"\"\n    Function to initialize a list from a range.\n    :param end: The upper bound of the range\n    :param start: The lower bound of the range. Default is 0\n    :param step: The step"}
{"task_id":"task/58","completion":"\n    l = []\n    for i in range(start, end, step):\n        l.append(i)\n    return l\n\nprint initialize_list_with_range(20)\nprint initialize_list_with"}
{"task_id":"task/58","completion":"\n    list = []\n    i = start\n    while i < end:\n        list.append(i)\n        i += step\n    return list\n\ndef initialize_dict_with_pairs(pairs):\n"}
{"task_id":"task/59","completion":"\n    return list(accumulate(lst))\n\ndef cumsum2(lst):\n    return [sum(lst[:i+1]) for i in range(len(lst))]\n\n"}
{"task_id":"task/59","completion":"\n    return list(accumulate(lst))\n\nN = int(input())\n\ndiv = 10**9 + 7\n\n# \u6587\u5b57\u5217\u3092\u30ea\u30b9\u30c8\u5316\u3059\u308b\na = list"}
{"task_id":"task/59","completion":"\n    accum = 0\n    for i in lst:\n        accum += i\n        yield accum\n\ndef chunk(lst, n):\n    for i in range(0, len(lst), n):\n       "}
{"task_id":"task/59","completion":"\n    return list(accumulate(lst))\n\ndef main():\n    n = int(input())\n    x = list(map(int, input().split()))\n    y = list(map(int,"}
{"task_id":"task/59","completion":"\n    return [0] + list(accumulate(lst))\n\nlst = [0,1,2,3,4,5,6,7,8,9]\nprint(cumsum(l"}
{"task_id":"task/60","completion":"\n    \"\"\"\n    Number of months between two dates.\n    :param start: Start date\n    :param end: End date\n    :return: Int with number of months\n    \"\"\"\n    # TODO: implement\n   "}
{"task_id":"task/60","completion":"\n    if start == end:\n        return 0\n    if start[0] == end[0]:\n        return 0\n    if start[1] == end[1]:\n        return 0\n    return 12 * (end"}
{"task_id":"task/60","completion":"\n    result = end.year - start.year\n    if end.month < start.month:\n        result -= 1\n    elif end.month == start.month and end.day < start.day:\n        result"}
{"task_id":"task/60","completion":"\n    \"\"\"\n    Number of months between two dates\n    \"\"\"\n    # copy dates so don't mutate the originals\n    start = start.replace(hour=0, minute=0, second=0, microsecond=0"}
{"task_id":"task/60","completion":"\n    return (end.year - start.year) * 12 + end.month - start.month + 1\n\ndef main():\n    loan_amount = int(input())\n    down_payment = int(input())\n"}
{"task_id":"task/61","completion":"\n    words = set()\n    word_freq = defaultdict(int)\n    def do_collect(obj):\n        if obj.type in ['string', 'html']:\n            text = obj.as_html"}
{"task_id":"task/61","completion":"\n    if isinstance(obj, list):\n        return collect_dictionary_list(obj)\n    elif isinstance(obj, dict):\n        return collect_dictionary_dict(obj)\n    else:\n"}
{"task_id":"task/61","completion":"\n    return {key: value for key, value in obj.__dict__.items() if not key.startswith('__')}\n\ndef make_action_list(action_list):\n    return [collect_"}
{"task_id":"task/61","completion":"\n    \"\"\"\n    Given a dictionary or list of dictionaries, this method flattens it to a\n    single dictionary. This method will also sort the keys in the dictionary.\n    \"\"\"\n    # If it's a dictionary, just"}
{"task_id":"task/61","completion":"\n    \"\"\"Collect attributes and methods for object.\n\n    Args:\n        obj (:obj:`object`): object from which the attributes and methods will be collected.\n\n    Returns:\n        :obj:`dict` of"}
{"task_id":"task/62","completion":"\n    return comb(n, k, exact=True)\n\n# binomial_coefficient(5, 2)\n# Out[108]: 10\n\n# We can use this function to implement the nCk function as follows"}
{"task_id":"task/62","completion":"\n    return comb(n, k, exact=True)\n\ndef pascals_triangle(rows):\n    result = []\n    for count in range(rows):\n        row = []\n        for element in range"}
{"task_id":"task/62","completion":"\n    return comb(n, k, exact=True)\n\nn = 5\nk = 2\nprint(binomial_coefficient(n, k))"}
{"task_id":"task/62","completion":"\n    return comb(n, k, exact=True)\n\nn = [100, 1000, 10000, 100000, 1000000]\nfor i in n:\n    print(i, binomial_coefficient(i,"}
{"task_id":"task/62","completion":"\n    return comb(n, k, exact=True)\n\nn = int(input())\nfor _ in range(n):\n    print(binomial_coefficient(*map(int, input().split())))"}
{"task_id":"task/63","completion":"\n    return [k for k, v in dict.items() if v == val]\n\n\ndef _get_n_params(model):\n    pp = 0\n    for p in list(model.parameters()):\n"}
{"task_id":"task/63","completion":"\n    \"\"\"\n    Returns the key of the dict element with the given value.\n\n    If the given value is not in the dict, returns an empty array.\n    \"\"\"\n    return [k for k, v in dict.items"}
{"task_id":"task/63","completion":"\n    \"\"\"Return list of keys where the value is val.\"\"\"\n    return [k for k, v in dict.items() if v == val]\n\n\ndef is_ascii(s):\n    \"\"\"Check whether the"}
{"task_id":"task/63","completion":"\n    \"\"\"return the key of dictionary dic given the value\"\"\"\n    try:\n        return [k for k, v in dict.iteritems() if v == val][0]\n    except KeyError:\n        return None"}
{"task_id":"task/63","completion":"\n    \"\"\"return the key of dictionary dic given the value\"\"\"\n    return [k for k, v in dict.iteritems() if v == val]\n\n# methods for obtaining \ndef get_gene_name("}
{"task_id":"task/64","completion":"\n    return lambda x: when_true(x) if predicate(x) else x\n\ndef nested_when(predicate, list_of_when_true):\n    return lambda x: list_of_when_true"}
{"task_id":"task/64","completion":"\n    def wrapper(fn):\n        def inner(*args, **kwargs):\n            if predicate(*args, **kwargs):\n                return when_true(*args, **kwargs)\n            else:\n                return fn"}
{"task_id":"task/64","completion":"\n    \"\"\"\n    This function is like :meth:`itertools.compress()` where *when_true* is\n    the selector sequence and *predicate* filters the values.\n    The difference is that *"}
{"task_id":"task/64","completion":"\n    return when_true() if predicate else None\n\n\ndef unless(predicate, when_false):\n    return when_false() if not predicate else None\n\n\ndef is_char(data):\n    \"\"\"\n    Return"}
{"task_id":"task/64","completion":"\n    if predicate():\n        return when_true()\n    return None\n\n# @when(menu_choice == 'p', prepare_meal)\n\ndef menu_choice():\n    return input(\"\"\"\n    What would"}
{"task_id":"task/65","completion":"\n    \"\"\"\n    Yield successive n-sized chunks from lst.\n    \"\"\"\n    for i in range(0, len(lst), n):\n        yield lst[i:i + n]\n\ndef"}
{"task_id":"task/65","completion":"\n    return [lst[i:i + n] for i in range(0, len(lst), n)]\n\ndef crop_to_n(lst, n):\n    return lst[:n]"}
{"task_id":"task/65","completion":"\n    '''\n    Splits a list into n sublists.\n    '''\n    return [lst[i::n] for i in range(n)]\n\ndef flatten(lst):\n    '''"}
{"task_id":"task/65","completion":"\n    return [lst[i:i + n] for i in range(0, len(lst), n)]\n\ndef list_to_str(lst):\n    return '\\n'.join(map("}
{"task_id":"task/65","completion":"\n    \"\"\"\n    Splits a list into n smaller lists of roughly equal size.\n    Returns a list of lists.\n    \"\"\"\n    n = int(n)\n    n = max(1, n)\n    return"}
{"task_id":"task/66","completion":"\n    return km * 0.621371\n\ndef main():\n    km = float(input(\"Enter the distance in kilometers: \"))\n    miles = km_to_miles(km)\n    print(\"The distance"}
{"task_id":"task/66","completion":"\n    return km * 0.621371192\n\n\ndef miles_to_km(miles):\n    return miles / 0.621371192\n\n\ndef lbs_to_kg(lbs):\n    return lbs *"}
{"task_id":"task/66","completion":"\n    \"\"\"\n    Function that converts km to miles\n    :param km:\n    :return:\n    \"\"\"\n    miles = km / 1.609\n    return miles\n\n\ndef miles_to_km(miles):"}
{"task_id":"task/66","completion":"\n    return km * 0.621371\n\ndef miles_to_km(miles):\n    return miles / 0.621371\n\ndef kmh_to_ms(kmh):\n    return kmh"}
{"task_id":"task/66","completion":"\n    return km * 0.621371\n\nif __name__ == '__main__':\n    print(km_to_miles(5))"}
{"task_id":"task/67","completion":"\n    max_result = None\n    max_value = None\n    for i in lst:\n        # TODO: find the element e where fn(e) has the highest value\n        if max_result == None or"}
{"task_id":"task/67","completion":"\n    if lst == []:\n        return None\n    return_val = lst[0]\n    for item in lst:\n        if fn(item) > fn(return_val):\n            return_val"}
{"task_id":"task/67","completion":"\n    \"\"\"\n    Return the largest item in an iterable or the largest of two or more args.\n    \"\"\"\n    try:\n        return reduce(lambda a, b: a if fn(a) > fn(b)"}
{"task_id":"task/67","completion":"\n    \"\"\"Return the element of a list that gives the maximum value from a function.\n\n    >>> square = lambda x: x * x\n    >>> max_by([2, 4, 9, 3, 2], square)\n   "}
{"task_id":"task/67","completion":"\n    \"\"\"\n    returns the maximum element of a list,\n    determined by a function.\n    \"\"\"\n    return reduce(lambda x, y: x if fn(x) > fn(y) else y, lst)"}
{"task_id":"task/68","completion":"\n    min_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] < arr[min_index]:\n            min_index = i\n    return min_index\n\n\n"}
{"task_id":"task/68","completion":"\n    min_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] < arr[min_index]:\n            min_index = i\n    return min_index\n\n\n"}
{"task_id":"task/68","completion":"\n    min_idx = 0\n    for i in range(1, len(arr)):\n        if arr[i] < arr[min_idx]:\n            min_idx = i\n    return min_"}
{"task_id":"task/68","completion":"\n    min_elem = arr[0]\n    min_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] < min_elem:\n            min_e"}
{"task_id":"task/68","completion":"\n    \"\"\"Find minimum value in array\"\"\"\n    min_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] < arr[min_index]:\n            min_index ="}
{"task_id":"task/69","completion":"\n    if val == None:\n        val = []\n    return [[val for x in range(w)] for y in range(h)]\n\ndef initialize_3d_list(w, h, d, val = None"}
{"task_id":"task/69","completion":"\n    list = [[val for x in range(w)] for y in range(h)]\n    return list\n\ndef create_grid(w, h, val = None):\n    grid = initialize_2d_list("}
{"task_id":"task/69","completion":"\n    l = []\n    for i in range(h):\n        l.append([val] * w)\n    return l\n\n#-----------------------------------------------------------------------\n#\n#   get_chunks_indexes_to_remove"}
{"task_id":"task/69","completion":"\n    return [[val for i in range(w)] for j in range(h)]\n\ndef initialize_2d_array(w, h, val = None):\n    return np.full((h, w), val)"}
{"task_id":"task/69","completion":"\n    \"\"\"\n    Returns a 2d list of width w and height h, initialized with value val\n    \"\"\"\n    if val == None:\n        val = 0\n    # Default value is 0\n    ans = []\n   "}
{"task_id":"task/70","completion":"\n    return sorted(d.items(), key=lambda x: x[1], reverse=True)\n\n\n# This class attempts to parse the given character as an integer.\n# If it fails, the value -1 is returned."}
{"task_id":"task/70","completion":"\n    ''' Return a list of (key, value) tuples, sorted by key '''\n    return sorted(d.items(), key=lambda x: x[0])\n\n\ndef dict_to_args(d):"}
{"task_id":"task/70","completion":"\n    return [v for _, v in d.items()]\n\n\ndef sum_dicts(dicts):\n    sum_dict = defaultdict(float)\n    for d in dicts:\n        for k,"}
{"task_id":"task/70","completion":"\n    l = []\n    for i in d:\n        l.append((i, d[i]))\n    return l\n\ndef get_reg_ex(string):\n    reg_ex = r'^%"}
{"task_id":"task/70","completion":"\n    ret = []\n    for k, v in d.items():\n        ret.append(v)\n    return ret\n\n\n# In[ ]:\n\n\ndef list_to_dict(l):\n    ret ="}
{"task_id":"task/71","completion":"\n    \"\"\"\n    A function that takes an arbitrary number of arguments and returns their average.\n    \"\"\"\n    return sum(args) / len(args)\n\n\ndef square_root(n):\n    \"\"\"\n    A function"}
{"task_id":"task/71","completion":"\n    sum = 0\n    for i in args:\n        sum += i\n    return sum / len(args)\n\n\nprint(average(1, 2, 3, 4, 5))\nprint(average(1, 2"}
{"task_id":"task/71","completion":"\n    '''\n    Returns the average of args\n    '''\n    return sum(args) / len(args)\n\nprint(average(1, 2, 3, 4))\n\n# If a function does not explicitly"}
{"task_id":"task/71","completion":"\n    return sum(args) / len(args)\n\ndef absolute_value(x):\n    return abs(x)\n\ndef squre(x):\n    return x ** 2\n\nprint(average(1,"}
{"task_id":"task/71","completion":"\n    a = 0\n    b = 0\n    n = 0\n    for arg in args:\n        a += arg[0]\n        b += arg[1]\n        n += 1\n    return a/n,"}
{"task_id":"task/72","completion":"\n    return list(set(a) & set(b))\n\n# Which of the following two arrays contains all the unique values?\na = np.array([[1,2,3],[4,5,6],[7"}
{"task_id":"task/72","completion":"\n    if a.x > b.x:\n        a, b = b, a\n    return (b.x-a.x)*(a.y-b.y)/(a.y*b.x-"}
{"task_id":"task/72","completion":"\n    \"\"\"Determine the intersection of two rectangles\"\"\"\n    # Return a dictionary with the keys lo, hi\n    lo = max(a['lo'], b['lo'])\n    hi = min(a['hi"}
{"task_id":"task/72","completion":"\n    \"\"\"\n    Determine if two rectangles intersect and return the intersecting rectangle.\n    \"\"\"\n    r1_start, r1_end = a[0], a[1]\n    r2_start, r"}
{"task_id":"task/72","completion":"\n    return list(set(a) & set(b))\n\ndef getData(filenames):\n    \"\"\"\n    \u83b7\u53d6\u539f\u59cb\u6570\u636e\n    :param filenames"}
{"task_id":"task/73","completion":"\n    return sum(c1 != c2 for c1, c2 in zip(a, b))\n\ndef decrypt(ciphertext, key):\n    plaintext = \"\"\n    for i in range(len(c"}
{"task_id":"task/73","completion":"\n    assert len(a) == len(b)\n    return sum(c1 != c2 for c1, c2 in zip(a, b))\n\n# return percentage of symbols that match the reference\ndef get_"}
{"task_id":"task/73","completion":"\n    '''\n    Calculate the hamming distance of two equal-length strings.\n    The strings should be the same length, or bad things will happen.\n    '''\n    return sum(a[i] != b"}
{"task_id":"task/73","completion":"\n    return np.sum(a != b)\n\n\ndef train_test_split(X, y, test_size=0.2, random_state=None):\n    \"\"\"split the given data into train and test sets"}
{"task_id":"task/73","completion":"\n    ''' Return the Hamming distance between equal-length sequences '''\n    if len(a) != len(b):\n        raise ValueError(\"Undefined for sequences of unequal length\")\n    return sum(ch1 !="}
{"task_id":"task/74","completion":"\n    if n <= 9:\n        return n\n    else:\n        n = n % 9\n        if n == 0:\n            return 9\n        else:\n            return n\n\nif __name__ == '__"}
{"task_id":"task/74","completion":"\n    if (n <= 9):\n        return n\n    digit = 1\n    while(n>= 10):\n        n = n/10\n        digit += 1\n    return digit\n\ndef get_sum_of"}
{"task_id":"task/74","completion":"\n    digits = []\n    while n > 0:\n        digits.append(n % 10)\n        n = n // 10\n    return digits\n\n# Solution\n\ndef persistence(n):\n    s = 0\n"}
{"task_id":"task/74","completion":"\n    return map(int, str(n))\n\n\ndef unfold_list(list_of_list):\n    \"\"\"\n    >>> from random import randint\n    >>> l = [[randint(1,10) for i"}
{"task_id":"task/74","completion":"\n    n = str(n)\n    n = n[::-1]\n    n = list(n)\n    for i in range(len(n)):\n        n[i] = int(n[i"}
{"task_id":"task/75","completion":"\n    return lst[offset:] + lst[:offset]\n\ndef create_new_deck():\n    return (range(1, 53) + range(1, 53))[::-1]\n\ndef deal"}
{"task_id":"task/75","completion":"\n    \"\"\"Returns a copy of lst rolled forward by offset elements\"\"\"\n    return lst[offset:] + lst[:offset]\n\ndef eval_at_offset(sess, env, offset):\n    \"\"\"E"}
{"task_id":"task/75","completion":"\n    return lst[offset:] + lst[:offset]\n\ndef rotate(lst, offset):\n    offset = offset % len(lst)\n    rotated = roll(lst, offset)\n    return"}
{"task_id":"task/75","completion":"\n    return lst[offset:] + lst[:offset]\n\n# print(roll([1,2,3,4,5], 2))\n\ndef roll_rec(lst, offset):\n    if offset"}
{"task_id":"task/75","completion":"\n    return lst[offset:] + lst[:offset]\n\n#Returns the ID of the given chip\ndef id(chip):\n    return chip >> 2\n\n#Returns the floor number of the given chip\ndef"}
{"task_id":"task/76","completion":"\n    i = 0\n    while i < len(lst):\n        if fn(lst[i]):\n            return True\n        i += 1\n    return False\n\ndef every(lst, fn = lambda"}
{"task_id":"task/76","completion":"\n    \"\"\"\n    Returns a predicate that returns true iff fn(x) is true for some element\n    in lst.\n\n    >>> some([0, False, None, [], (), 42])\n    lambda x: x"}
{"task_id":"task/76","completion":"\n    filtered = filter(fn, lst)\n    return len(filtered) > 0\n\n# map/reduce style\ndef any_match(lst, fn = lambda x: x):\n    return some("}
{"task_id":"task/76","completion":"\n    for x in lst:\n        if fn(x):\n            return x\n    return None\n\nclass App:\n    def __init__(self, stdscr):\n        self.wc = Wc"}
{"task_id":"task/76","completion":"\n    return [x for x in lst if fn(x)]\n\ndef any(lst, fn = lambda x: x):\n    return len(some(lst, fn)) > 0\n\ndef without(l"}
{"task_id":"task/77","completion":"\n    if len(dicts) == 0:\n        return {}\n    if len(dicts) == 1:\n        return dicts[0]\n    if len(dicts) == 2:\n        return combine_"}
{"task_id":"task/77","completion":"\n    \"\"\"\n    Combine values of multiple dictionaries\n    \"\"\"\n    d = defaultdict(list)\n    for dd in dicts:\n        for k, v in dd.items():\n            d[k].append("}
{"task_id":"task/77","completion":"\n    \"\"\"\n    Combines multiple values into a single dictionary.\n    \"\"\"\n    return {k: [v] if v is not None else [] for k, v in reduce(lambda x, y: x + y, ["}
{"task_id":"task/77","completion":"\n    result = defaultdict(list)\n    for dictionary in dicts:\n        for key, value in dictionary.items():\n            result[key].append(value)\n    return result\n\n#dictionaries = ["}
{"task_id":"task/77","completion":"\n    \"\"\"Combine the given dictionaries into a single dictionary.\n\n    Each given dictionary will either overwrite or be added to the\n    return dictionary.\n    \"\"\"\n    ret = {}\n    for d in dicts:\n       "}
{"task_id":"task/78","completion":"\n    for el in lst:\n        if isinstance(el, Iterable) and not isinstance(el, str):\n            yield from flatten(el)\n        else:\n            yield el\n\ndef flatten"}
{"task_id":"task/78","completion":"\n    return sum(([x] if not isinstance(x, list) else flatten(x) for x in lst), [])\n\ndef p_system(p):\n    '''system : SYSTEM WORD\n"}
{"task_id":"task/78","completion":"\n    '''Takes a list of lists and returns a list of the elements'''\n    new_list = []\n    for i in lst:\n        for j in i:\n            new_list.append(j"}
{"task_id":"task/78","completion":"\n    \"\"\"Returns a flattened version of lst.\n\n    >>> flatten([1, 2, 3])     # normal list\n    [1, 2, 3]\n    >>> x = [1, [2, 3], 4"}
{"task_id":"task/78","completion":"\n    for x in lst:\n        if isinstance(x, Iterable) and not isinstance(x, str):\n            for y in flatten(x):\n                yield y\n        else:\n            yield x"}
{"task_id":"task/79","completion":"\n    pass\n\ndef symmetric_difference_with(a, b, fn):\n    pass\n\ndef tail(a):\n    pass\n\ndef take(a, n):\n    pass\n\ndef take_"}
{"task_id":"task/79","completion":"\n    diff1 = difference_by(a, b, fn)\n    diff2 = difference_by(b, a, fn)\n    return diff1.concat(diff2)\n\ndef symmetric_difference"}
{"task_id":"task/79","completion":"\n    diff1 = difference_by(a, b, fn)\n    diff2 = difference_by(b, a, fn)\n    return concat([diff1, diff2])\n\ndef symmetric_difference"}
{"task_id":"task/79","completion":"\n    \"\"\"\n    Returns a new set with elements in either the set or\n    the second set but not both.\n    \"\"\"\n    b = set(map(fn, b))\n    return symmetric_difference(a"}
{"task_id":"task/79","completion":"\n    return symmetric_difference(a, b).sort_by(fn)\n\ndef symmetric_difference_with(a, b, fn):\n    return symmetric_difference(a, b).sort"}
{"task_id":"task/80","completion":"\n    \"\"\"\n    like list.find() but return the index of the last item found\n    \"\"\"\n    res = None\n    for i, v in enumerate(lst):\n        if fn(v):\n            res"}
{"task_id":"task/80","completion":"\n    last_index = 0\n    for i, val in enumerate(lst):\n        if fn(val):\n            last_index = i\n    return last_index\n\n\ndef find_last_number(l"}
{"task_id":"task/80","completion":"\n    for idx, val in enumerate(reversed(lst)):\n        if fn(val):\n            return len(lst) - idx - 1\n    return None\n\n\ndef get_parser():"}
{"task_id":"task/80","completion":"\n    last_index = -1\n    result = False\n    while True:\n        try:\n            index = lst.index(fn, last_index + 1)\n        except ValueError:\n            break\n       "}
{"task_id":"task/80","completion":"\n    reversed_list = lst[::-1]\n    return len(lst) - 1 - reversed_list.index(fn)\n\n\ndef find_last(lst, fn):\n    return lst["}
{"task_id":"task/81","completion":"\n    return (sum(nums * weights) / sum(weights))\n\ndef lmap(func, *iterables):\n    return list(map(func, *iterables))\n\ndef iterate(func, start"}
{"task_id":"task/81","completion":"\n    assert len(nums) == len(weights)\n    return sum(num * weight for num, weight in zip(nums, weights)) / sum(weights)\n\naverage = weighted_average([1, 2,"}
{"task_id":"task/81","completion":"\n    assert len(nums) == len(weights)\n    return sum(num * weight for num, weight in zip(nums, weights)) / sum(weights)\n\ndef highest_frequency(nums):\n   "}
{"task_id":"task/81","completion":"\n    return sum(n * w for n, w in zip(nums, weights)) / sum(weights)\n\ndef get_error(ans, pred):\n    return sum(abs(a - p) for a,"}
{"task_id":"task/81","completion":"\n    numerator = sum([nums[i] * weights[i] for i in range(len(nums))])\n    denominator = sum(weights)\n    return numerator / denominator\n\ndef get_"}
{"task_id":"task/82","completion":"\n    return [\n        [x for i, x in enumerate(lst) if filter[i] == True],\n        [x for i, x in enumerate(lst) if filter[i] == False]"}
{"task_id":"task/82","completion":"\n    return [\n        [x for i, x in enumerate(lst) if filter[i] == True],\n        [x for i, x in enumerate(lst) if filter[i] == False]"}
{"task_id":"task/82","completion":"\n    \"\"\"\n    Bifurcate list based on filter\n    :param lst:\n    :param filter:\n    :return:\n    \"\"\"\n    return [\n        [x for i, x in enumerate"}
{"task_id":"task/82","completion":"\n    return [\n        [x for i, x in enumerate(lst) if filter[i] == True],\n        [x for i, x in enumerate(lst) if filter[i] == False]"}
{"task_id":"task/82","completion":"\n    return [\n        [x for i, x in enumerate(lst) if filter[i] == True],\n        [x for i, x in enumerate(lst) if filter[i] == False]"}
{"task_id":"task/83","completion":"\n    return all(elem == lst[0] for elem in lst)\ndef get_mask_from_range_list(ranges):\n    \"\"\"\n    example:\n    ranges: [[0, 1"}
{"task_id":"task/83","completion":"\n    return not lst or lst.count(lst[0]) == len(lst)\n\ndef all_unique(lst):\n    return len(lst) == len(set(lst))\n"}
{"task_id":"task/83","completion":"\n    return all(x == lst[0] for x in lst)\n\n# If a singleton is requested, try to return the first value from the iterator,\n# unless the iterator is empty in which case return the"}
{"task_id":"task/83","completion":"\n    return all(x == lst[0] for x in lst)\n\ndef concat_bits(list_of_bit_list):\n    '''\n    concat_bits takes a list of bit lists"}
{"task_id":"task/83","completion":"\n    return lst[1:] == lst[:-1]\n\ndef all_same(lst):\n    return len(set(lst)) == 1\n\n# Refine Data\n\n# Drop rows with missing"}
{"task_id":"task/84","completion":"\n    return [item for item in a if item not in b]\n\n# -- end code --"}
{"task_id":"task/84","completion":"\n    return list(set(a) - set(b))\n\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n\n@app.route('/', methods=['"}
{"task_id":"task/84","completion":"\n    return min(a, b)\n\n\ndef get_difference(array):\n    n = len(array)\n    # Initialize result\n    res = 0\n    i = 0\n    while i < n -"}
{"task_id":"task/84","completion":"\n    c = []\n    for i in a:\n        if i not in b:\n            c.append(i)\n    return c\n\nprint(difference([1,2,3], [1,2,"}
{"task_id":"task/84","completion":"\n    return abs(a - b)\n\n# F1-score\ndef f1_score(prediction, actual):\n    try:\n        prediction = prediction.astype(int)\n        prediction = np.array"}
{"task_id":"task/85","completion":"\n    return sub(r\"(\\s|_|-)+\",\"-\",\n               sub(r\"[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\"}
{"task_id":"task/85","completion":"\n    # your code here\n    return ''.join(x.lower() if i == 0 else ('-' + x.lower() if x.isupper() else x) for i, x in enumerate(sub('[A"}
{"task_id":"task/85","completion":"\n    s = sub(r\"(\\s|_|-)+\",\"-\",s)\n    s = sub(r\"[A-Z]\",lambda m: \"_\" + m.group(0).lower(),s)\n"}
{"task_id":"task/85","completion":"\n    return sub(r\"(\\s|_|-)+\",\"-\",sub(r\"[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|"}
{"task_id":"task/85","completion":"\n    if isinstance(s, basestring):\n        s = sub(r'[^a-zA-Z0-9]+', '-', s)\n        s = sub(r'\\-+', '"}
{"task_id":"task/86","completion":"\n    km = 1.6 * miles\n    return km\n\nmiles = 10\nkm = miles_to_km(miles)\nprint(miles, 'miles equals', km, 'km')\n\nm"}
{"task_id":"task/86","completion":"\n    km = miles * 1.60934\n    return km\n\ndef km_to_miles(km):\n    miles = km / 1.60934\n    return miles"}
{"task_id":"task/86","completion":"\n    return miles * 1.609\n\nprint(miles_to_km(10))\n\nprint(miles_to_km(0))\n\nprint(miles_to_km(13))\n\nprint"}
{"task_id":"task/86","completion":"\n    km = miles * 1.60934\n    return km\n\nprint(miles_to_km(12))\n\n#OUTPUT:\n#18.619788802909413"}
{"task_id":"task/86","completion":"\n    km = 1.6 * miles\n    return km\n\n# km to miles function\ndef km_to_miles(km):\n    miles = km / 1.6\n    return miles\n\n# convert function\n"}
{"task_id":"task/87","completion":"\n    \"\"\"\n    This function takes an end and start value and returns the sum of\n    powers of 'power' that are between start and end.\n\n    sum_of_powers(end, power, start)\n\n    end:"}
{"task_id":"task/87","completion":"\n    '''\n    This function sums all numbers between start and end that\n    are some power of two. For example, if start is 1 and end is 8,\n    the function should return 14, because the powers of two between"}
{"task_id":"task/87","completion":"\n    return sum(map(lambda x: x**power, range(start, end+1)))\n\n# no need to actually go over all numbers for this, but the option to go over the entire set is there\n# limit"}
{"task_id":"task/87","completion":"\n    \"\"\"Return the sum of all numbers less than end which are a power of start\n    \"\"\"\n    return sum(i for i in range(start, end) if i**power == start)\n\n\ndef sum_of_"}
{"task_id":"task/87","completion":"\n    if (start <= end):\n        if (start == end):\n            return start ** power\n        else:\n            return start ** power + sum_of_powers(end, power, start + 1)\n    else"}
{"task_id":"task/88","completion":"\n    def inner(arg):\n        return reduce(lambda acc, f: f(acc), reversed(fns), arg)\n    return inner\n\nimport numpy as np\n\ndef load_image(fp):\n   "}
{"task_id":"task/88","completion":"\n    if len(fns) == 0:\n        return lambda x: x\n    elif len(fns) == 1:\n        return fns[0]\n    else:\n        return reduce(lambda f,"}
{"task_id":"task/88","completion":"\n    if len(fns) == 0:\n        return lambda x: x\n    elif len(fns) == 1:\n        return fns[0]\n    else:\n        return reduce(lambda f,"}
{"task_id":"task/88","completion":"\n    return reduce(lambda f, g: lambda x: f(g(x)), fns, lambda x: x)\n\nfrom functools import partial\n\ndef add1(x):\n    return x + 1\n"}
{"task_id":"task/88","completion":"\n    if len(fns) == 0:\n        return lambda x: x\n    elif len(fns) == 1:\n        return fns[0]\n    else:\n        return reduce(lambda f,"}
{"task_id":"task/89","completion":"\n    return dot(a, b) / (norm(a) * norm(b))\n\n# X = np.array([[0, 0, 0], [0, 1, 1], [1, 0, 1],"}
{"task_id":"task/89","completion":"\n    return SequenceMatcher(None, a, b).ratio()\n\nif __name__ == '__main__':\n    main()"}
{"task_id":"task/89","completion":"\n    return len(a & b) / len(a | b)\n\nassert similarity({'x', 'y', 'z'}, {'w', 'x', 'y', 'z'}) == 1.0\n"}
{"task_id":"task/89","completion":"\n    return SequenceMatcher(None, a, b).ratio()\n\n# Download image and show contour\ndef download_image(url):\n    req = requests.get(url, stream=True)\n    filename"}
{"task_id":"task/89","completion":"\n    return np.dot(a, b) / (np.linalg.norm(a) * np.linalg.norm(b))\n\ndef similarity_cosine(a, b):\n    return np"}
{"task_id":"task/90","completion":"\n    \"\"\"\n    Check that two files have the same contents\n    \"\"\"\n    return open(a, \"rb\").read() == open(b, \"rb\").read()\n\n\ndef random_bytes(size):\n    \"\"\""}
{"task_id":"task/90","completion":"\n    \"\"\"\n    Return True if two files have the same contents.\n    \"\"\"\n    try:\n        with open(a, 'rb') as f:\n            contents_a = f.read()\n    except FileNot"}
{"task_id":"task/90","completion":"\n    return a == b\n\ndef make_immutable(value):\n    if isinstance(value, list):\n        return tuple(make_immutable(item) for item in value)\n    else:\n        return"}
{"task_id":"task/90","completion":"\n    \"\"\"Returns true if two files have the same contents.\"\"\"\n    try:\n        return filecmp.cmp(a, b, shallow=False)\n    except OSError:\n        return False\n\n\ndef _"}
{"task_id":"task/90","completion":"\n    return open(a, 'rb').read() == open(b, 'rb').read()\n\ndef is_iterable(x):\n    try:\n        iter(x)\n        return True\n    except Type"}
{"task_id":"task/91","completion":"\n    d = date.today() + timedelta(days=n)\n    return d.strftime(\"%Y-%m-%d\")"}
{"task_id":"task/91","completion":"\n    return date.today() + timedelta(days=n)"}
{"task_id":"task/91","completion":"\n    return date.today() + timedelta(days=n)"}
{"task_id":"task/91","completion":"\n    return date.today() + timedelta(days=n)\n\n# In case you need dates that fall on a particular weekday in the next n days, replace the timedelta with a TimeDelta that uses one of the constants in"}
{"task_id":"task/91","completion":"\n    d = date.today() + timedelta(days=n)\n    return d.strftime(\"%Y-%m-%d\")\n\ndef days_ago(n):\n    d = date.today()"}
{"task_id":"task/92","completion":"\n    if isinstance(val, list):\n        return val\n    return [val]\n\n\ndef _open_for_csv(path):\n    \"\"\"\n    Open a file with flags suitable for csv.reader.\n\n"}
{"task_id":"task/92","completion":"\n    return val if isinstance(val, list) else [val]\n\n\ndef _check_files(files):\n    success = True\n    for filename in files:\n        if not path.exists(filename):\n"}
{"task_id":"task/92","completion":"\n    if ',' in val:\n        val = val.split(',')\n    else:\n        val = [val]\n    return val\n\n\ndef cast_bool(val):\n    if isinstance(val,"}
{"task_id":"task/92","completion":"\n    if not val:\n        return None\n    else:\n        return [val]\n\n\ndef _convert_str(val):\n    if val is None:\n        return None\n    return str(val)\n\n"}
{"task_id":"task/92","completion":"\n    return [v.strip() for v in val.split(',')]\n\ndef gen_secret(length=32):\n    secret = ''\n    for _ in range(length):\n        secret += choice(SEC"}
{"task_id":"task/93","completion":"\n    \"\"\"Return list of key-value pairs in d, sorted by values\"\"\"\n    kv_list = d.items()\n    sort_kv_list = sorted(kv_list, key = lambda kv:"}
{"task_id":"task/93","completion":"\n    sorted_keys = sorted(d, key = d.get, reverse = reverse)\n    return sorted_keys\n\ndef sort_dict_by_value_as_string(d, reverse = False):\n    sorted"}
{"task_id":"task/93","completion":"\n    return sorted(d.items(), key = lambda x: x[1], reverse = reverse)\n\ndef sort_dict_by_key(d, reverse = False):\n    return sorted(d.items(), key ="}
{"task_id":"task/93","completion":"\n    \"\"\"\n    Sort a dict by value.\n    \"\"\"\n    return sorted(d.items(), key = operator.itemgetter(1), reverse = reverse)\n\ndef sort_dict_by_key(d,"}
{"task_id":"task/93","completion":"\n    '''\n    Sorts a dictionary by value\n    '''\n    sorted_d = sorted(d.items(), key=operator.itemgetter(1), reverse = reverse)\n    return sorted_d\n\n"}
{"task_id":"task/94","completion":"\n    return re.sub('[^a-zA-Z0-9]+', '-', s)\n\ndef add_link(doc, rel, url, title=None, mimetype=None):\n   "}
{"task_id":"task/94","completion":"\n    s = s.lower()\n    for c in [' ', '-', '.', '/']:\n        s = s.replace(c, '_')\n    s = re.sub('\\W', '',"}
{"task_id":"task/94","completion":"\n    \"\"\"Generates an ASCII-only slug.\"\"\"\n    s = unicodedata.normalize('NFKD', s).encode('ascii', 'ignore').decode('ascii')\n    s ="}
{"task_id":"task/94","completion":"\n    return re.sub('[^a-zA-Z0-9_\\-]+', '-', s)\n\ndef safe_string(s):\n    return s.replace('\"', '\\\\\"')\n"}
{"task_id":"task/94","completion":"\n    s = re.sub('[^a-zA-Z0-9_\\.]', '', s)\n    s = re.sub(' ', '_', s)\n    return s\n\ndef find_"}
{"task_id":"task/95","completion":"\n    \"\"\"\n    Converts integer to Roman numeral.\n    :param num: integer\n    :return: Roman numeral string\n    \"\"\"\n    ints = (1000, 900, 500, 400, 100, 90,"}
{"task_id":"task/95","completion":"\n    numerals = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n"}
{"task_id":"task/95","completion":"\n    arabic_list = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    roman_list = [\"M\", \"CM\", \"D"}
{"task_id":"task/95","completion":"\n    '''Returns the Roman numeral version of an integer'''\n    if num <= 0 or num >= 4000:\n        raise OutOfRangeError('number out of range (must be less than 4000)')\n    if not"}
{"task_id":"task/95","completion":"\n    \"\"\"\n    Convert an integer to a Roman numeral.\n    \"\"\"\n    roman_numeral = \"\"\n    for (arabic, roman) in MAPPING:\n        (factor, num) ="}
{"task_id":"task/96","completion":"\n    def f(self, *args, **kwargs):\n        if prop not in self.__dict__:\n            raise ValueError('%s is not defined on %s' % (prop, self.__class__"}
{"task_id":"task/96","completion":"\n    if prop is None:\n        return True\n    if not fn in prop:\n        return False\n    return True\n\ndef check_labels(fn, labels):\n    if labels is None:\n        return True"}
{"task_id":"task/96","completion":"\n    if fn.endswith('.dts'):\n        expr = prop.tokens[1].value\n        val = prop.tokens[3].value\n        if val.startswith('0"}
{"task_id":"task/96","completion":"\n    \"\"\"Return the value of a property for the given function\n    \"\"\"\n    for p in fn.props:\n        if p.prop == prop:\n            return p.value\n    return None\n\n\ndef check_"}
{"task_id":"task/96","completion":"\n    for i in range(0, 10):\n        r = random.randint(0, 1024)\n        fn(r)\n        assert r in prop\n\ndef test_set_prop():\n    prop = set"}
{"task_id":"task/97","completion":"\n    \"\"\" (list, object) -> int\n\n    Return the number of times val occurs in lst.\n\n    >>> count_occurrences([2, 3, 3, 3, 2], 2)\n    2\n    >>>"}
{"task_id":"task/97","completion":"\n    count = 0\n    for item in lst:\n        if item == val:\n            count += 1\n    return count\n\ndef max_occurrences(lst):\n    counts = []\n    for item"}
{"task_id":"task/97","completion":"\n    ''' (list, object) -> int\n\n    Return the number of times val occurs in lst.\n\n    >>> count_occurrences([2, 3, 3, 3, 2, 4, 2], 2)\n"}
{"task_id":"task/97","completion":"\n    if lst is None:\n        return 0\n    return count_occurrences_rec(lst, val)\n\ndef count_occurrences_rec(lst, val):\n    if lst is"}
{"task_id":"task/97","completion":"\n    # Your code here\n    return lst.count(val)\n\n# Should be 3\nprint(count_occurrences([True, False, True, True], True))\n\n# Should be 1\nprint("}
{"task_id":"task/98","completion":"\n    counts = Counter(nums)\n    return [x for x in counts if counts[x] % 2 == 1]\n\ndef find_parity_outliers_sets(nums):\n    parity = {"}
{"task_id":"task/98","completion":"\n    \"\"\"Given list of ints, return list of values at odd indices\"\"\"\n    out = []\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            out.append("}
{"task_id":"task/98","completion":"\n    # first find the mode\n    # if mode is even, return all elements that are odd\n    # if mode is odd, return all elements that are even\n    c = Counter(nums)\n    mode = c."}
{"task_id":"task/98","completion":"\n    c = Counter(nums)\n    return [k for k, v in c.items() if v % 2 != 0]"}
{"task_id":"task/98","completion":"\n    parity = [i % 2 for i in nums]\n    return [nums[i] for i in range(len(nums)) if parity[i] != parity[0]]\n\ndef find_outl"}
{"task_id":"task/99","completion":"\n    \"\"\"\n    :param keys: a list of strings\n    :param values: a list of ints\n    :return: dictionary with keys and values\n    \"\"\"\n    dictionary = {}\n    for i in range(len"}
{"task_id":"task/99","completion":"\n    \"\"\"\n    Return a dictionary of keys and values\n\n    Args:\n        keys (list): keys to be returned in dictionary\n        values (list): values to be returned in dictionary\n\n    Returns:\n        dict: dictionary"}
{"task_id":"task/99","completion":"\n    \"\"\"\n    takes a list of keys and a list of values, and makes a dictionary out of them\n    :param keys: list of keys\n    :param values: list of values\n    :return: dictionary\n    \"\"\""}
{"task_id":"task/99","completion":"\n    \"\"\"\n    Given a list of keys and a list of values, make a dictionary matching these keys to these values.\n\n    >>> to_dictionary(['one', 'two', 'three'], [1, 2, 3"}
{"task_id":"task/99","completion":"\n    return dict(zip(keys, values))\n\n\ndef main():\n    keys = ['name', 'age', 'height']\n    values = ['John', '24', '5.5']\n    print(to_"}
{"task_id":"task/100","completion":"\n    return [start * step ** k for k in range(0, floor(log(end, step)) + 1)]"}
{"task_id":"task/100","completion":"\n    n = floor(log(end + 1 - start, step))\n    return int(step ** n) - 1\n\ndef solution(m):\n    # Your code here\n    return geometric_progression(m)"}
{"task_id":"task/100","completion":"\n    # return a geometric progression with the specified starting value and step\n    return [start * (step ** n) for n in range(0, floor(log(end, step)) + 1)]"}
{"task_id":"task/100","completion":"\n    i = start\n    while i < end:\n        yield i\n        i *= step\n\ndef is_prime(n):\n    if n == 2:\n        return True\n    elif n < 2 or"}
{"task_id":"task/100","completion":"\n    if not isinstance(end, int):\n        raise ValueError('Geometric Progression must end with an integer.')\n    return int(floor(log(end) / log(step))) + 1\n\ndef triangular"}
{"task_id":"task/101","completion":"\n    return next(iter(reversed(list(filter(fn, lst)))))\n\ndef find_first(lst, fn):\n    return next(iter(list(filter(fn, lst))))\n"}
{"task_id":"task/101","completion":"\n    \"\"\"Find the last item in a list that satisfies a predicate.\n\n    Returns the item and the next index in the list where the item occurs.\n\n    \"\"\"\n    idx = len(lst) - 1\n    while"}
{"task_id":"task/101","completion":"\n    return next(reversed(filter(fn, reversed(lst))))\n\n\ndef find_last_index(lst, fn):\n    return len(lst) - 1 - next(i for i, e"}
{"task_id":"task/101","completion":"\n    last = None\n    for val in lst:\n        if fn(val):\n            last = val\n    return last\n\n\ndef find_first(lst, fn):\n    first = None\n    for val"}
{"task_id":"task/101","completion":"\n    for x in reversed(lst):\n        if fn(x):\n            return x\n    return None\n\ndef prepend_line(filepath, line):\n    \"\"\"Rewrite a file adding a line to its"}
{"task_id":"task/102","completion":"\n    sorted_keys = sorted(d.keys(), reverse = reverse)\n    return [(key, d[key]) for key in sorted_keys]\n\n\ndef sort_dict_by_value(d, reverse = False):"}
{"task_id":"task/102","completion":"\n    return sorted(d.items(), key=operator.itemgetter(0), reverse = reverse)\n\ndef sort_dict_by_value(d, reverse = False):\n    return sorted(d.items(), key"}
{"task_id":"task/102","completion":"\n    \"\"\"\n    Given a dictionary, return sorted (key, value) list.\n    \"\"\"\n    sorted_tuple = sorted(d.items(), key = lambda x: x[0], reverse = reverse)\n    return"}
{"task_id":"task/102","completion":"\n    return sorted(d.items(), key=lambda x: x[0], reverse=reverse)\n\ndef sort_dict_by_value(d, reverse = False):\n    return sorted(d.items(), key="}
{"task_id":"task/102","completion":"\n    return sorted(d.items(), key=lambda item: item[0], reverse=reverse)\n\ndef sort_dict_by_value(d, reverse = False):\n    return sorted(d.items(), key="}
{"task_id":"task/103","completion":"\n    \"\"\"\n    split s in lines, dealing correctly with parentheses\n    \"\"\"\n    result = []\n    parens = 0\n    start = 0\n    for i, c in enumerate(s):\n        if c"}
{"task_id":"task/103","completion":"\n    \"\"\"Split lines in a multiline string.\n\n    This is the counter part of join_lines.\n    \"\"\"\n    return [line for line in s.splitlines() if line]\n\n\ndef remove_whites"}
{"task_id":"task/103","completion":"\n    s = s.strip()\n    lines = []\n    while len(s) > 0:\n        found = False\n        for i in range(1, len(s)):\n            if s[i] =="}
{"task_id":"task/103","completion":"\n    return re.split(r'[\\r\\n]+', s)\n\n\nclass HelpFormatter(object):\n    \"\"\"Formatter for generating usage messages and argument help strings.\n\n    Only the name of this class is"}
{"task_id":"task/103","completion":"\n    \"\"\"Split a block of text into lines.\n\n    This method is smart about trimming whitespace from the right hand side of\n    each line.  It is also smart about retaining the newline characters on a\n    line that"}
{"task_id":"task/104","completion":"\n    for value in values:\n        if value in lst:\n            return True\n    return False\n\n\ndef get_cols(field_names, include_serial=True):\n    cols = ['\"%s"}
{"task_id":"task/104","completion":"\n    for v in values:\n        if v in lst:\n            return True\n    return False\n\n\nclass DjangoUtilsTest(TestCase):\n    def test_read_file(self):\n        self.assert"}
{"task_id":"task/104","completion":"\n    \"\"\"Returns true if any value in lst is in values.\n\n    :param lst: list of values\n    :param values: list of values\n    :returns: True if any value in lst is in values"}
{"task_id":"task/104","completion":"\n    for value in values:\n        if value in lst:\n            return True\n    return False\n\n\ndef includes_all(lst, values):\n    for value in values:\n        if value not in lst"}
{"task_id":"task/104","completion":"\n    for value in values:\n        if value in lst:\n            return True\n    return False\n\n\n@user_passes_test(lambda u: u.is_superuser)\ndef index(request):\n"}
{"task_id":"task/105","completion":"\n    new_data = {}\n    for data in args:\n        for key, value in data.items():\n            if key in new_data:\n                new_data[key].append(value)\n            else:"}
{"task_id":"task/105","completion":"\n    lengths = [len(i) for i in args]\n    min_length = min(lengths)\n    max_length = max(lengths)\n    if min_length != max_length:\n        raise"}
{"task_id":"task/105","completion":"\n    \"\"\"\n    Merge together values that were separated by a groupby operation\n\n    .. versionadded:: 0.16.1\n\n    Parameters\n    ----------\n    *args : DataFrames\n        DataFrames that you want to merge"}
{"task_id":"task/105","completion":"\n    \"\"\"\n    Merge dataframes column-wise. \n    Uses union of all indices in order to merge.\n    \"\"\"\n    args = list(args)\n    base = args.pop(0)\n    for df"}
{"task_id":"task/105","completion":"\n    if len(args) == 1:\n        return args[0]\n    if len(args) == 2:\n        a, b = args\n        if a is None:\n            return b\n        if b is"}
{"task_id":"task/106","completion":"\n    return reduce(lambda x, y: x if fn(x) < fn(y) else y, lst)\n\ndef max_by(lst, fn):\n    return reduce(lambda x, y: x"}
{"task_id":"task/106","completion":"\n    if not lst:\n        return None\n    fn = maybe_unary(fn)\n    return reduce(lambda a, b: a if fn(a) < fn(b) else b, lst)\n\n"}
{"task_id":"task/106","completion":"\n    return min(lst, key=fn)\n\ndef min_index_by(lst, fn):\n    return min(range(len(lst)), key=lambda i: fn(lst[i]"}
{"task_id":"task/106","completion":"\n    min_fn = None\n    min_val = None\n    for e in lst:\n        v = fn(e)\n        if min_val is None or v < min_val:\n            min_val"}
{"task_id":"task/106","completion":"\n    \"\"\"\n    Returns the element in the list that gives the minimum value when passed to the function.\n    \"\"\"\n    return min(lst, key=fn)\n\n\ndef inverse_signal(signal):\n   "}
{"task_id":"task/107","completion":"\n    return d + timedelta(days = n)\n\ndef add_years(n, d = datetime.today()):\n    return d + timedelta(days = n * 365)\n\ndef add_hours("}
{"task_id":"task/107","completion":"\n    return d + timedelta(days = n)\n\ndef format_date(d):\n    return d.strftime('%m/%d/%Y')\n\ndef format_date_time(d):\n"}
{"task_id":"task/107","completion":"\n    return d + timedelta(days = n)\n\ndef list_to_dict(li):\n    return { i : li[i] for i in range(len(li)) }\n\ndef get_input():"}
{"task_id":"task/107","completion":"\n    return d + timedelta(days = n)\n\ndef sub_days(n, d = datetime.today()):\n    return d - timedelta(days = n)\n\ndef string_to_datetime"}
{"task_id":"task/107","completion":"\n    delta = timedelta(days = n)\n    d += delta\n    return d\n\ndef find_nth(haystack, needle, n):\n    start = haystack.find(needle)\n   "}
{"task_id":"task/108","completion":"\n    s = sub('[^A-Za-z]', '', s).lower()\n    return s == s[::-1]\n\n\"\"\"\nimport re\n\ndef palindrome(s):\n   "}
{"task_id":"task/108","completion":"\n\ts = sub(r'[^A-Za-z]', '', s).lower()\n\treturn s == s[::-1]\n\nprint(palindrome(\"Dammit, I'm mad!\""}
{"task_id":"task/108","completion":"\n    s = sub('[^A-Za-z]', '', s).lower()\n    return s == s[::-1]\n\nif __name__ == '__main__':\n    s = input"}
{"task_id":"task/108","completion":"\n    s = sub('[^A-Za-z]', '', s).lower()\n    return s == s[::-1]\n\nprint(palindrome(\"Test 5:1, a s!nt"}
{"task_id":"task/108","completion":"\n    s = sub('[^A-Za-z]', '', s.lower())\n    return s == s[::-1]\n\nprint(palindrome(\"A man, a plan, a canal:"}
{"task_id":"task/109","completion":"\n    for i in lst:\n        if fn(i):\n            return False\n    return True\n\ndef find_optimal_move(board, player):\n    t_start = time.time()\n    moves"}
{"task_id":"task/109","completion":"\n    \"\"\"\n    Passes over an iterator exactly once.\n\n    This is a more efficient version of [fn(x) for x in lst].\n\n    :param lst: The list to pass over.\n    :param"}
{"task_id":"task/109","completion":"\n    return [fn(x) for x in lst if x != None]\n\ndef one(lst, fn = lambda x: x):\n    return [fn(x) for x in lst if x == 1"}
{"task_id":"task/109","completion":"\n    return [fn(x) for x in lst if x is not None]\n\ndef all_none(lst):\n    return not any(lst)\n\ndef all_not_none(lst):"}
{"task_id":"task/109","completion":"\n    for x in lst:\n        if fn(x):\n            return False\n    return True\n\ndef one(lst, fn = lambda x: x):\n    cnt = 0\n    for x in l"}
{"task_id":"task/110","completion":"\n    return lst[1:]\n\n# Some tests.\nfrom doctest import run_docstring_examples as dtest\ndtest(tail, globals(), verbose=True)\n\n# The implementation of **"}
{"task_id":"task/110","completion":"\n    return lst[1:]\n\ndef nth(lst, n):\n    return lst[n]\n\ndef init(lst):\n    return lst[:-1]\n\ndef last(l"}
{"task_id":"task/110","completion":"\n    return lst[1:]\n\ndef last(lst):\n    return lst[-1]\n\ndef init(lst):\n    return lst[:-1]\n\ndef reverse(lst):"}
{"task_id":"task/110","completion":"\n    return lst[1:]\n\ndef last(lst):\n    return lst[-1]\n\ndef first(lst):\n    return lst[0]\n\ndef drop(lst, n"}
{"task_id":"task/110","completion":"\n    return lst[1:]\n\ndef last(lst):\n    return lst[-1]\n\ndef init(lst):\n    return lst[:-1]\n\ndef reverse(lst):"}
{"task_id":"task/111","completion":"\n    return len(lst) != len(set(lst))\n\ndef has_duplicates2(lst):\n    seen = []\n    for i in lst:\n        if i in seen:\n"}
{"task_id":"task/111","completion":"\n    \"\"\"Returns True if there is any element that appears more than once.\n\n    >>> has_duplicates([1, 2, 3, 4, 5])\n    False\n    >>> has_duplicates([1, 2"}
{"task_id":"task/111","completion":"\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] == lst[j]:\n                return True\n   "}
{"task_id":"task/111","completion":"\n    \"\"\" Return True if lst has any duplicates, False if it does not.\n    \"\"\"\n    # replace the pass below with your code\n    dup_lst = []\n    for i in lst:\n       "}
{"task_id":"task/111","completion":"\n    ''' (list) -> bool\n    Return True iff the items in lst are not unique\n    '''\n    # make a copy of lst and sort it\n    sorted_list = lst[:]\n"}
{"task_id":"task/112","completion":"\n    return {fn(x): x for x in itr}\n\n\ndef map_to_array(itr, fn):\n    return np.array([fn(x) for x in itr])\n\n\ndef to"}
{"task_id":"task/112","completion":"\n    return dict(map(lambda item: (item[0], fn(item[1])), itr))\n\n\nclass RunResult(object):\n    def __init__(self, result_dict, retval, duration"}
{"task_id":"task/112","completion":"\n    \"\"\"\n    Maps a dictionary of iterables by applying a function to each element\n    of the iterable and collecting the results in a dictionary.\n\n    This is what you would usually use on a dictionary comprehension.\n\n    :param"}
{"task_id":"task/112","completion":"\n    d = {}\n    for k, v in itr:\n        d[k] = fn(v)\n    return d\n\ndef zip_dictionary(dict_a, dict_b):\n    d ="}
{"task_id":"task/112","completion":"\n    return {key: fn(value) for key, value in itr}\n\n\ndef _mock_model_list(count=1):\n    for x in range(count):\n        yield _mock_model"}
{"task_id":"task/113","completion":"\n    counter = defaultdict(int)\n    for item in lst:\n        counter[fn(item)] += 1\n    return counter\n\n# Recursion\n\n# Introduction\n\n# Recursion happens when a function calls"}
{"task_id":"task/113","completion":"\n    counts = defaultdict(int)\n    for item in lst:\n        counts[fn(item)] += 1\n    return counts\n\ncount_by([1,2,3,4,5], lambda x:"}
{"task_id":"task/113","completion":"\n\tcounts = defaultdict(int)\n\tfor v in lst:\n\t\tcounts[fn(v)] += 1\n\treturn counts\n\ndef count_list(lst, fn = lambda x: x"}
{"task_id":"task/113","completion":"\n    out = defaultdict(int)\n    for x in lst:\n        out[fn(x)] += 1\n    return out\n\ndef set_by(lst, fn = lambda x: x):\n   "}
{"task_id":"task/113","completion":"\n    d = defaultdict(int)\n    for item in lst:\n        key = fn(item)\n        d[key] += 1\n    return d\n\ndef create_fn(name, args, body):"}
{"task_id":"task/114","completion":"\n    b = set(map(fn, b))\n    return [item for item in a if fn(item) not in b]\n\n\nprint(difference_by([2.1, 1.2], [2."}
{"task_id":"task/114","completion":"\n    b = set(map(fn, b))\n    return [item for item in a if fn(item) not in b]\n\nassert difference_by([2.1, 1.2], [2.3,"}
{"task_id":"task/114","completion":"\n    b = set(map(fn, b))\n    return [item for item in a if fn(item) not in b]\n\n\n# The difference_of_squares function returns the difference between the square of the sum"}
{"task_id":"task/114","completion":"\n    \"\"\"\n    a - b, after applying fn to keys of b\n    \"\"\"\n    b = {fn(k): v for (k, v) in b.items()}\n    return {k: a[k"}
{"task_id":"task/114","completion":"\n    \"\"\"Returns the difference of both lists (A - B)\"\"\"\n    return [item for item in a if fn(item) not in map(fn, b)]\n\n\ndef difference(a, b):\n    \"\"\"Returns"}
{"task_id":"task/115","completion":"\n    return datetime.strptime(d, \"%Y-%m-%d\")\n\ndef to_iso_date(d):\n    return d.strftime(\"%Y-%m-%d\")\n"}
{"task_id":"task/115","completion":"\n    return datetime.strptime(d, \"%Y-%m-%d\")\n\ndef from_iso_time(t):\n    return datetime.strptime(t, \"%H:%M:"}
{"task_id":"task/115","completion":"\n    return datetime.strptime(d, \"%Y-%m-%d\")\n\ndef to_iso_date(d):\n    return d.strftime(\"%Y-%m-%d\")\n"}
{"task_id":"task/115","completion":"\n    \"\"\"Convert an ISO-8601 date string to a datetime object.\n    \"\"\"\n    return datetime.strptime(d, \"%Y-%m-%d\")"}
{"task_id":"task/115","completion":"\n    return datetime.strptime(d, \"%Y-%m-%d\")"}
{"task_id":"task/116","completion":"\n    counts = Counter(lst)\n    return [x for x in lst if counts[x] == 1]\n\ndef main():\n    lst = [3,3,3,2,2,2,"}
{"task_id":"task/116","completion":"\n    c = Counter(lst)\n    return [x for x in lst if c[x] == 1]\n\n\"\"\"\nGiven a list of integers, find the highest product you can get from three of the integers."}
{"task_id":"task/116","completion":"\n    return list(set(lst))\n\ndef collect_data(lst):\n    counter = Counter(lst)\n    out = []\n    for key,value in counter.items():\n        out.append"}
{"task_id":"task/116","completion":"\n    \"\"\" Function that removes duplicate elements from a list.\n    Args:\n        lst: The list that we want to filter.\n    Returns:\n        A new list with only unique elements.\n    \"\"\"\n    return"}
{"task_id":"task/116","completion":"\n    duplicates = []\n    for item in lst:\n        if lst.count(item) > 1:\n            duplicates.append(item)\n    return duplicates\n\ndef count_unique(lst"}
{"task_id":"task/117","completion":"\n    \"\"\"The difference between the two iterables a and b, making sure that no\n    duplicates are returned. This is the set version of the binary XOR operator.\n    \"\"\"\n    if not isinstance(b, Iter"}
{"task_id":"task/117","completion":"\n    return a ^ b\n\ndef symmetric_difference_update(a, b):\n    a ^= b\n\ndef union(a, b):\n    return a | b\n\ndef update(a, b"}
{"task_id":"task/117","completion":"\n    return a ^ b\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id":"task/117","completion":"\n    '''(set, set) -> set\n    Return a new set that contains all the elements that are in exactly\n    one of the sets a and b.\n    '''\n    # Make an empty set.\n   "}
{"task_id":"task/117","completion":"\n    return a ^ b\n\n\ndef _get_bin(op):\n    if isinstance(op, str):\n        op = op.encode()\n    return base64.b16decode(op)\n\n\n"}
{"task_id":"task/118","completion":"\n    return sub(r'(.)([A-Z][a-z]+)', r'\\1_\\2', s).lower()\n\ndef camel(s):\n    return sub(r'(?:^|"}
{"task_id":"task/118","completion":"\n    return sub(r'(.)([A-Z][a-z]+)', r'\\1_\\2', s).lower()\n\ndef lcamel(s):\n    return sub(r'(.)"}
{"task_id":"task/118","completion":"\n    return sub(r'([A-Z])', r'_\\1', s).lower()\n\ndef pascal(s):\n    return sub(r'_([a-z])', lambda m: m."}
{"task_id":"task/118","completion":"\n    return sub(r'([A-Z])', r'_\\1', s).lower()\n\ndef get_key(dictionary, val):\n    \"\"\"return the key of dictionary given the value\"\"\"\n    return"}
{"task_id":"task/118","completion":"\n    return sub(r'[A-Z][a-z]*',\n               lambda mo: mo.group(0).lower(),\n               s)\n\nif __name__ == '__main__':\n    print"}
{"task_id":"task/119","completion":"\n    return flat_dict.keys()\n\n\n@field_filter_fn\ndef get_names(flat_dict):\n    return [flat_dict[k].name for k in flat_dict]\n\n\n@field_"}
{"task_id":"task/119","completion":"\n    \"\"\"Returns only the keys of a flat dictionary.\n\n    Args:\n        flat_dict (dict): the flat dictionary to get the keys of.\n\n    Returns:\n        list: the keys of the dictionary.\n   "}
{"task_id":"task/119","completion":"\n    if not isinstance(flat_dict, dict):\n        return flat_dict\n    else:\n        return flat_dict.keys()\n\ndef values_only(flat_dict):\n    if not isinstance("}
{"task_id":"task/119","completion":"\n    \"\"\"\n    Returns a tuple of all the keys of the dictionary\n    :param flat_dict: dictionary\n    :return: Tuple of all the keys of the dictionary\n    \"\"\"\n    if not isinstance(flat_"}
{"task_id":"task/119","completion":"\n    for key, val in flat_dict.items():\n        if isinstance(val, dict):\n            keys_only(val)\n        else:\n            flat_dict[key] = key\n    return flat_"}
{"task_id":"task/120","completion":"\n    if num % 2 == 0:\n        return False\n    else:\n        return True\n\ndef fib_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n"}
{"task_id":"task/120","completion":"\n    return num % 2 == 1\n\ndef is_even(num):\n    return num % 2 == 0\n\ndef is_prime(num):\n    for divisor in range(2, int(math.sq"}
{"task_id":"task/120","completion":"\n    if num % 2 == 0:\n        return False\n    else:\n        return True\n\ndef remove_odd(lst):\n    lst1 = []\n    for i in lst:\n        if is"}
{"task_id":"task/120","completion":"\n    if num % 2 == 0:\n        return True\n    else:\n        return False\n\nprint(is_odd(5))\n\n# \u5b9a\u4e49\u51fd\u6570\uff0c\u5224\u65ad"}
{"task_id":"task/120","completion":"\n    return num % 2 == 1\n\ndef sum_odd_numbers(numbers):\n    total = 0\n    for num in numbers:\n        if is_odd(num):\n            total += num\n    return"}
{"task_id":"task/121","completion":"\n    d = defaultdict(list)\n    for e in lst:\n        d[fn(e)].append(e)\n    return d\n\ndef try_except(fn):\n    try:\n        return fn"}
{"task_id":"task/121","completion":"\n    groups = defaultdict(list)\n    for x in lst:\n        groups[fn(x)].append(x)\n    return groups\n\ndef test_group_by():\n    animals = [{'species"}
{"task_id":"task/121","completion":"\n    grouped = defaultdict(list)\n    for l in lst:\n        grouped[fn(l)].append(l)\n    return grouped\n\ndef group_by_key(lst, key):\n    return"}
{"task_id":"task/121","completion":"\n    d = defaultdict(list)\n    for x in lst:\n        d[fn(x)].append(x)\n    return d\n\ndef group_by_centroid(restaurants, centroids"}
{"task_id":"task/121","completion":"\n    groups = defaultdict(list)\n    for el in lst:\n        key = fn(el)\n        groups[key].append(el)\n    return groups\n\ndef test_group_by():\n   "}
{"task_id":"task/122","completion":"\n    s = ''\n    while n > 0:\n        s = str(n % 2) + s\n        n = n // 2\n    return s\n\ndef to_base(n, b):\n    s ="}
{"task_id":"task/122","completion":"\n    if n > 1:\n        to_binary(n//2)\n    print(n % 2, end = '')\n\nto_binary(10)\nprint()\n\n#%%\n# 2.1."}
{"task_id":"task/122","completion":"\n    #returns binary string of n, MSB first\n    #for example, to_binary(14) returns '1110'\n    string = ''\n    while n > 0:\n        string = str(n %"}
{"task_id":"task/122","completion":"\n    return \"{0:b}\".format(n)\n\ndef sum_weights(weights):\n    return sum(weights)\n\ndef trim_zeros(s):\n    return s.lstrip('0')\n"}
{"task_id":"task/122","completion":"\n    return [int(i) for i in list(bin(n)[2:])]\n\ndef generate_numbers(n, m):\n    return [to_binary(i) for i in range(n,"}
{"task_id":"task/123","completion":"\n    return [item for item in lst if item]\n\ndef check_if_installed(cmd):\n    \"\"\"\n    :param cmd: Command to execute to check if software is installed.\n    :type cmd: str"}
{"task_id":"task/123","completion":"\n    if len(lst) <= 1:\n        return lst\n    if lst[0] == lst[1]:\n        return compact(lst[1:])\n    return [lst[0]]"}
{"task_id":"task/123","completion":"\n    \"\"\"Return a copy of lst with non-true elements removed.\n\n        >>> compact([0, 1, 2, '', [], False, (), None, 'All done'])\n        [1, 2, 'All"}
{"task_id":"task/123","completion":"\n    \"\"\"Return a copy of lst with non-true elements removed.\n\n        >>> compact([0, 1, 2, '', [], False, (), None, 'All done'])\n        [1, 2, 'All"}
{"task_id":"task/123","completion":"\n    \"\"\"Return a copy of lst with non-true elements removed.\n\n        >>> compact([0, 1, 2, '', [], False, (), None, 'All done'])\n        [1, 2, 'All"}
{"task_id":"task/124","completion":"\n    if start < end:\n        return start <= n <= end\n    else:\n        return start <= n or n <= end\n\n# def sum_of_squares(n):\n#     s = 0\n#"}
{"task_id":"task/124","completion":"\n\t\"\"\"Returns True if n is between start and end. If end is not provided, it will return True if n is equal to start.\"\"\"\n\tif end == 0:\n\t\treturn n == start\n\telse:\n"}
{"task_id":"task/124","completion":"\n    if end == 0:\n        end = start\n        start = 0\n    return start <= n <= end\n\ndef get_function_name():\n    return traceback.extract_stack(None, 2)[0"}
{"task_id":"task/124","completion":"\n    if end == 0:\n        end = start\n        start = 0\n    return n >= start and n < end\n\n# \u8ba1\u7b97\u9636\u4e58\ndef factorial(n):\n   "}
{"task_id":"task/124","completion":"\n    if end == 0:\n        end = start\n        start = 0\n    return n >= start and n < end\n\ndef is_allowed_specific_char(string):\n    charRe = re.compile("}
{"task_id":"task/125","completion":"\n    for n in range(int ((end - start).days)):\n        yield start + timedelta(n)\n\nstart_dt = date(2018, 5, 1)\nend_dt = date(2018, 6"}
{"task_id":"task/125","completion":"\n    for n in range(int ((end - start).days)):\n        yield start + timedelta(n)\n\n# list of days from today to the last day of the year\ndates = []\ntoday = date."}
{"task_id":"task/125","completion":"\n    \"\"\"\n    Generator that yields a date range between two dates.\n    \"\"\"\n    for n in range(int ((end - start).days)):\n        yield start + timedelta(n)\n\ndef day_has"}
{"task_id":"task/125","completion":"\n    for n in range(int ((end - start).days)):\n        yield start + timedelta(n)\n\ndef get_users(datetime, date_from, date_to):\n    users = []\n"}
{"task_id":"task/125","completion":"\n    for n in range(int ((end - start).days)):\n        yield start + timedelta(n)\n\n# This code is here to find the day when maximum number of new cases were recorded in a particular country."}
{"task_id":"task/126","completion":"\n    for i in range(0, len(lst), size):\n        yield lst[i:i + size]\n\ndef get_progress_bar(current, total, length, prefix = '', suffix = '"}
{"task_id":"task/126","completion":"\n    \"\"\"\n    Chunks a list into sublists of given size.\n\n    Parameters\n    ----------\n    lst : list\n        The list to chunk.\n    size : int\n        The chunk size.\n\n    Returns"}
{"task_id":"task/126","completion":"\n    return list(lst[i:i+size] for i in range(0, len(lst), size))\n\ndef decode(xs):\n    return [chr(x) for x in xs]"}
{"task_id":"task/126","completion":"\n    return list(\n        map(lambda x: lst[x * size:x * size + size],\n            list(range(0, ceil(len(lst) / size)))))\n\nimport matplot"}
{"task_id":"task/126","completion":"\n    return list(\n        map(lambda x: lst[x * size:x * size + size],\n            list(range(0, ceil(len(lst) / size)))))\n\nchunk(["}
{"task_id":"task/127","completion":"\n    for item in lst:\n        if isinstance(item, Iterable):\n            yield from deep_flatten(item)\n        else:\n            yield item\n\nlst = [[[1, 2, 3"}
{"task_id":"task/127","completion":"\n    \"\"\"Recursively flatten a list\"\"\"\n    for el in lst:\n        if isinstance(el, Iterable) and not isinstance(el, (str, bytes)):\n            yield from deep_fl"}
{"task_id":"task/127","completion":"\n    for el in lst:\n        if isinstance(el, Iterable) and not isinstance(el, (str, bytes)):\n            yield from deep_flatten(el)\n        else:\n            yield"}
{"task_id":"task/127","completion":"\n    \"\"\"Flatten an iterable deeply.\"\"\"\n    for el in lst:\n        if isinstance(el, Iterable) and not isinstance(el, (str, bytes)):\n            yield from deep_fl"}
{"task_id":"task/127","completion":"\n    result = []\n    for x in lst:\n        if isinstance(x, Iterable):\n            result.extend(deep_flatten(x))\n        else:\n            result.append(x)"}
{"task_id":"task/128","completion":"\n    new_list = []\n    for i in range(n):\n        new_list.append(val)\n    return new_list\n\ndef get_amount_of_memory_in_mb(input_string"}
{"task_id":"task/128","completion":"\n    \"\"\"\n    Creates a list of length n initialized with the value val.\n    \"\"\"\n    return [val for i in range(n)]\n\ndef get_vector_sum(vector):\n    \"\"\"\n    Returns"}
{"task_id":"task/128","completion":"\n    for i in range(n):\n        l.append(val)\n\n# add value v to position i\ndef add_value(i, v):\n    l[i] += v\n\n# initialize list with"}
{"task_id":"task/128","completion":"\n    list_with_values = []\n    for i in range(n):\n        list_with_values.append(val)\n    return list_with_values\n\ndef initialize_2d_list_with_"}
{"task_id":"task/128","completion":"\n    l = []\n    for i in range(n):\n        l.append(val)\n    return l\n\ndef initialize_matrix_with_values(n, m, val = 0):\n    mat ="}
{"task_id":"task/129","completion":"\n    \"\"\"\n    Returns the average of list items that match the selector function\n    :param lst:\n    :param fn:\n    :return:\n    \"\"\"\n    if not isinstance(lst, list):\n"}
{"task_id":"task/129","completion":"\n    return sum(map(fn, lst)) / len(lst)\n\n#TODO: maybe use itertools.tee\ndef split_list(lst, n = 2):\n    \"\"\" Split"}
{"task_id":"task/129","completion":"\n    \"\"\"\n    Return the average value of the elements in the given list, after mapping\n    each element to a value using the given function.\n\n    >>> average_by([{ 'n': 4 }, { 'n': 2 },"}
{"task_id":"task/129","completion":"\n    \"\"\" Returns the average of a list (lst) of numbers.\n\n    :param lst: a list of numbers\n    :param fn: an optional function that is applied to the list before taking the average\n    :return"}
{"task_id":"task/129","completion":"\n    \"\"\"Return the average of lst, using fn to get values.\n    \"\"\"\n    return sum(fn(x) for x in lst) / len(lst)\n\ndef average_within_time(l"}
{"task_id":"task/130","completion":"\n    return key_of_max_value(d)\n\ndef main():\n    #\u8bfb\u53d6\u6587\u4ef6\n    fin = open('words.txt')\n    #\u521b\u5efa\u5b57"}
{"task_id":"task/130","completion":"\n    v=list(d.values())\n    k=list(d.keys())\n    return k[v.index(max(v))]\nprint(key_of_max(score))\nscore={'aa"}
{"task_id":"task/130","completion":"\n    key = None\n    max = -1\n    for k in d:\n        if d[k] > max:\n            max = d[k]\n            key = k\n    return key\n\n\ndef test_"}
{"task_id":"task/130","completion":"\n    return max(d, key=d.get)\n\ndef answer(snapshots, transactions):\n    accounts = {}\n    for snapshot in snapshots:\n        accounts[snapshot[0]] = int(snapshot["}
{"task_id":"task/130","completion":"\n    \"\"\"Returns the key in a dict d that corresponds to the maximum value of d.\n\n    >>> letters = {'a': 6, 'b': 5, 'c': 4, 'd': 5}\n    >>> key_"}
{"task_id":"task/131","completion":"\n    return lst[offset:] + lst[:offset]\n\n\ndef read_file(filename):\n    with open(filename, 'r') as f:\n        return f.read()\n\n\ndef write_file"}
{"task_id":"task/131","completion":"\n    return lst[offset:] + lst[:offset]\n\n\ndef _update_resolved_graph(resolved_graph, original_graph, node, items):\n    if node not in resolved_graph:\n"}
{"task_id":"task/131","completion":"\n    return lst[offset:] + lst[:offset]\n\n\nclass PlaybackMode(object):\n    \"\"\"\n    Enum-like class that defines the playback modes for the playlist.\n    \"\"\"\n\n    #:"}
{"task_id":"task/131","completion":"\n    return lst[offset:] + lst[:offset]\n\n\nclass TestRunner(object):\n    def __init__(self, bot, options):\n        self.bot = bot\n        self.options = options"}
{"task_id":"task/131","completion":"\n    return lst[offset:] + lst[:offset]\n\n\ndef roundrobin(*iterables):\n    \"roundrobin('ABC', 'D', 'EF') --> A D E B F C\"\n   "}
{"task_id":"task/132","completion":"\n    result = []\n    for x in a:\n        for y in b:\n            if fn(x, y):\n                result.append(x)\n                break\n    return result\n\n\ndef union_by("}
{"task_id":"task/132","completion":"\n    fn1 = lambda o: [ x for x in a if fn(o, x) ]\n    fn2 = lambda o: [ x for x in b if fn(o, x) ]\n    return intersection(fn"}
{"task_id":"task/132","completion":"\n    '''\n    @param a list of objects\n    @param b list of objects\n    @param fn function to use to compute intersection\n    '''\n    return [ x for x in a if fn(x, b"}
{"task_id":"task/132","completion":"\n    return dict([(x, x) for x in a if x in b and fn(x)])\n\n\ndef find_closest_day(d):\n    \"\"\"\n    Utility function used by update_daily_"}
{"task_id":"task/132","completion":"\n    \"\"\"\n    Returns the intersection of both iterables, where the intersection is defined\n    by the `fn` function.\n\n    :param a: iterable\n    :param b: iterable\n    :param fn: function"}
{"task_id":"task/133","completion":"\n    \"\"\"\n    Returns the union of two lists, after applying the provided function\n    to each list element of both.\n    \"\"\"\n    b = set(map(fn, b))\n    return [x for x in a"}
{"task_id":"task/133","completion":"\n    \"\"\"Union the two sets of objects by the key function.\n\n    The source order is preserved.\n\n    Parameters\n    ----------\n    a : list\n        The first set of objects.\n    b : list\n        The"}
{"task_id":"task/133","completion":"\n    \"\"\"Return the union of two lists, after applying the provided function\n    to each list element of both.\n\n    Duplicate elements will be ignored.\n\n    It uses a hash table to collect the results. The time complexity is\n"}
{"task_id":"task/133","completion":"\n    \"\"\"\n    Returns the union of two lists, after applying the provided function\n    to each list element of both.\n\n    Example:\n        union_by([1, 2, 3], [1, 2, 4], lambda"}
{"task_id":"task/133","completion":"\n    \"\"\"Combine two lists of dictionaries with different keys.\n\n    Each item in the result contains all the keys from\n    both items, with values from `b` overwriting values\n    from `a` if the same"}
{"task_id":"task/134","completion":"\n    \"\"\"Are all the elements in the list unique?\"\"\"\n    return len(lst) == len(set(lst))\n\n\nclass TypedList(list):\n    \"\"\"List that can only contain a given type or"}
{"task_id":"task/134","completion":"\n    lst.sort()\n    for i in range(len(lst)-1):\n        if lst[i] == lst[i+1]:\n            return False\n    return True\n\n# print("}
{"task_id":"task/134","completion":"\n    return len(lst) == len(set(lst))\n\ndef sum_index_same(lst):\n    for i in range(len(lst)):\n        for j in range(i+"}
{"task_id":"task/134","completion":"\n    '''\n    \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0443\u043d\u0438\u043a"}
{"task_id":"task/134","completion":"\n    '''Check all items are unique'''\n    return len(lst) == len(set(lst))\n\n\ndef check_timeseries(data, how):\n    '''Check that all items in a list"}
{"task_id":"task/135","completion":"\n    return [item[key] for item in lst]\n\ndef is_valid_json(text):\n    try:\n        json.loads(text)\n        return True\n    except ValueError:\n        return"}
{"task_id":"task/135","completion":"\n    \"return a list of the given key in all the dicts in the list\"\n    return [d[key] for d in lst]\n\ndef _check_key(cls, key):\n    if is"}
{"task_id":"task/135","completion":"\n    return [val[key] for val in lst]\n\n\ndef stop():\n    \"\"\"\n    Stop all current requests and stop the reactor\n    \"\"\"\n    global _running_requests\n    for req in _running"}
{"task_id":"task/135","completion":"\n    return [\n        elem[key]\n        for elem in lst\n    ]\n\n\n@register.simple_tag\ndef active(request, pattern):\n    if pattern == '/':\n        return 'active"}
{"task_id":"task/135","completion":"\n    return [d[key] for d in lst]\n\ndef process_file(filename):\n    '''\n    This function extracts data from the file and populates the lists:\n    header, data_types,"}
{"task_id":"task/136","completion":"\n    for elem in itr:\n        fn(elem)\n\ndef find_first(itr, fn):\n    for elem in itr:\n        if fn(elem):\n            return elem"}
{"task_id":"task/136","completion":"\n    return [fn(e) for e in itr]\n\n\n@given(st.lists(st.integers()))\ndef test_for_each(lst):\n    lst_copy = copy.deep"}
{"task_id":"task/136","completion":"\n    \"\"\"\n    Iterate over an iterator and call a function on each element. Return a\n    list of the results.\n\n    Parameters\n    ----------\n    itr : iterator\n        The iterator.\n\n    fn : function"}
{"task_id":"task/136","completion":"\n    for item in itr:\n        fn(item)\n\n\ndef as_iterator(itr):\n    if not isinstance(itr, Iterator):\n        itr = iter(itr)\n    return"}
{"task_id":"task/136","completion":"\n    for value in itr:\n        fn(value)\n\ndef map(itr, fn):\n    return [fn(v) for v in itr]\n\ndef filter(itr, fn):\n   "}
{"task_id":"task/137","completion":"\n\tfor x in lst:\n\t\tif not fn(x):\n\t\t\treturn False\n\treturn True\n\ndef any(lst, fn = lambda x: x):\n\tfor x in lst:"}
{"task_id":"task/137","completion":"\n    for i in lst:\n        if not fn(i):\n            return False\n    return True\n\n# def except_(lst, fn = lambda x: x):\n#     for i in lst:\n"}
{"task_id":"task/137","completion":"\n\tfor x in lst:\n\t\tif not fn(x):\n\t\t\treturn False\n\treturn True\n\ndef any(lst, fn = lambda x: x):\n\tfor x in lst:"}
{"task_id":"task/137","completion":"\n    for i in lst:\n        if not fn(i):\n            return False\n    return True\n\ndef single(lst, fn = lambda x: x):\n    i = 0\n    for x in l"}
{"task_id":"task/137","completion":"\n    return reduce(lambda x, y: x and fn(y), lst, True)\n\ndef any(lst, fn = lambda x: x):\n    return reduce(lambda x, y: x or fn("}
{"task_id":"task/138","completion":"\n    \"\"\"\n    Calculates the number of bytes necessary to encode the given string. This\n    method uses the same logic as the base64 module to determine the size of\n    the string but returns a byte count instead of a character count"}
{"task_id":"task/138","completion":"\n    return len(s.encode('utf-8'))\n\n\ndef get_extension(filename):\n    return filename.rsplit('.', 1)[1].lower()"}
{"task_id":"task/138","completion":"\n    try:\n        return len(s.encode('utf-8'))\n    except UnicodeDecodeError:\n        return len(s)\n\n\ndef get_terminal_size():\n    \"\"\"\n    get"}
{"task_id":"task/138","completion":"\n    \"\"\"Return the length of s in bytes.\"\"\"\n    return len(s.encode('utf-8'))\n\n\ndef uid_to_slug(uid):\n    \"\"\"Return a slug string based on the"}
{"task_id":"task/138","completion":"\n    return len(s.encode('utf-8'))\n\n\ndef get_statistics(rdd):\n    rdd_for_count = rdd.map(lambda x: x[0])\n    c"}
{"task_id":"task/139","completion":"\n    \"\"\"\n    Pad the number n with zeros in order to get a string of length l.\n    \"\"\"\n    return str(n).zfill(l)\n\n\ndef parse_args():\n    parser = argparse"}
{"task_id":"task/139","completion":"\n    s = str(n)\n    while len(s) < l:\n        s = '0' + s\n    return s\n\ndef get_time_stamp():\n    return datetime.datetime."}
{"task_id":"task/139","completion":"\n    return ' ' * (l - len(str(n))) + str(n)\n\n\ndef format_time(t):\n    return '{}s'.format(t) if t > 1 else '{}ms"}
{"task_id":"task/139","completion":"\n    t = str(n)\n    while len(t) < l:\n        t = '0' + t\n    return t\n\ndef double_hash(s):\n    return hashlib.sha256(hash"}
{"task_id":"task/139","completion":"\n    \"\"\"\n    takes an integer n and returns a string of length l (l >= len(str(n)))\n    representing n, so that lexicographic sorting of the string repr. leads to\n    correct ordering.\n   "}
{"task_id":"task/140","completion":"\n    \"\"\"\n    Call `fn` with each element of `itr` as the first arg and return `itr`.\n\n    `fn` is called right-to-left.\n\n    Args:\n        itr ("}
{"task_id":"task/140","completion":"\n    \"\"\"\n    Iterates over the iterable right-to-left, passing each result to a\n    callback.\n\n    Args:\n        itr (iterable): Iterable collection.\n        fn (callable):"}
{"task_id":"task/140","completion":"\n    \"\"\"\n    Performs a right-handed, fold-like iteration over the elements of an\n    iterable.\n\n    :param itr: The iterable to traverse.\n    :param fn: The function to apply."}
{"task_id":"task/140","completion":"\n    \"\"\"\n    Calls the given function with each element in the given iterable, and then\n    returns the iterable.\n\n    Parameters\n    ----------\n    itr : iterable\n        The iterable to call the function"}
{"task_id":"task/140","completion":"\n    itr = reversed(itr)\n    return for_each(itr, fn)\n\n\ndef tap(val, fn):\n    fn(val)\n    return val\n\n\ndef tap_all(itr"}
{"task_id":"task/141","completion":"\n    return Counter(s1) == Counter(s2)\n\ndef detect_anagrams(word, candidates):\n    return [candidate for candidate in candidates if is_anagram(word.lower(), candidate.lower"}
{"task_id":"task/141","completion":"\n    return Counter(s1) == Counter(s2)\n\na = \"fairy tales\"\nb = \"rail safety\"\n\nprint is_anagram(a, b)\n\n# other solution\ndef is"}
{"task_id":"task/141","completion":"\n    return Counter(s1) == Counter(s2)\n\ndef is_anagram2(s1, s2):\n    return sorted(s1) == sorted(s2)\n\ndef is_anagram"}
{"task_id":"task/141","completion":"\n    s1 = ''.join(sorted(s1)).strip()\n    s2 = ''.join(sorted(s2)).strip()\n    return s1 == s2\n\ndef count_anagrams"}
{"task_id":"task/141","completion":"\n    \"\"\"\n    Write an algorithm that returns whether s1 and s2 are anagrams of each other, i.e.\n    if s1 and s2 contain the same letters in a possibly different order.\n    E."}
{"task_id":"task/142","completion":"\n    \"\"\"Decapitalize the first letter of s.\"\"\"\n    if s:\n        return s[0].lower() + (s[1:].upper() if upper_rest else s[1:])\n    else"}
{"task_id":"task/142","completion":"\n    ''' Lowercases the first letter of s. '''\n    if s:\n        return s[0].lower() + (s[1:].upper() if upper_rest else s[1:])\n    else"}
{"task_id":"task/142","completion":"\n    return s[:1].lower() + (s[1:].upper() if upper_rest else s[1:])\n\ndef get_anchor_format(ref):\n    if ref.startswith('"}
{"task_id":"task/142","completion":"\n    \"\"\"decapitalize('FooBar') -> 'fooBar'\n    decapitalize('FooBar', True) -> 'fOOBAR'\n    \"\"\"\n    return s[:1].lower() +"}
{"task_id":"task/142","completion":"\n    if len(s) == 0:\n        return s\n    if len(s) == 1:\n        return s.lower()\n    return s[0].lower() + s[1:] if upper_rest else"}
{"task_id":"task/143","completion":"\n    return list(set(li))\n\n# Function to find the frequency of each element in a list\ndef unique_frequency(li):\n    unique = unique_elements(li)\n    frequency = {}\n    for"}
{"task_id":"task/143","completion":"\n    uniq_li = []\n    for element in li:\n        if element not in uniq_li:\n            uniq_li.append(element)\n    return uniq_li\n\n# D. Given"}
{"task_id":"task/143","completion":"\n    new_li = []\n    for element in li:\n        if element not in new_li:\n            new_li.append(element)\n    return new_li\n\n# get a list of all files in"}
{"task_id":"task/143","completion":"\n    return list(set(li))\n\ndef remove_duplicates(li):\n    return list(set(li))\n\ndef remove_duplicates_while_keeping_order(li):\n    seen ="}
{"task_id":"task/143","completion":"\n    new_li = []\n    for ele in li:\n        if ele not in new_li:\n            new_li.append(ele)\n    return new_li\n\ndef average_x(x_list"}
{"task_id":"task/144","completion":"\n    return '#%02x%02x%02x' % (r, g, b)\n\ndef hex_to_rgb(value):\n    value = value.lstrip('#')\n    lv"}
{"task_id":"task/144","completion":"\n    return '#%02x%02x%02x' % (r, g, b)\n\n#COLORS\n# from colour import Color\n#\n# red = Color(\"red\")\n# print(red."}
{"task_id":"task/144","completion":"\n    \"\"\"Return color as #rrggbb for the given color values.\"\"\"\n    return '#%02x%02x%02x' % (r, g, b)\n\ndef scale_rgb_tuple"}
{"task_id":"task/144","completion":"\n    return '#%02x%02x%02x' % (r, g, b)\n\ndef hex_to_rgb(value):\n    value = value.lstrip('#')\n    lv"}
{"task_id":"task/144","completion":"\n    return '#%02x%02x%02x' % (r, g, b)\n\ndef hex_to_rgb(value):\n    value = value.lstrip('#')\n    lv"}
{"task_id":"task/145","completion":"\n    for key, value in flat_dict.items():\n        if isinstance(value, dict):\n            yield from values_only(value)\n        else:\n            yield value\n\n#\n# new code start\n"}
{"task_id":"task/145","completion":"\n    return [item[1] for item in flat_dict]\n\n\ndef print_model_params(model):\n    print(40 * '=')\n    print(model)\n    print(40 * '=')"}
{"task_id":"task/145","completion":"\n    for key, value in flat_dict.items():\n        if isinstance(value, dict):\n            for k, v in value.items():\n                yield f'{key}_{k}', v\n        else"}
{"task_id":"task/145","completion":"\n    for key, value in flat_dict.items():\n        yield value\n\n\ndef get_index(index):\n    return index\n\n\ndef get_item(item):\n    return item\n\n\ndef get_value("}
{"task_id":"task/145","completion":"\n    return [item[1] for item in flat_dict]\n\n\ndef first_values_only(flat_dict):\n    return [item[1] for item in flat_dict][0]\n\n\ndef flat_"}
{"task_id":"task/146","completion":"\n    value = seed\n    while True:\n        yield value\n        value = fn(value)\n\ndef with_index(it):\n    i = 0\n    for x in it:\n        yield (i, x"}
{"task_id":"task/146","completion":"\n    \"\"\"\n    >>> list(unfold(lambda x: [x + 1], 1))\n    [2, 3, 4, 5, 6, 7, 8, 9, 10]\n    \"\"\"\n    while True:"}
{"task_id":"task/146","completion":"\n    stack = deque([seed])\n    seen = set()\n    while stack:\n        x = stack.pop()\n        if x not in seen:\n            seen.add(x)\n            stack.extend"}
{"task_id":"task/146","completion":"\n    return accumulate(fn, seed, identity)\n\ndef unfold(fn, seed):\n    return reduce(lambda acc, elem: fn(acc, elem), [seed], identity)\n\nfrom operator import add\n"}
{"task_id":"task/146","completion":"\n    \"\"\"\n    Recursively perform (f . g) to the input until a non-function\n    value is found.\n\n    >>> inc, add = lambda x: x + 1, lambda x, y: x + y"}
{"task_id":"task/147","completion":"\n    res = []\n    for i in itr:\n        res.insert(0, i)\n    return res\n\ndef replace_at(itr, idx, val):\n    return itr[:id"}
{"task_id":"task/147","completion":"\n    lst = []\n    for i in itr:\n        lst.append(i)\n    return lst\n\ndef reverse1(itr):\n    lst = []\n    for i in itr"}
{"task_id":"task/147","completion":"\n    for i in range(len(itr)-1,-1,-1):\n        yield itr[i]\n\ndef main():\n    iterator = [1,2,3,4,5]\n    print("}
{"task_id":"task/147","completion":"\n    return reversed(list(itr))\n\n\ndef pipe(*funcs):\n    return functools.reduce(lambda f, g: lambda x: f(g(x)), funcs)\n\n\ndef compose(*"}
{"task_id":"task/147","completion":"\n    return itr[::-1]\n\ndef main():\n    filename = input('Please enter the name of the file you want to get data from: ')\n    if os.path.exists(filename):\n"}
{"task_id":"task/148","completion":"\n    return dividend % divisor == 0\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2,n):\n        if is_divisible(n"}
{"task_id":"task/148","completion":"\n    if dividend % divisor == 0:\n        return True\n    else:\n        return False\n\n# Let's test the function\nprint(is_divisible(8, 2)) # Should be True\nprint("}
{"task_id":"task/148","completion":"\n    if dividend % divisor == 0:\n        return True\n    else:\n        return False\n    \n#print(is_divisible(1, 3))\n#print(is_divisible(2, 3"}
{"task_id":"task/148","completion":"\n    return dividend % divisor == 0\n\ndef fizzbuzz(start, end):\n    for i in range(start, end):\n        if is_divisible(i, 15):\n            print(\"F"}
{"task_id":"task/148","completion":"\n    \"\"\"\n    This is an optional function to validate the\n    divisibility. You can write your own function\n    or delete this one.\n    \"\"\"\n    if not isinstance(dividend, int) or not"}
{"task_id":"task/149","completion":"\n    if d.weekday() in [5,6]:\n        return False\n    return True\n\nis_weekday()\n\n# Problem 9\ndef is_leap_year(year = datetime.today()."}
{"task_id":"task/149","completion":"\n    if d.weekday() == 5 or d.weekday() == 6:\n        return False\n    return True\n\nprint(is_weekday())\n\ndef is_workday(d = datetime.today"}
{"task_id":"task/149","completion":"\n    return d.weekday() < 5\n\nprint is_weekday()\nprint is_weekday(datetime(2015, 8, 26))\n\n# lambda(\u533f\u540d\u51fd\u6570)\n\n"}
{"task_id":"task/149","completion":"\n    return d.weekday() < 5\n\n# Test if today is a weekday\nassert is_weekday()\n\n# Test if today is a weekend\nassert not is_weekday(datetime(2020, 7,"}
{"task_id":"task/149","completion":"\n    if (d.weekday() < 5):\n        return True\n    else:\n        return False\n\nprint is_weekday()\n\nprint is_weekday(datetime(2017,2,22))"}
{"task_id":"task/150","completion":"\n    return round((degrees - 32) * (5/9), 2)\n\n\ndef celsius_to_fahrenheit(degrees):\n    return round((degrees * (9/5)) + 32, 2"}
{"task_id":"task/150","completion":"\n    celsius = (degrees - 32) * (5/9)\n    return celsius\nfahrenheit_to_celsius(55)\ndef celsius_to_fahrenheit(degrees):\n"}
{"task_id":"task/150","completion":"\n    return (degrees - 32) * (5 / 9)\n\nprint(\"Freezing point of water:\", fahrenheit_to_celsius(32))\nprint(\"Boiling point of water:\", fah"}
{"task_id":"task/150","completion":"\n    \"\"\"\n    Convert Fahrenheit temperature to Celsius.\n\n    :param degrees: degrees Fahrenheit\n    :return: degrees Celsius\n    \"\"\"\n    return round((degrees - 32) * 5 / 9, 1)\n\n\ndef c"}
{"task_id":"task/150","completion":"\n    \"\"\"\n    Converts temperature in degrees Fahrenheit to degrees Celsius.\n    \"\"\"\n    return (degrees - 32) * 5 / 9\n\ndef fahrenheit_to_kelvin(degrees):\n    \"\"\""}
{"task_id":"task/151","completion":"\n    \"\"\"\n    Returns the sum of lst[i] for each i where fn(lst[i]) is True.\n    lst -- a list of integers\n    fn -- a function that takes an integer and returns True"}
{"task_id":"task/151","completion":"\n    return reduce(lambda x, y: x + y, map(fn, lst))\n\n\ndef get_fibonacci_numbers(n):\n    first = 0\n    second = 1\n    fibon"}
{"task_id":"task/151","completion":"\n    return reduce(lambda a, b: a + b, map(fn, lst))\n\ndef product_by(lst, fn):\n    return reduce(lambda a, b: a * b, map(fn"}
{"task_id":"task/151","completion":"\n    \"\"\"Returns the sum of a list of numbers that is converted to a single key\n    with the provided function.\n\n    Arguments:\n        lst: a list of numbers\n        fn: a function to convert a number to"}
{"task_id":"task/151","completion":"\n    '''\n    sum_by([{'name': 'joe', 'num': 3}, {'name': 'bob', 'num': 1}, {'name': 'tom', 'num': 4}], '"}
{"task_id":"task/152","completion":"\n    \"\"\"return the key of dictionary dic given the value\"\"\"\n    return [k for k, v in dict.iteritems() if v == val][0]\n\ndef main():\n    # read the training files\n   "}
{"task_id":"task/152","completion":"\n    \"\"\"return the key of dictionary dic given the value\"\"\"\n    return [k for k, v in dict.iteritems() if v == val][0]\n\nclass Topo(Topo):\n    def __init"}
{"task_id":"task/152","completion":"\n    \"\"\"return the key of dictionary dic given the value\"\"\"\n    return [k for k, v in dict.iteritems() if v == val][0]\n\ndef p_value_matrix(df, col_"}
{"task_id":"task/152","completion":"\n    for key, value in dict.items():\n        if val == value:\n            return key\n    return \"key doesn't exist\"\n\n# =============================================================================\n# Additional functions\n# =============================================================================\n\ndef download_data"}
{"task_id":"task/152","completion":"\n    \"\"\"return the key of dictionary dic given the value\"\"\"\n    return [k for k, v in dict.iteritems() if v == val][0]\n# ===========================\n# ======= global\n# ========================="}
{"task_id":"task/153","completion":"\n    dec = int(dec)\n    return str(hex(dec)[2:]).upper()\n\n\ndef read_file(path):\n    with open(path, 'rb') as f:\n        raw = f."}
{"task_id":"task/153","completion":"\n    return '{0:02x}'.format(dec)\n\ndef to_mac_range(start, end):\n    return ':'.join(map(to_hex, start)) + '-' + ':"}
{"task_id":"task/153","completion":"\n    return \"%x\" % dec\n\ndef to_ascii(value):\n    \"\"\"\n    Converts specified value to ASCII string.\n    @param value: value to be converted\n    @type value: int|"}
{"task_id":"task/153","completion":"\n    return hex(dec)[2:]\n\ndef from_hex(hex_str):\n    return int(hex_str, 16)\n\ndef xor_hex(hex_str1, hex_str2):\n"}
{"task_id":"task/153","completion":"\n    hex_characters = '0123456789abcdef'\n    if dec > 255:\n        return 'ff'\n    else:\n        return hex_characters[int(dec / 16)] + hex_"}
{"task_id":"task/154","completion":"\n    if num < a:\n        return a\n    elif num > b:\n        return b\n    else:\n        return num\n\n\nclass PositionPlayer(Player):\n    def __init__(self, x,"}
{"task_id":"task/154","completion":"\n    return max(a, min(b, num))\n\ndef _should_run_key_press_event(x, y):\n    return x < SCREEN_WIDTH and y < SCREEN_"}
{"task_id":"task/154","completion":"\n    \"\"\"Clamps number between two other numbers.\"\"\"\n    return max(a, min(b, num))\n\n\ndef distance(x1, y1, x2, y2):\n    \"\"\"Calculates the distance"}
{"task_id":"task/154","completion":"\n    return max(a, min(b, num))\n\ndef interp_number(val, start, end, a, b):\n    return clamp_number(a + ((b - a) * (val - start"}
{"task_id":"task/154","completion":"\n    if num < a:\n        return a\n    elif num > b:\n        return b\n    else:\n        return num\n\ndef clamp_char(char, min_char, max_char):\n   "}
{"task_id":"task/155","completion":"\n    \"\"\"\n    Compose the given functions, where the arguments are applied from right to left.\n    :param fns: The functions to compose.\n    :return: A function that composes the given functions.\n    \"\"\""}
{"task_id":"task/155","completion":"\n    return reduce(lambda f, g: lambda x: f(g(x)), fns)\n\ndef make_compose_n(n):\n    if n <= 1:\n        return lambda f, g: lambda"}
{"task_id":"task/155","completion":"\n    # Right to left function composition\n    return reduce(lambda f, g: lambda x: f(g(x)), fns)\n\ndef compose_left(*fns):\n    # Left to right function composition\n   "}
{"task_id":"task/155","completion":"\n    return reduce(lambda f, g: lambda x: f(g(x)), fns)\n\ndef compose_left(*fns):\n    return reduce(lambda f, g: lambda x: g(f(x"}
{"task_id":"task/155","completion":"\n    \"\"\"Returns a function that is the right-to-left composition of the given functions.\n    The returned function is called with the arguments it expects.\n    \"\"\"\n    return reduce(lambda f, g: lambda *args,"}
{"task_id":"task/156","completion":"\n    start_date = date(start[0], start[1], start[2])\n    end_date = date(end[0], end[1], end[2])\n    diff = end_date - start_"}
{"task_id":"task/156","completion":"\n    \"\"\"Calculates the number of days between two days\"\"\"\n    start_date = datetime.strptime(start, '%Y-%m-%d')\n    end_date = datetime.strpt"}
{"task_id":"task/156","completion":"\n    # convert dates to datetime format\n    start_datetime = datetime.datetime.strptime(start, '%Y-%m-%d')\n    end_datetime = datetime.datetime"}
{"task_id":"task/156","completion":"\n    \"\"\"\n        Find absolute diff in days between dates\n    \"\"\"\n    end_date = datetime.strptime(end, '%Y-%m-%d')\n    start_date = datetime.str"}
{"task_id":"task/156","completion":"\n    start = date(start[0], start[1], start[2])\n    end = date(end[0], end[1], end[2])\n    delta = end - start\n    return abs(delta"}
{"task_id":"task/157","completion":"\n    return a[0] >= b[0] and a[1] >= b[1] and a[2] <= b[2] and a[3] <= b[3]\n\n\nclass Rectangle(object):"}
{"task_id":"task/157","completion":"\n    a_ = np.array(a)\n    b_ = np.array(b)\n    return np.all(a_ >= b_) and np.all(a_ <= b_ + 1)\n\n\n"}
{"task_id":"task/157","completion":"\n    \"\"\"\n    Checks whether polygon A is contained in polygon B\n\n    \"\"\"\n    if not isinstance(a, Polygon):\n        raise TypeError(\"A is not a Polygon\")\n    if not isinstance"}
{"task_id":"task/157","completion":"\n    \"\"\"Return True if a is contained in b\"\"\"\n    if isinstance(a, dict) and isinstance(b, dict):\n        for k, v in a.items():\n            if k not in b:\n"}
{"task_id":"task/157","completion":"\n    return is_type_of(a, b) and not is_type_of(b, a)\n\n\ndef is_type_of(a, b):\n    return (isinstance(a, b) or"}
{"task_id":"task/158","completion":"\n    return a[:len(a) - n]\n\ndef drop_list(a, b):\n    return [x for x in a if x not in b]\n\ndef append_list(a, b):"}
{"task_id":"task/158","completion":"\n    \"\"\"\n    Drops the last n elements from a list.\n    Example:\n        >>> drop_right([1, 2, 3, 4, 5], 3)\n        [1, 2, 3]\n    \"\"\"\n"}
{"task_id":"task/158","completion":"\n    return a[:-n]\n\ndef to_upper(a):\n    return a.upper()\n\ndef to_lower(a):\n    return a.lower()\n\ndef trim(a):\n    return"}
{"task_id":"task/158","completion":"\n    \"\"\"\n    drop the last n elements of an array\n\n    :param a: array to drop elements from\n    :param n: number of elements to drop\n    :return: a new array with the last n elements dropped\n"}
{"task_id":"task/158","completion":"\n    a = np.asarray(a)\n    return a[:a.shape[0] - n]\n\ndef drop_left(a, n = 1):\n    a = np.asarray(a)"}
{"task_id":"task/159","completion":"\n    return reduce(_gcd, numbers)\n\ndef lcm(numbers):\n    return reduce(lambda x, y: (x*y)//_gcd(x,y), numbers, 1)\n\nT"}
{"task_id":"task/159","completion":"\n    return reduce(_gcd, numbers)\n\ndef lcm(numbers):\n    return reduce(lambda x, y: (x*y)//_gcd(x,y), numbers, 1)\n\ndef"}
{"task_id":"task/159","completion":"\n    return reduce(_gcd, numbers)\n\ndef lcm(numbers):\n    return reduce(lambda x, y: (x*y)//_gcd(x,y), numbers, 1)\n\ndef"}
{"task_id":"task/159","completion":"\n    return reduce(_gcd, numbers)\n\ndef lcm(numbers):\n    return reduce(lambda x, y: (x*y)//_gcd(x,y), numbers, 1)\n\nn"}
{"task_id":"task/159","completion":"\n    return reduce(_gcd, numbers)\n\ndef lcm(numbers):\n    return reduce(lambda x, y: (x*y)//_gcd(x,y), numbers, 1)\n\nN"}
